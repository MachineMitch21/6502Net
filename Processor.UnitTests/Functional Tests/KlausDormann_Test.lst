AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5409 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T S
                        ;
                        ; Copyright (C) 2012  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 02-mar-2013
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 1000 hex and
                        ; enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        
                        ; C O N F I G U R A T I O N
                        ;
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0000 =                  load_data_direct = 0
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $55 (85) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        ;data_segment memory start address, $5A (90) consecutive Bytes required
0200 =                  data_segment = $200  
                        ;code_segment memory start address, 12kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
                        ;parts of the code are self modifying and must reside in RAM
1000 =                  code_segment = $1000  
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    php         ;use stack to retrieve status
                                    pla
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    php
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    php
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    php
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
000a =                  zp_bss
000a =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000e =                  zp7f    db  $7f             ;test pattern for compare  
000f =                  zpt     ds  5               ;store/modify test area
                        ;logical zeropage operands
0014 =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0018 =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
001c =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0020 =                  ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0022 =                          dw  abs1+1
0024 =                          dw  abs1+2
0026 =                          dw  abs1+3
0028 =                          dw  abs7f
002a =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
002c =                  indt    dw  abst            ;indirect pointer to store area in absolute memory
002e =                          dw  abst+1
0030 =                          dw  abst+2
0032 =                          dw  abst+3
0034 =                  inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0036 =                  indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0038 =                          dw  absAN+1
003a =                          dw  absAN+2
003c =                          dw  absAN+3
003e =                  indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0040 =                          dw  absEO+1
0042 =                          dw  absEO+2
0044 =                          dw  absEO+3
0046 =                  indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0048 =                          dw  absOR+1
004a =                          dw  absOR+2
004c =                          dw  absOR+3
                        ;add/subtract operand generation and result/flag prediction
004e =                  adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0050 =                  sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0052 =                  adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0054 =                  sbiy2   dw  sba2-$ff
0056 =                  zp_bss_end
0056 =                  adfc    ds  1               ;carry flag before op
0057 =                  ad1     ds  1               ;operand 1 - accumulator
0058 =                  ad2     ds  1               ;operand 2 - memory / immediate
0059 =                  adrl    ds  1               ;expected result bits 0-7
005a =                  adrh    ds  1               ;expected result bit 8 (carry)
005b =                  adrf    ds  1               ;expected flags NV0000ZC (not valid in decimal mode)
005c =                  sb2     ds  1               ;operand 2 complemented for subtract
                        ;break test interrupt save
005d =                  irq_a   ds  1               ;a register
005e =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
                            
0200 =                          org data_segment
0200 =                  data_bss
0200 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0204 =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
0205 =                  fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0209 =                  rASL                        ;expected result ASL & ROL -carry  
0209 =                  rROL    db  $86,$04,$82,0   ; "
020d =                  rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0211 =                  rLSR                        ;expected result LSR & ROR -carry
0211 =                  rROR    db  $61,$41,$20,0   ; "
0215 =                  rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0219 =                  fASL                        ;expected flags for shifts
0219 =                  fROL    db  fnc,fc,fn,fz    ;no carry in
021d =                  fROLc   db  fnc,fc,fn,0     ;carry in
0221 =                  fLSR
0221 =                  fROR    db  fc,0,fc,fz      ;no carry in
0225 =                  fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0229 =                  rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
022e =                  fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
0233 =                  abst    ds  5               ;store/modify test area
                        ;logical memory operand
0238 =                  absOR   db  0,$1f,$71,$80   ;test pattern for OR
023c =                  absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
0240 =                  absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
0244 =                  absORa  db  0,$f1,$1f,0     ;test pattern for OR
0248 =                  absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
024c =                  absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
0250 =                  absrlo  db  0,$ff,$7f,$80
0254 =                  absflo  db  fz,fn,0,fn
0258 =                  data_bss_end
                        ;add/subtract operand copy
0258 =                  ada2    ds  1               ;operand 2
0259 =                  sba2    ds  1               ;operand 2 complemented for subtract
                        
                        
                                code
1000 =                          org code_segment
1000 : d8                       cld
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize BSS segment
                            if load_data_direct != 1
1001 : a24b                     ldx #zp_end-zp_init-1
1003 : bd4b40           ld_zp   lda zp_init,x
1006 : 950a                     sta zp_bss,x
1008 : ca                       dex
1009 : 10f8                     bpl ld_zp
100b : a257                     ldx #data_end-data_init-1
100d : bd9740           ld_data lda data_init,x
1010 : 9d0002                   sta data_bss,x
1013 : ca                       dex
1014 : 10f7                     bpl ld_data
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;testing relative addressing with BEQ
1016 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
1018 :                  range_loop
1018 : 88                       dey             ;next relative address
1019 : 98                       tya
101a : aa                       tax             ;precharge count to end of loop
101b : 1003                     bpl range_fw    ;calculate relative address
101d : 18                       clc             ;avoid branch self or to relative address of branch
101e : 6902                     adc #2
1020 :                  range_fw
1020 : 497f                     eor #$7f        ;complement except sign
1022 : 8da910                   sta range_adr   ;load into test target
1025 : a900                     lda #0          ;should set zero flag in status register
1027 : 4ca810                   jmp range_op
                                
                                ;relative address target field with branch under test in the middle                       
102a : ca                       dex             ;-128 - max backward
102b : ca                       dex
102c : ca                       dex
102d : ca                       dex
102e : ca                       dex
102f : ca                       dex
1030 : ca                       dex
1031 : ca                       dex
1032 : ca                       dex             ;-120
1033 : ca                       dex
1034 : ca                       dex
1035 : ca                       dex
1036 : ca                       dex
1037 : ca                       dex
1038 : ca                       dex
1039 : ca                       dex
103a : ca                       dex
103b : ca                       dex
103c : ca                       dex             ;-110
103d : ca                       dex
103e : ca                       dex
103f : ca                       dex
1040 : ca                       dex
1041 : ca                       dex
1042 : ca                       dex
1043 : ca                       dex
1044 : ca                       dex
1045 : ca                       dex
1046 : ca                       dex             ;-100
1047 : ca                       dex
1048 : ca                       dex
1049 : ca                       dex
104a : ca                       dex
104b : ca                       dex
104c : ca                       dex
104d : ca                       dex
104e : ca                       dex
104f : ca                       dex
1050 : ca                       dex             ;-90
1051 : ca                       dex
1052 : ca                       dex
1053 : ca                       dex
1054 : ca                       dex
1055 : ca                       dex
1056 : ca                       dex
1057 : ca                       dex
1058 : ca                       dex
1059 : ca                       dex
105a : ca                       dex             ;-80
105b : ca                       dex
105c : ca                       dex
105d : ca                       dex
105e : ca                       dex
105f : ca                       dex
1060 : ca                       dex
1061 : ca                       dex
1062 : ca                       dex
1063 : ca                       dex
1064 : ca                       dex             ;-70
1065 : ca                       dex
1066 : ca                       dex
1067 : ca                       dex
1068 : ca                       dex
1069 : ca                       dex
106a : ca                       dex
106b : ca                       dex
106c : ca                       dex
106d : ca                       dex
106e : ca                       dex             ;-60
106f : ca                       dex
1070 : ca                       dex
1071 : ca                       dex
1072 : ca                       dex
1073 : ca                       dex
1074 : ca                       dex
1075 : ca                       dex
1076 : ca                       dex
1077 : ca                       dex
1078 : ca                       dex             ;-50
1079 : ca                       dex
107a : ca                       dex
107b : ca                       dex
107c : ca                       dex
107d : ca                       dex
107e : ca                       dex
107f : ca                       dex
1080 : ca                       dex
1081 : ca                       dex
1082 : ca                       dex             ;-40
1083 : ca                       dex
1084 : ca                       dex
1085 : ca                       dex
1086 : ca                       dex
1087 : ca                       dex
1088 : ca                       dex
1089 : ca                       dex
108a : ca                       dex
108b : ca                       dex
108c : ca                       dex             ;-30
108d : ca                       dex
108e : ca                       dex
108f : ca                       dex
1090 : ca                       dex
1091 : ca                       dex
1092 : ca                       dex
1093 : ca                       dex
1094 : ca                       dex
1095 : ca                       dex
1096 : ca                       dex             ;-20
1097 : ca                       dex
1098 : ca                       dex
1099 : ca                       dex
109a : ca                       dex
109b : ca                       dex
109c : ca                       dex
109d : ca                       dex
109e : ca                       dex
109f : ca                       dex
10a0 : ca                       dex             ;-10
10a1 : ca                       dex
10a2 : ca                       dex
10a3 : ca                       dex
10a4 : ca                       dex
10a5 : ca                       dex
10a6 : ca                       dex
10a7 : ca                       dex             ;-3
10a8 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
10a9 =                  range_adr   = *+1       ;modifiable relative address
10a8 : f03e                     beq *+64        ;if called without modification
10aa : ca                       dex             ;+0
10ab : ca                       dex
10ac : ca                       dex
10ad : ca                       dex
10ae : ca                       dex
10af : ca                       dex
10b0 : ca                       dex
10b1 : ca                       dex
10b2 : ca                       dex
10b3 : ca                       dex
10b4 : ca                       dex             ;+10
10b5 : ca                       dex
10b6 : ca                       dex
10b7 : ca                       dex
10b8 : ca                       dex
10b9 : ca                       dex
10ba : ca                       dex
10bb : ca                       dex
10bc : ca                       dex
10bd : ca                       dex
10be : ca                       dex             ;+20
10bf : ca                       dex
10c0 : ca                       dex
10c1 : ca                       dex
10c2 : ca                       dex
10c3 : ca                       dex
10c4 : ca                       dex
10c5 : ca                       dex
10c6 : ca                       dex
10c7 : ca                       dex
10c8 : ca                       dex             ;+30
10c9 : ca                       dex
10ca : ca                       dex
10cb : ca                       dex
10cc : ca                       dex
10cd : ca                       dex
10ce : ca                       dex
10cf : ca                       dex
10d0 : ca                       dex
10d1 : ca                       dex
10d2 : ca                       dex             ;+40
10d3 : ca                       dex
10d4 : ca                       dex
10d5 : ca                       dex
10d6 : ca                       dex
10d7 : ca                       dex
10d8 : ca                       dex
10d9 : ca                       dex
10da : ca                       dex
10db : ca                       dex
10dc : ca                       dex             ;+50
10dd : ca                       dex
10de : ca                       dex
10df : ca                       dex
10e0 : ca                       dex
10e1 : ca                       dex
10e2 : ca                       dex
10e3 : ca                       dex
10e4 : ca                       dex
10e5 : ca                       dex
10e6 : ca                       dex             ;+60
10e7 : ca                       dex
10e8 : ca                       dex
10e9 : ca                       dex
10ea : ca                       dex
10eb : ca                       dex
10ec : ca                       dex
10ed : ca                       dex
10ee : ca                       dex
10ef : ca                       dex
10f0 : ca                       dex             ;+70
10f1 : ca                       dex
10f2 : ca                       dex
10f3 : ca                       dex
10f4 : ca                       dex
10f5 : ca                       dex
10f6 : ca                       dex
10f7 : ca                       dex
10f8 : ca                       dex
10f9 : ca                       dex
10fa : ca                       dex             ;+80
10fb : ca                       dex
10fc : ca                       dex
10fd : ca                       dex
10fe : ca                       dex
10ff : ca                       dex
1100 : ca                       dex
1101 : ca                       dex
1102 : ca                       dex
1103 : ca                       dex
1104 : ca                       dex             ;+90
1105 : ca                       dex
1106 : ca                       dex
1107 : ca                       dex
1108 : ca                       dex
1109 : ca                       dex
110a : ca                       dex
110b : ca                       dex
110c : ca                       dex
110d : ca                       dex
110e : ca                       dex             ;+100
110f : ca                       dex
1110 : ca                       dex
1111 : ca                       dex
1112 : ca                       dex
1113 : ca                       dex
1114 : ca                       dex
1115 : ca                       dex
1116 : ca                       dex
1117 : ca                       dex
1118 : ca                       dex             ;+110
1119 : ca                       dex
111a : ca                       dex
111b : ca                       dex
111c : ca                       dex
111d : ca                       dex
111e : ca                       dex
111f : ca                       dex
1120 : ca                       dex
1121 : ca                       dex
1122 : ca                       dex             ;+120
1123 : ca                       dex
1124 : ca                       dex
1125 : ca                       dex
1126 : ca                       dex
1127 : ca                       dex
1128 : ca                       dex
1129 : f003                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
112b : 4c2b11          >        jmp *           ;failed anyway
                        
112e :                  range_ok
112e : c000                     cpy #0
1130 : f003                     beq range_end   
1132 : 4c1810                   jmp range_loop
1135 :                  range_end               ;range test successful
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
1135 : c001                     cpy #1          ;testing BNE true
1137 : d003                     bne test_bne
                                trap 
1139 : 4c3911          >        jmp *           ;failed anyway
                        
113c :                  test_bne
113c : a900                     lda #0 
113e : c900                     cmp #0          ;test compare immediate 
                                trap_ne
1140 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
1142 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
1144 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
1146 : c901                     cmp #1
                                trap_eq 
1148 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
114a : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
114c : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
114e : aa                       tax 
114f : e000                     cpx #0          ;test compare x immediate
                                trap_ne
1151 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
1153 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
1155 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
1157 : e001                     cpx #1
                                trap_eq 
1159 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
115b : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
115d : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
115f : a8                       tay 
1160 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
1162 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
1164 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
1166 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
1168 : c001                     cpy #1
                                trap_eq 
116a : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
116c : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
116e : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                        ;testing stack operations PHA PHP PLA PLP
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                    
1170 : a2ff                     ldx #$ff        ;initialize stack
1172 : 9a                       txs
1173 : a955                     lda #$55
1175 : 48                       pha
1176 : a9aa                     lda #$aa
1178 : 48                       pha
1179 : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
117c : d0fe            >        bne *           ;failed not equal (non zero)
                        
117e : ba                       tsx
117f : 8a                       txa             ;overwrite accu
1180 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
1182 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1184 : 68                       pla
1185 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
1187 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1189 : 68                       pla
118a : c955                     cmp #$55
                                trap_ne
118c : d0fe            >        bne *           ;failed not equal (non zero)
                        
118e : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
1191 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1193 : ba                       tsx
1194 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
1196 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff    ;all on
                       >            load_flag $ff    
1198 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
119a : 48              >            pha         ;use stack to load status
119b : 28              >            plp
                        
119c : 101a                     bpl nbr1        ;branches should not be taken
119e : 501b                     bvc nbr2
11a0 : 901c                     bcc nbr3
11a2 : d01d                     bne nbr4
11a4 : 3003                     bmi br1         ;branches should be taken
                                trap 
11a6 : 4ca611          >        jmp *           ;failed anyway
                        
11a9 : 7003             br1     bvs br2
                                trap 
11ab : 4cab11          >        jmp *           ;failed anyway
                        
11ae : b003             br2     bcs br3
                                trap 
11b0 : 4cb011          >        jmp *           ;failed anyway
                        
11b3 : f00f             br3     beq br4
                                trap 
11b5 : 4cb511          >        jmp *           ;failed anyway
                        
11b8 :                  nbr1
                                trap            ;previous bpl taken 
11b8 : 4cb811          >        jmp *           ;failed anyway
                        
11bb :                  nbr2
                                trap            ;previous bvc taken
11bb : 4cbb11          >        jmp *           ;failed anyway
                        
11be :                  nbr3
                                trap            ;previous bcc taken
11be : 4cbe11          >        jmp *           ;failed anyway
                        
11c1 :                  nbr4
                                trap            ;previous bne taken
11c1 : 4cc111          >        jmp *           ;failed anyway
                        
11c4 : 08               br4     php
11c5 : ba                       tsx
11c6 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
11c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11ca : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
11cb : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
11cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
11cf : ba                       tsx
11d0 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
11d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
11d4 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
11d6 : 48              >            pha         ;use stack to load status
11d7 : 28              >            plp
                        
11d8 : 3022                     bmi nbr11       ;branches should not be taken
11da : 7023                     bvs nbr12
11dc : b024                     bcs nbr13
11de : f025                     beq nbr14
                                trap_mi  
11e0 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_vs
11e2 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_cs
11e4 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_eq 
11e6 : f0fe            >        beq *           ;failed equal (zero)
                        
11e8 : 1003                     bpl br11        ;branches should be taken
                                trap 
11ea : 4cea11          >        jmp *           ;failed anyway
                        
11ed : 5003             br11    bvc br12
                                trap 
11ef : 4cef11          >        jmp *           ;failed anyway
                        
11f2 : 9003             br12    bcc br13
                                trap 
11f4 : 4cf411          >        jmp *           ;failed anyway
                        
11f7 : d00f             br13    bne br14
                                trap 
11f9 : 4cf911          >        jmp *           ;failed anyway
                        
11fc :                  nbr11
                                trap            ;previous bmi taken 
11fc : 4cfc11          >        jmp *           ;failed anyway
                        
11ff :                  nbr12
                                trap            ;previous bvs taken 
11ff : 4cff11          >        jmp *           ;failed anyway
                        
1202 :                  nbr13
                                trap            ;previous bcs taken 
1202 : 4c0212          >        jmp *           ;failed anyway
                        
1205 :                  nbr14
                                trap            ;previous beq taken 
1205 : 4c0512          >        jmp *           ;failed anyway
                        
1208 : 08               br14    php
1209 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
120a : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
120c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat carry
                       >            load_flag carry
120e : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
1210 : 48              >            pha         ;use stack to load status
1211 : 28              >            plp
                        
                                trap_cc
1212 : 90fe            >        bcc *           ;failed carry clear
                        
                                set_stat zero
                       >            load_flag zero
1214 : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
1216 : 48              >            pha         ;use stack to load status
1217 : 28              >            plp
                        
                                trap_ne
1218 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat overfl
                       >            load_flag overfl
121a : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
121c : 48              >            pha         ;use stack to load status
121d : 28              >            plp
                        
                                trap_vc
121e : 50fe            >        bvc *           ;failed overflow clear
                        
                                set_stat minus
                       >            load_flag minus
1220 : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
1222 : 48              >            pha         ;use stack to load status
1223 : 28              >            plp
                        
                                trap_pl
1224 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                set_stat $ff-carry
                       >            load_flag $ff-carry
1226 : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
1228 : 48              >            pha         ;use stack to load status
1229 : 28              >            plp
                        
                                trap_cs
122a : b0fe            >        bcs *           ;failed carry set
                        
                                set_stat $ff-zero
                       >            load_flag $ff-zero
122c : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
122e : 48              >            pha         ;use stack to load status
122f : 28              >            plp
                        
                                trap_eq 
1230 : f0fe            >        beq *           ;failed equal (zero)
                        
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
1232 : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
1234 : 48              >            pha         ;use stack to load status
1235 : 28              >            plp
                        
                                trap_vs
1236 : 70fe            >        bvs *           ;failed overflow set
                        
                                set_stat $ff-minus
                       >            load_flag $ff-minus
1238 : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
123a : 48              >            pha         ;use stack to load status
123b : 28              >            plp
                        
                                trap_mi
123c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
123e : a255                     ldx #$55        ;x & y protected
1240 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
1242 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
1244 : 48              >            pha         ;use stack to load status
1245 : a901            >            lda #1     ;precharge accu
1247 : 28              >            plp
                        
1248 : 48                       pha
                                tst_a 1,$ff
1249 : 08              >            php         ;save flags
124a : 08              >            php
124b : c901            >            cmp #1     ;test result
                       >            trap_ne
124d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
124f : 68              >            pla         ;load status
                       >            cmp_flag $ff
1250 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1252 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1254 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
1255 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1257 : 48              >            pha         ;use stack to load status
1258 : a900            >            lda #0     ;precharge accu
125a : 28              >            plp
                        
125b : 48                       pha
                                tst_a 0,0
125c : 08              >            php         ;save flags
125d : 08              >            php
125e : c900            >            cmp #0     ;test result
                       >            trap_ne
1260 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1262 : 68              >            pla         ;load status
                       >            cmp_flag 0
1263 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1265 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1267 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
1268 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
126a : 48              >            pha         ;use stack to load status
126b : a9ff            >            lda #$ff     ;precharge accu
126d : 28              >            plp
                        
126e : 48                       pha
                                tst_a $ff,$ff
126f : 08              >            php         ;save flags
1270 : 08              >            php
1271 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1273 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1275 : 68              >            pla         ;load status
                       >            cmp_flag $ff
1276 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1278 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
127a : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
127b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
127d : 48              >            pha         ;use stack to load status
127e : a901            >            lda #1     ;precharge accu
1280 : 28              >            plp
                        
1281 : 48                       pha
                                tst_a 1,0
1282 : 08              >            php         ;save flags
1283 : 08              >            php
1284 : c901            >            cmp #1     ;test result
                       >            trap_ne
1286 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1288 : 68              >            pla         ;load status
                       >            cmp_flag 0
1289 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
128b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
128d : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
128e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1290 : 48              >            pha         ;use stack to load status
1291 : a900            >            lda #0     ;precharge accu
1293 : 28              >            plp
                        
1294 : 48                       pha
                                tst_a 0,$ff
1295 : 08              >            php         ;save flags
1296 : 08              >            php
1297 : c900            >            cmp #0     ;test result
                       >            trap_ne
1299 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
129b : 68              >            pla         ;load status
                       >            cmp_flag $ff
129c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
129e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12a0 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
12a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
12a3 : 48              >            pha         ;use stack to load status
12a4 : a9ff            >            lda #$ff     ;precharge accu
12a6 : 28              >            plp
                        
12a7 : 48                       pha
                                tst_a $ff,0
12a8 : 08              >            php         ;save flags
12a9 : 08              >            php
12aa : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
12ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12ae : 68              >            pla         ;load status
                       >            cmp_flag 0
12af : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
12b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12b3 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
12b4 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
12b6 : 48              >            pha         ;use stack to load status
12b7 : a900            >            lda #0     ;precharge accu
12b9 : 28              >            plp
                        
12ba : 68                       pla
                                tst_a $ff,$ff-zero
12bb : 08              >            php         ;save flags
12bc : 08              >            php
12bd : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
12bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12c1 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
12c2 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
12c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12c6 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
12c7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
12c9 : 48              >            pha         ;use stack to load status
12ca : a9ff            >            lda #$ff     ;precharge accu
12cc : 28              >            plp
                        
12cd : 68                       pla
                                tst_a 0,zero
12ce : 08              >            php         ;save flags
12cf : 08              >            php
12d0 : c900            >            cmp #0     ;test result
                       >            trap_ne
12d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12d4 : 68              >            pla         ;load status
                       >            cmp_flag zero
12d5 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
12d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12d9 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
12da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12dc : 48              >            pha         ;use stack to load status
12dd : a9fe            >            lda #$fe     ;precharge accu
12df : 28              >            plp
                        
12e0 : 68                       pla
                                tst_a 1,$ff-zero-minus
12e1 : 08              >            php         ;save flags
12e2 : 08              >            php
12e3 : c901            >            cmp #1     ;test result
                       >            trap_ne
12e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12e7 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero-minus
12e8 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
12ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12ec : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
12ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
12ef : 48              >            pha         ;use stack to load status
12f0 : a900            >            lda #0     ;precharge accu
12f2 : 28              >            plp
                        
12f3 : 68                       pla
                                tst_a $ff,minus
12f4 : 08              >            php         ;save flags
12f5 : 08              >            php
12f6 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
12f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12fa : 68              >            pla         ;load status
                       >            cmp_flag minus
12fb : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
12fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12ff : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
1300 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1302 : 48              >            pha         ;use stack to load status
1303 : a9ff            >            lda #$ff     ;precharge accu
1305 : 28              >            plp
                        
1306 : 68                       pla
                                tst_a 0,$ff-minus
1307 : 08              >            php         ;save flags
1308 : 08              >            php
1309 : c900            >            cmp #0     ;test result
                       >            trap_ne
130b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
130d : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
130e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1310 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1312 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
1313 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1315 : 48              >            pha         ;use stack to load status
1316 : a9fe            >            lda #$fe     ;precharge accu
1318 : 28              >            plp
                        
1319 : 68                       pla
                                tst_a 1,0
131a : 08              >            php         ;save flags
131b : 08              >            php
131c : c901            >            cmp #1     ;test result
                       >            trap_ne
131e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1320 : 68              >            pla         ;load status
                       >            cmp_flag 0
1321 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1323 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1325 : 28              >            plp         ;restore status
                        
1326 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
1328 : d0fe            >        bne *           ;failed not equal (non zero)
                        
132a : c0aa                     cpy #$aa
                                trap_ne
132c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
132e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1330 : 48              >            pha         ;use stack to load status
1331 : a93c            >            lda #$3c     ;precharge accu
1333 : 28              >            plp
                        
1334 : 49c3                     eor #$c3
                                tst_a $ff,fn
1336 : 08              >            php         ;save flags
1337 : 08              >            php
1338 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
133a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
133c : 68              >            pla         ;load status
                       >            cmp_flag fn
133d : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
133f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1341 : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
1342 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1344 : 48              >            pha         ;use stack to load status
1345 : a9c3            >            lda #$c3     ;precharge accu
1347 : 28              >            plp
                        
1348 : 49c3                     eor #$c3
                                tst_a 0,fz
134a : 08              >            php         ;save flags
134b : 08              >            php
134c : c900            >            cmp #0     ;test result
                       >            trap_ne
134e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1350 : 68              >            pla         ;load status
                       >            cmp_flag fz
1351 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1353 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1355 : 28              >            plp         ;restore status
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
1356 : a224                     ldx #$24
1358 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
135a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
135c : 48              >            pha         ;use stack to load status
135d : a918            >            lda #$18     ;precharge accu
135f : 28              >            plp
                        
1360 : ea                       nop
                                tst_a $18,0
1361 : 08              >            php         ;save flags
1362 : 08              >            php
1363 : c918            >            cmp #$18     ;test result
                       >            trap_ne
1365 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1367 : 68              >            pla         ;load status
                       >            cmp_flag 0
1368 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
136a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
136c : 28              >            plp         ;restore status
                        
136d : e024                     cpx #$24
                                trap_ne
136f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1371 : c042                     cpy #$42
                                trap_ne
1373 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1375 : a2db                     ldx #$db
1377 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
1379 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
137b : 48              >            pha         ;use stack to load status
137c : a9e7            >            lda #$e7     ;precharge accu
137e : 28              >            plp
                        
137f : ea                       nop
                                tst_a $e7,$ff
1380 : 08              >            php         ;save flags
1381 : 08              >            php
1382 : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
1384 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1386 : 68              >            pla         ;load status
                       >            cmp_flag $ff
1387 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1389 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
138b : 28              >            plp         ;restore status
                        
138c : e0db                     cpx #$db
                                trap_ne
138e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1390 : c0bd                     cpy #$bd
                                trap_ne
1392 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
1394 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
1396 : 48              >            pha         ;use stack to load status
1397 : 28              >            plp
                        
1398 : a946                     lda #'F'
139a : a241                     ldx #'A'
139c : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
139e : 4c593f                   jmp test_far
13a1 : ea                       nop
13a2 : ea                       nop
                                trap_ne         ;runover protection
13a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13a5 : e8                       inx
13a6 : e8                       inx
13a7 :                  far_ret 
                                trap_eq         ;returned flags OK?
13a7 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
13a9 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
13ab : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
13ad : 50fe            >        bvc *           ;failed overflow clear
                        
13af : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
13b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13b3 : e042                     cpx #('A'+1)
                                trap_ne
13b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13b7 : c04f                     cpy #('R'-3)
                                trap_ne
13b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13bb : ca                       dex
13bc : c8                       iny
13bd : c8                       iny
13be : c8                       iny
13bf : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
13c1 : 4cca13                   jmp test_near
13c4 : ea                       nop
13c5 : ea                       nop
                                trap_ne         ;runover protection
13c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13c8 : e8                       inx
13c9 : e8                       inx
13ca :                  test_near
                                trap_eq         ;passed flags OK?
13ca : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
13cc : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
13ce : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
13d0 : 50fe            >        bvc *           ;failed overflow clear
                        
13d2 : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
13d4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13d6 : e041                     cpx #'A'
                                trap_ne
13d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13da : c052                     cpy #'R'
                                trap_ne
13dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
13de : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13e0 : 48              >            pha         ;use stack to load status
13e1 : 28              >            plp
                        
13e2 : a949                     lda #'I'
13e4 : a24e                     ldx #'N'
13e6 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
13e8 : 6c873f                   jmp (ptr_tst_ind)
13eb : ea                       nop
                                trap_ne         ;runover protection
13ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
13ee : 88                       dey
13ef : 88                       dey
13f0 :                  ind_ret 
13f0 : 08                       php             ;either SP or Y count will fail, if we do not hit
13f1 : 88                       dey
13f2 : 88                       dey
13f3 : 88                       dey
13f4 : 28                       plp
                                trap_eq         ;returned flags OK?
13f5 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
13f7 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
13f9 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
13fb : 50fe            >        bvc *           ;failed overflow clear
                        
13fd : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
13ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
1401 : e04f                     cpx #('N'+1)
                                trap_ne
1403 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1405 : c03e                     cpy #('D'-6)
                                trap_ne
1407 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1409 : ba                       tsx             ;SP check
140a : e0ff                     cpx #$ff
                                trap_ne
140c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
140e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1410 : 48              >            pha         ;use stack to load status
1411 : 28              >            plp
                        
1412 : a94a                     lda #'J'
1414 : a253                     ldx #'S'
1416 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
1418 : 20c33f                   jsr test_jsr
141a =                  jsr_ret = *-1           ;last address of jsr = return address
141b : 08                       php             ;either SP or Y count will fail, if we do not hit
141c : 88                       dey
141d : 88                       dey
141e : 88                       dey
141f : 28                       plp
                                trap_eq         ;returned flags OK?
1420 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
1422 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
1424 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
1426 : 50fe            >        bvc *           ;failed overflow clear
                        
1428 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
142a : d0fe            >        bne *           ;failed not equal (non zero)
                        
142c : e054                     cpx #('S'+1)
                                trap_ne
142e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1430 : c04c                     cpy #('R'-6)
                                trap_ne
1432 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1434 : ba                       tsx             ;sp?
1435 : e0ff                     cpx #$ff
                                trap_ne
1437 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                       >            load_flag 0
1439 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
143b : 48              >            pha         ;use stack to load status
143c : 28              >            plp
                        
143d : a942                     lda #'B'
143f : a252                     ldx #'R'
1441 : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
1443 : 00                       brk
                            else
                                lda #hi brk_ret ;emulated break
                                pha
                                lda #lo brk_ret
                                pha
                                lda #fao        ;set break & unused on stack
                                pha
                                set_stat intdis
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
1444 : 88                       dey             ;should not be executed
1445 :                  brk_ret                 ;address of break return
1445 : 08                       php             ;either SP or Y count will fail, if we do not hit
1446 : 88                       dey
1447 : 88                       dey
1448 : 88                       dey
1449 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
144b : d0fe            >        bne *           ;failed not equal (non zero)
                        
144d : e053                     cpx #('R'+1)
                                trap_ne
144f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1451 : c045                     cpy #('K'-6)
                                trap_ne
1453 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1455 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
1456 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1458 : d0fe            >        bne *           ;failed not equal (non zero)
                        
145a : ba                       tsx             ;sp?
145b : e0ff                     cpx #$ff
                                trap_ne
145d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
145f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1461 : 48              >            pha         ;use stack to load status
1462 : 28              >            plp
                        
1463 : 18                       clc
                                tst_stat $ff-carry
1464 : 08              >            php         ;save status
1465 : 08              >            php         ;use stack to retrieve status
1466 : 68              >            pla
                       >            cmp_flag $ff-carry
1467 : c9fe            >            cmp #($ff-carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1469 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
146b : 28              >            plp         ;restore status
                        
146c : 38                       sec
                                tst_stat $ff
146d : 08              >            php         ;save status
146e : 08              >            php         ;use stack to retrieve status
146f : 68              >            pla
                       >            cmp_flag $ff
1470 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1472 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1474 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
1475 : 58                       cli
                                tst_stat $ff-intdis
1476 : 08              >            php         ;save status
1477 : 08              >            php         ;use stack to retrieve status
1478 : 68              >            pla
                       >            cmp_flag $ff-intdis
1479 : c9fb            >            cmp #($ff-intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
147b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
147d : 28              >            plp         ;restore status
                        
147e : 78                       sei
                                tst_stat $ff
147f : 08              >            php         ;save status
1480 : 08              >            php         ;use stack to retrieve status
1481 : 68              >            pla
                       >            cmp_flag $ff
1482 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1484 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1486 : 28              >            plp         ;restore status
                        
                            endif
1487 : d8                       cld
                                tst_stat $ff-decmode
1488 : 08              >            php         ;save status
1489 : 08              >            php         ;use stack to retrieve status
148a : 68              >            pla
                       >            cmp_flag $ff-decmode
148b : c9f7            >            cmp #($ff-decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
148d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
148f : 28              >            plp         ;restore status
                        
1490 : f8                       sed
                                tst_stat $ff
1491 : 08              >            php         ;save status
1492 : 08              >            php         ;use stack to retrieve status
1493 : 68              >            pla
                       >            cmp_flag $ff
1494 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1496 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1498 : 28              >            plp         ;restore status
                        
1499 : b8                       clv
                                tst_stat $ff-overfl
149a : 08              >            php         ;save status
149b : 08              >            php         ;use stack to retrieve status
149c : 68              >            pla
                       >            cmp_flag $ff-overfl
149d : c9bf            >            cmp #($ff-overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
149f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14a1 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
14a2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14a4 : 48              >            pha         ;use stack to load status
14a5 : 28              >            plp
                        
                                tst_stat 0
14a6 : 08              >            php         ;save status
14a7 : 08              >            php         ;use stack to retrieve status
14a8 : 68              >            pla
                       >            cmp_flag 0
14a9 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14ad : 28              >            plp         ;restore status
                        
14ae : 38                       sec
                                tst_stat carry
14af : 08              >            php         ;save status
14b0 : 08              >            php         ;use stack to retrieve status
14b1 : 68              >            pla
                       >            cmp_flag carry
14b2 : c931            >            cmp #(carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14b6 : 28              >            plp         ;restore status
                        
14b7 : 18                       clc
                                tst_stat 0  
14b8 : 08              >            php         ;save status
14b9 : 08              >            php         ;use stack to retrieve status
14ba : 68              >            pla
                       >            cmp_flag 0  
14bb : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14bf : 28              >            plp         ;restore status
                        
                            if I_flag = 3
14c0 : 78                       sei
                                tst_stat intdis
14c1 : 08              >            php         ;save status
14c2 : 08              >            php         ;use stack to retrieve status
14c3 : 68              >            pla
                       >            cmp_flag intdis
14c4 : c934            >            cmp #(intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14c8 : 28              >            plp         ;restore status
                        
14c9 : 58                       cli
                                tst_stat 0
14ca : 08              >            php         ;save status
14cb : 08              >            php         ;use stack to retrieve status
14cc : 68              >            pla
                       >            cmp_flag 0
14cd : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14d1 : 28              >            plp         ;restore status
                        
                            endif  
14d2 : f8                       sed
                                tst_stat decmode
14d3 : 08              >            php         ;save status
14d4 : 08              >            php         ;use stack to retrieve status
14d5 : 68              >            pla
                       >            cmp_flag decmode
14d6 : c938            >            cmp #(decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14da : 28              >            plp         ;restore status
                        
14db : d8                       cld
                                tst_stat 0  
14dc : 08              >            php         ;save status
14dd : 08              >            php         ;use stack to retrieve status
14de : 68              >            pla
                       >            cmp_flag 0  
14df : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14e3 : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
14e4 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
14e6 : 48              >            pha         ;use stack to load status
14e7 : 28              >            plp
                        
                                tst_stat overfl
14e8 : 08              >            php         ;save status
14e9 : 08              >            php         ;use stack to retrieve status
14ea : 68              >            pla
                       >            cmp_flag overfl
14eb : c970            >            cmp #(overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14ef : 28              >            plp         ;restore status
                        
14f0 : b8                       clv
                                tst_stat 0
14f1 : 08              >            php         ;save status
14f2 : 08              >            php         ;use stack to retrieve status
14f3 : 68              >            pla
                       >            cmp_flag 0
14f4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14f8 : 28              >            plp         ;restore status
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
14f9 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
14fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14fd : 48              >            pha         ;use stack to load status
14fe : 28              >            plp
                        
14ff : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
1500 : 08              >            php         ;save flags
1501 : 08              >            php
1502 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
1504 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1506 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
1507 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1509 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
150b : 28              >            plp         ;restore status
                        
150c : e8                       inx             ;00
                                tst_x 0,$ff-minus
150d : 08              >            php         ;save flags
150e : 08              >            php
150f : e000            >            cpx #0     ;test result
                       >            trap_ne
1511 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1513 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
1514 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1516 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1518 : 28              >            plp         ;restore status
                        
1519 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
151a : 08              >            php         ;save flags
151b : 08              >            php
151c : e001            >            cpx #1     ;test result
                       >            trap_ne
151e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1520 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus-zero
1521 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1523 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1525 : 28              >            plp         ;restore status
                        
1526 : ca                       dex             ;00
                                tst_x 0,$ff-minus
1527 : 08              >            php         ;save flags
1528 : 08              >            php
1529 : e000            >            cpx #0     ;test result
                       >            trap_ne
152b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
152d : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
152e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1530 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1532 : 28              >            plp         ;restore status
                        
1533 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
1534 : 08              >            php         ;save flags
1535 : 08              >            php
1536 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
1538 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
153a : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
153b : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
153d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
153f : 28              >            plp         ;restore status
                        
1540 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
1541 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1543 : 48              >            pha         ;use stack to load status
1544 : 28              >            plp
                        
1545 : e8                       inx             ;ff
                                tst_x $ff,minus
1546 : 08              >            php         ;save flags
1547 : 08              >            php
1548 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
154a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
154c : 68              >            pla         ;load status
                       >            cmp_flag minus
154d : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
154f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1551 : 28              >            plp         ;restore status
                        
1552 : e8                       inx             ;00
                                tst_x 0,zero
1553 : 08              >            php         ;save flags
1554 : 08              >            php
1555 : e000            >            cpx #0     ;test result
                       >            trap_ne
1557 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1559 : 68              >            pla         ;load status
                       >            cmp_flag zero
155a : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
155c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
155e : 28              >            plp         ;restore status
                        
155f : e8                       inx             ;01
                                tst_x 1,0
1560 : 08              >            php         ;save flags
1561 : 08              >            php
1562 : e001            >            cpx #1     ;test result
                       >            trap_ne
1564 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1566 : 68              >            pla         ;load status
                       >            cmp_flag 0
1567 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1569 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
156b : 28              >            plp         ;restore status
                        
156c : ca                       dex             ;00
                                tst_x 0,zero
156d : 08              >            php         ;save flags
156e : 08              >            php
156f : e000            >            cpx #0     ;test result
                       >            trap_ne
1571 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1573 : 68              >            pla         ;load status
                       >            cmp_flag zero
1574 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1576 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1578 : 28              >            plp         ;restore status
                        
1579 : ca                       dex             ;ff
                                tst_x $ff,minus
157a : 08              >            php         ;save flags
157b : 08              >            php
157c : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
157e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1580 : 68              >            pla         ;load status
                       >            cmp_flag minus
1581 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1583 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1585 : 28              >            plp         ;restore status
                        
                        
1586 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
1588 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
158a : 48              >            pha         ;use stack to load status
158b : 28              >            plp
                        
158c : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
158d : 08              >            php         ;save flags
158e : 08              >            php
158f : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
1591 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1593 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
1594 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1596 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1598 : 28              >            plp         ;restore status
                        
1599 : c8                       iny             ;00
                                tst_y 0,$ff-minus
159a : 08              >            php         ;save flags
159b : 08              >            php
159c : c000            >            cpy #0     ;test result
                       >            trap_ne
159e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15a0 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
15a1 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15a5 : 28              >            plp         ;restore status
                        
15a6 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
15a7 : 08              >            php         ;save flags
15a8 : 08              >            php
15a9 : c001            >            cpy #1     ;test result
                       >            trap_ne
15ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15ad : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus-zero
15ae : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15b2 : 28              >            plp         ;restore status
                        
15b3 : 88                       dey             ;00
                                tst_y 0,$ff-minus
15b4 : 08              >            php         ;save flags
15b5 : 08              >            php
15b6 : c000            >            cpy #0     ;test result
                       >            trap_ne
15b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15ba : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
15bb : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15bf : 28              >            plp         ;restore status
                        
15c0 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
15c1 : 08              >            php         ;save flags
15c2 : 08              >            php
15c3 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
15c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15c7 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
15c8 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15cc : 28              >            plp         ;restore status
                        
15cd : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
15ce : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15d0 : 48              >            pha         ;use stack to load status
15d1 : 28              >            plp
                        
15d2 : c8                       iny             ;ff
                                tst_y $ff,0+minus
15d3 : 08              >            php         ;save flags
15d4 : 08              >            php
15d5 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
15d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15d9 : 68              >            pla         ;load status
                       >            cmp_flag 0+minus
15da : c9b0            >            cmp #(0+minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15de : 28              >            plp         ;restore status
                        
15df : c8                       iny             ;00
                                tst_y 0,zero
15e0 : 08              >            php         ;save flags
15e1 : 08              >            php
15e2 : c000            >            cpy #0     ;test result
                       >            trap_ne
15e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15e6 : 68              >            pla         ;load status
                       >            cmp_flag zero
15e7 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15eb : 28              >            plp         ;restore status
                        
15ec : c8                       iny             ;01
                                tst_y 1,0
15ed : 08              >            php         ;save flags
15ee : 08              >            php
15ef : c001            >            cpy #1     ;test result
                       >            trap_ne
15f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15f3 : 68              >            pla         ;load status
                       >            cmp_flag 0
15f4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15f8 : 28              >            plp         ;restore status
                        
15f9 : 88                       dey             ;00
                                tst_y 0,zero
15fa : 08              >            php         ;save flags
15fb : 08              >            php
15fc : c000            >            cpy #0     ;test result
                       >            trap_ne
15fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1600 : 68              >            pla         ;load status
                       >            cmp_flag zero
1601 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1603 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1605 : 28              >            plp         ;restore status
                        
1606 : 88                       dey             ;ff
                                tst_y $ff,minus
1607 : 08              >            php         ;save flags
1608 : 08              >            php
1609 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
160b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
160d : 68              >            pla         ;load status
                       >            cmp_flag minus
160e : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1610 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1612 : 28              >            plp         ;restore status
                        
                                        
1613 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
1615 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1617 : 48              >            pha         ;use stack to load status
1618 : 28              >            plp
                        
1619 : 8a                       txa
                                tst_a $ff,$ff-zero
161a : 08              >            php         ;save flags
161b : 08              >            php
161c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
161e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1620 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
1621 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1623 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1625 : 28              >            plp         ;restore status
                        
1626 : 08                       php
1627 : e8                       inx             ;00
1628 : 28                       plp
1629 : 8a                       txa
                                tst_a 0,$ff-minus
162a : 08              >            php         ;save flags
162b : 08              >            php
162c : c900            >            cmp #0     ;test result
                       >            trap_ne
162e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1630 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
1631 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1633 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1635 : 28              >            plp         ;restore status
                        
1636 : 08                       php
1637 : e8                       inx             ;01
1638 : 28                       plp
1639 : 8a                       txa
                                tst_a 1,$ff-minus-zero
163a : 08              >            php         ;save flags
163b : 08              >            php
163c : c901            >            cmp #1     ;test result
                       >            trap_ne
163e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1640 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus-zero
1641 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1643 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1645 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
1646 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1648 : 48              >            pha         ;use stack to load status
1649 : 28              >            plp
                        
164a : 8a                       txa
                                tst_a 1,0
164b : 08              >            php         ;save flags
164c : 08              >            php
164d : c901            >            cmp #1     ;test result
                       >            trap_ne
164f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1651 : 68              >            pla         ;load status
                       >            cmp_flag 0
1652 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1654 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1656 : 28              >            plp         ;restore status
                        
1657 : 08                       php
1658 : ca                       dex             ;00
1659 : 28                       plp
165a : 8a                       txa
                                tst_a 0,zero
165b : 08              >            php         ;save flags
165c : 08              >            php
165d : c900            >            cmp #0     ;test result
                       >            trap_ne
165f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1661 : 68              >            pla         ;load status
                       >            cmp_flag zero
1662 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1664 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1666 : 28              >            plp         ;restore status
                        
1667 : 08                       php
1668 : ca                       dex             ;ff
1669 : 28                       plp
166a : 8a                       txa
                                tst_a $ff,minus
166b : 08              >            php         ;save flags
166c : 08              >            php
166d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
166f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1671 : 68              >            pla         ;load status
                       >            cmp_flag minus
1672 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1674 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1676 : 28              >            plp         ;restore status
                        
                                                
1677 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
1679 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
167b : 48              >            pha         ;use stack to load status
167c : 28              >            plp
                        
167d : 98                       tya
                                tst_a $ff,$ff-zero
167e : 08              >            php         ;save flags
167f : 08              >            php
1680 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1682 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1684 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
1685 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1687 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1689 : 28              >            plp         ;restore status
                        
168a : 08                       php
168b : c8                       iny             ;00
168c : 28                       plp
168d : 98                       tya
                                tst_a 0,$ff-minus
168e : 08              >            php         ;save flags
168f : 08              >            php
1690 : c900            >            cmp #0     ;test result
                       >            trap_ne
1692 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1694 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
1695 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1697 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1699 : 28              >            plp         ;restore status
                        
169a : 08                       php
169b : c8                       iny             ;01
169c : 28                       plp
169d : 98                       tya
                                tst_a 1,$ff-minus-zero
169e : 08              >            php         ;save flags
169f : 08              >            php
16a0 : c901            >            cmp #1     ;test result
                       >            trap_ne
16a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16a4 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus-zero
16a5 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16a9 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
16aa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
16ac : 48              >            pha         ;use stack to load status
16ad : 28              >            plp
                        
16ae : 98                       tya
                                tst_a 1,0
16af : 08              >            php         ;save flags
16b0 : 08              >            php
16b1 : c901            >            cmp #1     ;test result
                       >            trap_ne
16b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16b5 : 68              >            pla         ;load status
                       >            cmp_flag 0
16b6 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16ba : 28              >            plp         ;restore status
                        
16bb : 08                       php
16bc : 88                       dey             ;00
16bd : 28                       plp
16be : 98                       tya
                                tst_a 0,zero
16bf : 08              >            php         ;save flags
16c0 : 08              >            php
16c1 : c900            >            cmp #0     ;test result
                       >            trap_ne
16c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16c5 : 68              >            pla         ;load status
                       >            cmp_flag zero
16c6 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16ca : 28              >            plp         ;restore status
                        
16cb : 08                       php
16cc : 88                       dey             ;ff
16cd : 28                       plp
16ce : 98                       tya
                                tst_a $ff,minus
16cf : 08              >            php         ;save flags
16d0 : 08              >            php
16d1 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
16d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16d5 : 68              >            pla         ;load status
                       >            cmp_flag minus
16d6 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16da : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
16db : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
16dd : 48                       pha
16de : a2ff                     ldx #$ff        ;ff
16e0 : 8a                       txa
16e1 : 28                       plp             
16e2 : a8                       tay
                                tst_y $ff,$ff-zero
16e3 : 08              >            php         ;save flags
16e4 : 08              >            php
16e5 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
16e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16e9 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
16ea : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16ee : 28              >            plp         ;restore status
                        
16ef : 08                       php
16f0 : e8                       inx             ;00
16f1 : 8a                       txa
16f2 : 28                       plp
16f3 : a8                       tay
                                tst_y 0,$ff-minus
16f4 : 08              >            php         ;save flags
16f5 : 08              >            php
16f6 : c000            >            cpy #0     ;test result
                       >            trap_ne
16f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16fa : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
16fb : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16ff : 28              >            plp         ;restore status
                        
1700 : 08                       php
1701 : e8                       inx             ;01
1702 : 8a                       txa
1703 : 28                       plp
1704 : a8                       tay
                                tst_y 1,$ff-minus-zero
1705 : 08              >            php         ;save flags
1706 : 08              >            php
1707 : c001            >            cpy #1     ;test result
                       >            trap_ne
1709 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
170b : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus-zero
170c : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
170e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1710 : 28              >            plp         ;restore status
                        
                                load_flag 0
1711 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
1713 : 48                       pha
1714 : a900                     lda #0
1716 : 8a                       txa
1717 : 28                       plp
1718 : a8                       tay
                                tst_y 1,0
1719 : 08              >            php         ;save flags
171a : 08              >            php
171b : c001            >            cpy #1     ;test result
                       >            trap_ne
171d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
171f : 68              >            pla         ;load status
                       >            cmp_flag 0
1720 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1722 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1724 : 28              >            plp         ;restore status
                        
1725 : 08                       php
1726 : ca                       dex             ;00
1727 : 8a                       txa
1728 : 28                       plp
1729 : a8                       tay
                                tst_y 0,zero
172a : 08              >            php         ;save flags
172b : 08              >            php
172c : c000            >            cpy #0     ;test result
                       >            trap_ne
172e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1730 : 68              >            pla         ;load status
                       >            cmp_flag zero
1731 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1733 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1735 : 28              >            plp         ;restore status
                        
1736 : 08                       php
1737 : ca                       dex             ;ff
1738 : 8a                       txa
1739 : 28                       plp
173a : a8                       tay
                                tst_y $ff,minus
173b : 08              >            php         ;save flags
173c : 08              >            php
173d : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
173f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1741 : 68              >            pla         ;load status
                       >            cmp_flag minus
1742 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1744 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1746 : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
1747 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
1749 : 48                       pha
174a : a0ff                     ldy #$ff        ;ff
174c : 98                       tya
174d : 28                       plp
174e : aa                       tax
                                tst_x $ff,$ff-zero
174f : 08              >            php         ;save flags
1750 : 08              >            php
1751 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
1753 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1755 : 68              >            pla         ;load status
                       >            cmp_flag $ff-zero
1756 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1758 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
175a : 28              >            plp         ;restore status
                        
175b : 08                       php
175c : c8                       iny             ;00
175d : 98                       tya
175e : 28                       plp
175f : aa                       tax
                                tst_x 0,$ff-minus
1760 : 08              >            php         ;save flags
1761 : 08              >            php
1762 : e000            >            cpx #0     ;test result
                       >            trap_ne
1764 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1766 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus
1767 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1769 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
176b : 28              >            plp         ;restore status
                        
176c : 08                       php
176d : c8                       iny             ;01
176e : 98                       tya
176f : 28                       plp
1770 : aa                       tax
                                tst_x 1,$ff-minus-zero
1771 : 08              >            php         ;save flags
1772 : 08              >            php
1773 : e001            >            cpx #1     ;test result
                       >            trap_ne
1775 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1777 : 68              >            pla         ;load status
                       >            cmp_flag $ff-minus-zero
1778 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
177a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
177c : 28              >            plp         ;restore status
                        
                                load_flag 0
177d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
177f : 48                       pha
1780 : a900                     lda #0          ;preset status
1782 : 98                       tya
1783 : 28                       plp
1784 : aa                       tax
                                tst_x 1,0
1785 : 08              >            php         ;save flags
1786 : 08              >            php
1787 : e001            >            cpx #1     ;test result
                       >            trap_ne
1789 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
178b : 68              >            pla         ;load status
                       >            cmp_flag 0
178c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
178e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1790 : 28              >            plp         ;restore status
                        
1791 : 08                       php
1792 : 88                       dey             ;00
1793 : 98                       tya
1794 : 28                       plp
1795 : aa                       tax
                                tst_x 0,zero
1796 : 08              >            php         ;save flags
1797 : 08              >            php
1798 : e000            >            cpx #0     ;test result
                       >            trap_ne
179a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
179c : 68              >            pla         ;load status
                       >            cmp_flag zero
179d : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
179f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17a1 : 28              >            plp         ;restore status
                        
17a2 : 08                       php
17a3 : 88                       dey             ;ff
17a4 : 98                       tya
17a5 : 28                       plp
17a6 : aa                       tax
                                tst_x $ff,minus
17a7 : 08              >            php         ;save flags
17a8 : 08              >            php
17a9 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
17ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17ad : 68              >            pla         ;load status
                       >            cmp_flag minus
17ae : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
17b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17b2 : 28              >            plp         ;restore status
                        
                             
                        ;TSX sets NZ - TXS does not
17b3 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
17b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17b7 : 48              >            pha         ;use stack to load status
17b8 : 28              >            plp
                        
17b9 : 9a                       txs
17ba : 08                       php
17bb : ad0101                   lda $101
                                cmp_flag $ff
17be : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
17c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
17c2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17c4 : 48              >            pha         ;use stack to load status
17c5 : 28              >            plp
                        
17c6 : 9a                       txs
17c7 : 08                       php
17c8 : ad0101                   lda $101
                                cmp_flag 0
17cb : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
17cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
17cf : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
17d0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17d2 : 48              >            pha         ;use stack to load status
17d3 : 28              >            plp
                        
17d4 : 9a                       txs
17d5 : 08                       php
17d6 : ad0001                   lda $100
                                cmp_flag $ff
17d9 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
17db : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
17dd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17df : 48              >            pha         ;use stack to load status
17e0 : 28              >            plp
                        
17e1 : 9a                       txs
17e2 : 08                       php
17e3 : ad0001                   lda $100
                                cmp_flag 0
17e6 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
17e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17ea : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
17eb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17ed : 48              >            pha         ;use stack to load status
17ee : 28              >            plp
                        
17ef : 9a                       txs
17f0 : 08                       php
17f1 : adff01                   lda $1ff
                                cmp_flag $ff
17f4 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
17f6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
17f8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17fa : 48              >            pha         ;use stack to load status
17fb : 28              >            plp
                        
17fc : 9a                       txs
17fd : 08                       php
17fe : adff01                   lda $1ff
                                cmp_flag 0
1801 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                
1803 : a201                     ldx #1
1805 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
1806 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1808 : 48              >            pha         ;use stack to load status
1809 : 28              >            plp
                        
180a : ba                       tsx             ;clears Z, N
180b : 08                       php             ;sp=00
180c : e001                     cpx #1
                                trap_ne
180e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1810 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
1813 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1815 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1817 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1819 : 48              >            pha         ;use stack to load status
181a : 28              >            plp
                        
181b : ba                       tsx             ;clears N, sets Z
181c : 08                       php             ;sp=ff
181d : e000                     cpx #0
                                trap_ne
181f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1821 : ad0001                   lda $100
                                cmp_flag $ff-minus
1824 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1826 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1828 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
182a : 48              >            pha         ;use stack to load status
182b : 28              >            plp
                        
182c : ba                       tsx             ;clears N, sets Z
182d : 08                       php             ;sp=fe
182e : e0ff                     cpx #$ff
                                trap_ne
1830 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1832 : adff01                   lda $1ff
                                cmp_flag $ff-zero
1835 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1837 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
1839 : a201                     ldx #1
183b : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
183c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
183e : 48              >            pha         ;use stack to load status
183f : 28              >            plp
                        
1840 : ba                       tsx             ;clears Z, N
1841 : 08                       php             ;sp=00
1842 : e001                     cpx #1
                                trap_ne
1844 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1846 : ad0101                   lda $101
                                cmp_flag 0
1849 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
184b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
184d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
184f : 48              >            pha         ;use stack to load status
1850 : 28              >            plp
                        
1851 : ba                       tsx             ;clears N, sets Z
1852 : 08                       php             ;sp=ff
1853 : e000                     cpx #0
                                trap_ne
1855 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1857 : ad0001                   lda $100
                                cmp_flag zero
185a : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
185c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
185e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1860 : 48              >            pha         ;use stack to load status
1861 : 28              >            plp
                        
1862 : ba                       tsx             ;clears N, sets Z
1863 : 08                       php             ;sp=fe
1864 : e0ff                     cpx #$ff
                                trap_ne
1866 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1868 : adff01                   lda $1ff
                                cmp_flag minus
186b : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
186d : d0fe            >        bne *           ;failed not equal (non zero)
                        
186f : 68                       pla             ;sp=ff
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
1870 : a003                     ldy #3
1872 :                  tldx    
                                set_stat 0
                       >            load_flag 0
1872 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1874 : 48              >            pha         ;use stack to load status
1875 : 28              >            plp
                        
1876 : b60a                     ldx zp1,y
1878 : 08                       php         ;test stores do not alter flags
1879 : 8a                       txa
187a : 49c3                     eor #$c3
187c : 28                       plp
187d : 993302                   sta abst,y
1880 : 08                       php         ;flags after load/store sequence
1881 : 49c3                     eor #$c3
1883 : d90002                   cmp abs1,y  ;test result
                                trap_ne
1886 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1888 : 68                       pla         ;load status
                                eor_flag 0
1889 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
188b : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
188e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1890 : 88                       dey
1891 : 10df                     bpl tldx                  
                        
1893 : a003                     ldy #3
1895 :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
1895 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1897 : 48              >            pha         ;use stack to load status
1898 : 28              >            plp
                        
1899 : b60a                     ldx zp1,y
189b : 08                       php         ;test stores do not alter flags
189c : 8a                       txa
189d : 49c3                     eor #$c3
189f : 28                       plp
18a0 : 993302                   sta abst,y
18a3 : 08                       php         ;flags after load/store sequence
18a4 : 49c3                     eor #$c3
18a6 : d90002                   cmp abs1,y  ;test result
                                trap_ne
18a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18ab : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
18ac : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
18ae : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
18b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18b3 : 88                       dey
18b4 : 10df                     bpl tldx1                  
                        
18b6 : a003                     ldy #3
18b8 :                  tldx2   
                                set_stat 0
                       >            load_flag 0
18b8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18ba : 48              >            pha         ;use stack to load status
18bb : 28              >            plp
                        
18bc : be0002                   ldx abs1,y
18bf : 08                       php         ;test stores do not alter flags
18c0 : 8a                       txa
18c1 : 49c3                     eor #$c3
18c3 : aa                       tax
18c4 : 28                       plp
18c5 : 960f                     stx zpt,y
18c7 : 08                       php         ;flags after load/store sequence
18c8 : 49c3                     eor #$c3
18ca : d90a00                   cmp zp1,y   ;test result
                                trap_ne
18cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
18cf : 68                       pla         ;load status
                                eor_flag 0
18d0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
18d2 : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
18d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18d7 : 88                       dey
18d8 : 10de                     bpl tldx2                  
                        
18da : a003                     ldy #3
18dc :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
18dc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18de : 48              >            pha         ;use stack to load status
18df : 28              >            plp
                        
18e0 : be0002                   ldx abs1,y
18e3 : 08                       php         ;test stores do not alter flags
18e4 : 8a                       txa
18e5 : 49c3                     eor #$c3
18e7 : aa                       tax
18e8 : 28                       plp
18e9 : 960f                     stx zpt,y
18eb : 08                       php         ;flags after load/store sequence
18ec : 49c3                     eor #$c3
18ee : d90a00                   cmp zp1,y   ;test result
                                trap_ne
18f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18f3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
18f4 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
18f6 : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
18f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18fb : 88                       dey
18fc : 10de                     bpl tldx3
                                
18fe : a003                     ldy #3      ;testing store result
1900 : a200                     ldx #0
1902 : b90f00           tstx    lda zpt,y
1905 : 49c3                     eor #$c3
1907 : d90a00                   cmp zp1,y
                                trap_ne     ;store to zp data
190a : d0fe            >        bne *           ;failed not equal (non zero)
                        
190c : 960f                     stx zpt,y   ;clear                
190e : b93302                   lda abst,y
1911 : 49c3                     eor #$c3
1913 : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
1916 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1918 : 8a                       txa
1919 : 993302                   sta abst,y  ;clear                
191c : 88                       dey
191d : 10e3                     bpl tstx
                                
                        ; indexed wraparound test (only zp should wrap)
191f : a0fd                     ldy #3+$fa
1921 : b610             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
1923 : 8a                       txa
1924 : 993901                   sta abst-$fa,y      ;no STX abs,y!
1927 : 88                       dey
1928 : c0fa                     cpy #$fa
192a : b0f5                     bcs tldx4                  
192c : a0fd                     ldy #3+$fa
192e : be0601           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
1931 : 9615                     stx zpt-$fa&$ff,y
1933 : 88                       dey
1934 : c0fa                     cpy #$fa
1936 : b0f6                     bcs tldx5                  
1938 : a003                     ldy #3      ;testing wraparound result
193a : a200                     ldx #0
193c : b90f00           tstx1   lda zpt,y
193f : d90a00                   cmp zp1,y
                                trap_ne     ;store to zp data
1942 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1944 : 960f                     stx zpt,y   ;clear                
1946 : b93302                   lda abst,y
1949 : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
194c : d0fe            >        bne *           ;failed not equal (non zero)
                        
194e : 8a                       txa
194f : 993302                   sta abst,y  ;clear                
1952 : 88                       dey
1953 : 10e7                     bpl tstx1
                                
                        ; LDY / STY - zp,x / abs,x
1955 : a203                     ldx #3
1957 :                  tldy    
                                set_stat 0
                       >            load_flag 0
1957 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1959 : 48              >            pha         ;use stack to load status
195a : 28              >            plp
                        
195b : b40a                     ldy zp1,x
195d : 08                       php         ;test stores do not alter flags
195e : 98                       tya
195f : 49c3                     eor #$c3
1961 : 28                       plp
1962 : 9d3302                   sta abst,x
1965 : 08                       php         ;flags after load/store sequence
1966 : 49c3                     eor #$c3
1968 : dd0002                   cmp abs1,x  ;test result
                                trap_ne
196b : d0fe            >        bne *           ;failed not equal (non zero)
                        
196d : 68                       pla         ;load status
                                eor_flag 0
196e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1970 : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
1973 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1975 : ca                       dex
1976 : 10df                     bpl tldy                  
                        
1978 : a203                     ldx #3
197a :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
197a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
197c : 48              >            pha         ;use stack to load status
197d : 28              >            plp
                        
197e : b40a                     ldy zp1,x
1980 : 08                       php         ;test stores do not alter flags
1981 : 98                       tya
1982 : 49c3                     eor #$c3
1984 : 28                       plp
1985 : 9d3302                   sta abst,x
1988 : 08                       php         ;flags after load/store sequence
1989 : 49c3                     eor #$c3
198b : dd0002                   cmp abs1,x  ;test result
                                trap_ne
198e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1990 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1991 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1993 : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
1996 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1998 : ca                       dex
1999 : 10df                     bpl tldy1                  
                        
199b : a203                     ldx #3
199d :                  tldy2   
                                set_stat 0
                       >            load_flag 0
199d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
199f : 48              >            pha         ;use stack to load status
19a0 : 28              >            plp
                        
19a1 : bc0002                   ldy abs1,x
19a4 : 08                       php         ;test stores do not alter flags
19a5 : 98                       tya
19a6 : 49c3                     eor #$c3
19a8 : a8                       tay
19a9 : 28                       plp
19aa : 940f                     sty zpt,x
19ac : 08                       php         ;flags after load/store sequence
19ad : 49c3                     eor #$c3
19af : d50a                     cmp zp1,x   ;test result
                                trap_ne
19b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19b3 : 68                       pla         ;load status
                                eor_flag 0
19b4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
19b6 : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
19b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19bb : ca                       dex
19bc : 10df                     bpl tldy2                  
                        
19be : a203                     ldx #3
19c0 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
19c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
19c2 : 48              >            pha         ;use stack to load status
19c3 : 28              >            plp
                        
19c4 : bc0002                   ldy abs1,x
19c7 : 08                       php         ;test stores do not alter flags
19c8 : 98                       tya
19c9 : 49c3                     eor #$c3
19cb : a8                       tay
19cc : 28                       plp
19cd : 940f                     sty zpt,x
19cf : 08                       php         ;flags after load/store sequence
19d0 : 49c3                     eor #$c3
19d2 : d50a                     cmp zp1,x   ;test result
                                trap_ne
19d4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19d6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
19d7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
19d9 : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
19dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
19de : ca                       dex
19df : 10df                     bpl tldy3
                        
19e1 : a203                     ldx #3      ;testing store result
19e3 : a000                     ldy #0
19e5 : b50f             tsty    lda zpt,x
19e7 : 49c3                     eor #$c3
19e9 : d50a                     cmp zp1,x
                                trap_ne     ;store to zp,x data
19eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
19ed : 940f                     sty zpt,x   ;clear                
19ef : bd3302                   lda abst,x
19f2 : 49c3                     eor #$c3
19f4 : dd0002                   cmp abs1,x
                                trap_ne     ;store to abs,x data
19f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19f9 : 8a                       txa
19fa : 9d3302                   sta abst,x  ;clear                
19fd : ca                       dex
19fe : 10e5                     bpl tsty
                        
                        ; indexed wraparound test (only zp should wrap)
1a00 : a2fd                     ldx #3+$fa
1a02 : b410             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
1a04 : 98                       tya
1a05 : 9d3901                   sta abst-$fa,x      ;no STX abs,x!
1a08 : ca                       dex
1a09 : e0fa                     cpx #$fa
1a0b : b0f5                     bcs tldy4                  
1a0d : a2fd                     ldx #3+$fa
1a0f : bc0601           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
1a12 : 9415                     sty zpt-$fa&$ff,x
1a14 : ca                       dex
1a15 : e0fa                     cpx #$fa
1a17 : b0f6                     bcs tldy5                  
1a19 : a203                     ldx #3      ;testing wraparound result
1a1b : a000                     ldy #0
1a1d : b50f             tsty1   lda zpt,x
1a1f : d50a                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1a21 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a23 : 940f                     sty zpt,x   ;clear                
1a25 : bd3302                   lda abst,x
1a28 : dd0002                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1a2b : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a2d : 8a                       txa
1a2e : 9d3302                   sta abst,x  ;clear                
1a31 : ca                       dex
1a32 : 10e9                     bpl tsty1
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
1a34 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1a36 : 48              >            pha         ;use stack to load status
1a37 : 28              >            plp
                        
1a38 : a60a                     ldx zp1
1a3a : 08                       php         ;test stores do not alter flags
1a3b : 8a                       txa
1a3c : 49c3                     eor #$c3
1a3e : aa                       tax
1a3f : 28                       plp
1a40 : 8e3302                   stx abst
1a43 : 08                       php         ;flags after load/store sequence
1a44 : 49c3                     eor #$c3
1a46 : aa                       tax
1a47 : e0c3                     cpx #$c3    ;test result
                                trap_ne
1a49 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a4b : 68                       pla         ;load status
                                eor_flag 0
1a4c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1a4e : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1a51 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a53 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a55 : 48              >            pha         ;use stack to load status
1a56 : 28              >            plp
                        
1a57 : a60b                     ldx zp1+1
1a59 : 08                       php         ;test stores do not alter flags
1a5a : 8a                       txa
1a5b : 49c3                     eor #$c3
1a5d : aa                       tax
1a5e : 28                       plp
1a5f : 8e3402                   stx abst+1
1a62 : 08                       php         ;flags after load/store sequence
1a63 : 49c3                     eor #$c3
1a65 : aa                       tax
1a66 : e082                     cpx #$82    ;test result
                                trap_ne
1a68 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a6a : 68                       pla         ;load status
                                eor_flag 0
1a6b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1a6d : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1a70 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a72 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a74 : 48              >            pha         ;use stack to load status
1a75 : 28              >            plp
                        
1a76 : a60c                     ldx zp1+2
1a78 : 08                       php         ;test stores do not alter flags
1a79 : 8a                       txa
1a7a : 49c3                     eor #$c3
1a7c : aa                       tax
1a7d : 28                       plp
1a7e : 8e3502                   stx abst+2
1a81 : 08                       php         ;flags after load/store sequence
1a82 : 49c3                     eor #$c3
1a84 : aa                       tax
1a85 : e041                     cpx #$41    ;test result
                                trap_ne
1a87 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a89 : 68                       pla         ;load status
                                eor_flag 0
1a8a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1a8c : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1a8f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a91 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a93 : 48              >            pha         ;use stack to load status
1a94 : 28              >            plp
                        
1a95 : a60d                     ldx zp1+3
1a97 : 08                       php         ;test stores do not alter flags
1a98 : 8a                       txa
1a99 : 49c3                     eor #$c3
1a9b : aa                       tax
1a9c : 28                       plp
1a9d : 8e3602                   stx abst+3
1aa0 : 08                       php         ;flags after load/store sequence
1aa1 : 49c3                     eor #$c3
1aa3 : aa                       tax
1aa4 : e000                     cpx #0      ;test result
                                trap_ne
1aa6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1aa8 : 68                       pla         ;load status
                                eor_flag 0
1aa9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1aab : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1aae : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1ab0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ab2 : 48              >            pha         ;use stack to load status
1ab3 : 28              >            plp
                        
1ab4 : a60a                     ldx zp1  
1ab6 : 08                       php         ;test stores do not alter flags
1ab7 : 8a                       txa
1ab8 : 49c3                     eor #$c3
1aba : aa                       tax
1abb : 28                       plp
1abc : 8e3302                   stx abst  
1abf : 08                       php         ;flags after load/store sequence
1ac0 : 49c3                     eor #$c3
1ac2 : aa                       tax
1ac3 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
1ac5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ac7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ac8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1aca : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1acd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1acf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ad1 : 48              >            pha         ;use stack to load status
1ad2 : 28              >            plp
                        
1ad3 : a60b                     ldx zp1+1
1ad5 : 08                       php         ;test stores do not alter flags
1ad6 : 8a                       txa
1ad7 : 49c3                     eor #$c3
1ad9 : aa                       tax
1ada : 28                       plp
1adb : 8e3402                   stx abst+1
1ade : 08                       php         ;flags after load/store sequence
1adf : 49c3                     eor #$c3
1ae1 : aa                       tax
1ae2 : e082                     cpx #$82    ;test result
                                trap_ne
1ae4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ae6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ae7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1ae9 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1aec : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1aee : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1af0 : 48              >            pha         ;use stack to load status
1af1 : 28              >            plp
                        
1af2 : a60c                     ldx zp1+2
1af4 : 08                       php         ;test stores do not alter flags
1af5 : 8a                       txa
1af6 : 49c3                     eor #$c3
1af8 : aa                       tax
1af9 : 28                       plp
1afa : 8e3502                   stx abst+2
1afd : 08                       php         ;flags after load/store sequence
1afe : 49c3                     eor #$c3
1b00 : aa                       tax
1b01 : e041                     cpx #$41    ;test result
                                trap_ne     ;
1b03 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b05 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b06 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1b08 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1b0b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b0d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b0f : 48              >            pha         ;use stack to load status
1b10 : 28              >            plp
                        
1b11 : a60d                     ldx zp1+3
1b13 : 08                       php         ;test stores do not alter flags
1b14 : 8a                       txa
1b15 : 49c3                     eor #$c3
1b17 : aa                       tax
1b18 : 28                       plp
1b19 : 8e3602                   stx abst+3
1b1c : 08                       php         ;flags after load/store sequence
1b1d : 49c3                     eor #$c3
1b1f : aa                       tax
1b20 : e000                     cpx #0      ;test result
                                trap_ne
1b22 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b24 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b25 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1b27 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1b2a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
1b2c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b2e : 48              >            pha         ;use stack to load status
1b2f : 28              >            plp
                        
1b30 : ae0002                   ldx abs1  
1b33 : 08                       php         ;test stores do not alter flags
1b34 : 8a                       txa
1b35 : 49c3                     eor #$c3
1b37 : aa                       tax
1b38 : 28                       plp
1b39 : 860f                     stx zpt  
1b3b : 08                       php         ;flags after load/store sequence
1b3c : 49c3                     eor #$c3
1b3e : c50a                     cmp zp1     ;test result
                                trap_ne
1b40 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b42 : 68                       pla         ;load status
                                eor_flag 0
1b43 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1b45 : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1b48 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b4a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b4c : 48              >            pha         ;use stack to load status
1b4d : 28              >            plp
                        
1b4e : ae0102                   ldx abs1+1
1b51 : 08                       php         ;test stores do not alter flags
1b52 : 8a                       txa
1b53 : 49c3                     eor #$c3
1b55 : aa                       tax
1b56 : 28                       plp
1b57 : 8610                     stx zpt+1
1b59 : 08                       php         ;flags after load/store sequence
1b5a : 49c3                     eor #$c3
1b5c : c50b                     cmp zp1+1   ;test result
                                trap_ne
1b5e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b60 : 68                       pla         ;load status
                                eor_flag 0
1b61 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1b63 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1b66 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b68 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b6a : 48              >            pha         ;use stack to load status
1b6b : 28              >            plp
                        
1b6c : ae0202                   ldx abs1+2
1b6f : 08                       php         ;test stores do not alter flags
1b70 : 8a                       txa
1b71 : 49c3                     eor #$c3
1b73 : aa                       tax
1b74 : 28                       plp
1b75 : 8611                     stx zpt+2
1b77 : 08                       php         ;flags after load/store sequence
1b78 : 49c3                     eor #$c3
1b7a : c50c                     cmp zp1+2   ;test result
                                trap_ne
1b7c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b7e : 68                       pla         ;load status
                                eor_flag 0
1b7f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1b81 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1b84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b86 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b88 : 48              >            pha         ;use stack to load status
1b89 : 28              >            plp
                        
1b8a : ae0302                   ldx abs1+3
1b8d : 08                       php         ;test stores do not alter flags
1b8e : 8a                       txa
1b8f : 49c3                     eor #$c3
1b91 : aa                       tax
1b92 : 28                       plp
1b93 : 8612                     stx zpt+3
1b95 : 08                       php         ;flags after load/store sequence
1b96 : 49c3                     eor #$c3
1b98 : c50d                     cmp zp1+3   ;test result
                                trap_ne
1b9a : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b9c : 68                       pla         ;load status
                                eor_flag 0
1b9d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1b9f : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1ba2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1ba4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ba6 : 48              >            pha         ;use stack to load status
1ba7 : 28              >            plp
                        
1ba8 : ae0002                   ldx abs1  
1bab : 08                       php         ;test stores do not alter flags
1bac : 8a                       txa
1bad : 49c3                     eor #$c3
1baf : aa                       tax
1bb0 : 28                       plp
1bb1 : 860f                     stx zpt  
1bb3 : 08                       php         ;flags after load/store sequence
1bb4 : 49c3                     eor #$c3
1bb6 : aa                       tax
1bb7 : e40a                     cpx zp1     ;test result
                                trap_ne
1bb9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bbb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bbc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1bbe : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1bc1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1bc3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1bc5 : 48              >            pha         ;use stack to load status
1bc6 : 28              >            plp
                        
1bc7 : ae0102                   ldx abs1+1
1bca : 08                       php         ;test stores do not alter flags
1bcb : 8a                       txa
1bcc : 49c3                     eor #$c3
1bce : aa                       tax
1bcf : 28                       plp
1bd0 : 8610                     stx zpt+1
1bd2 : 08                       php         ;flags after load/store sequence
1bd3 : 49c3                     eor #$c3
1bd5 : aa                       tax
1bd6 : e40b                     cpx zp1+1   ;test result
                                trap_ne
1bd8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bda : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bdb : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1bdd : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1be0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1be2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1be4 : 48              >            pha         ;use stack to load status
1be5 : 28              >            plp
                        
1be6 : ae0202                   ldx abs1+2
1be9 : 08                       php         ;test stores do not alter flags
1bea : 8a                       txa
1beb : 49c3                     eor #$c3
1bed : aa                       tax
1bee : 28                       plp
1bef : 8611                     stx zpt+2
1bf1 : 08                       php         ;flags after load/store sequence
1bf2 : 49c3                     eor #$c3
1bf4 : aa                       tax
1bf5 : e40c                     cpx zp1+2   ;test result
                                trap_ne
1bf7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bf9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bfa : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1bfc : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1bff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c01 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c03 : 48              >            pha         ;use stack to load status
1c04 : 28              >            plp
                        
1c05 : ae0302                   ldx abs1+3
1c08 : 08                       php         ;test stores do not alter flags
1c09 : 8a                       txa
1c0a : 49c3                     eor #$c3
1c0c : aa                       tax
1c0d : 28                       plp
1c0e : 8612                     stx zpt+3
1c10 : 08                       php         ;flags after load/store sequence
1c11 : 49c3                     eor #$c3
1c13 : aa                       tax
1c14 : e40d                     cpx zp1+3   ;test result
                                trap_ne
1c16 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c18 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c19 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1c1b : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1c1e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0  
                       >            load_flag 0  
1c20 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1c22 : 48              >            pha         ;use stack to load status
1c23 : 28              >            plp
                        
1c24 : a2c3                     ldx #$c3
1c26 : 08                       php
1c27 : ec0002                   cpx abs1    ;test result
                                trap_ne
1c2a : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c2c : 68                       pla         ;load status
                                eor_flag 0
1c2d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1c2f : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1c32 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1c34 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c36 : 48              >            pha         ;use stack to load status
1c37 : 28              >            plp
                        
1c38 : a282                     ldx #$82
1c3a : 08                       php
1c3b : ec0102                   cpx abs1+1  ;test result
                                trap_ne
1c3e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c40 : 68                       pla         ;load status
                                eor_flag 0
1c41 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1c43 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1c46 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1c48 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c4a : 48              >            pha         ;use stack to load status
1c4b : 28              >            plp
                        
1c4c : a241                     ldx #$41
1c4e : 08                       php
1c4f : ec0202                   cpx abs1+2  ;test result
                                trap_ne
1c52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c54 : 68                       pla         ;load status
                                eor_flag 0
1c55 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1c57 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1c5a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1c5c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c5e : 48              >            pha         ;use stack to load status
1c5f : 28              >            plp
                        
1c60 : a200                     ldx #0
1c62 : 08                       php
1c63 : ec0302                   cpx abs1+3  ;test result
                                trap_ne
1c66 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c68 : 68                       pla         ;load status
                                eor_flag 0
1c69 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1c6b : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1c6e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1c70 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c72 : 48              >            pha         ;use stack to load status
1c73 : 28              >            plp
                        
1c74 : a2c3                     ldx #$c3  
1c76 : 08                       php
1c77 : ec0002                   cpx abs1    ;test result
                                trap_ne
1c7a : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c7c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c7d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1c7f : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1c82 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c84 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c86 : 48              >            pha         ;use stack to load status
1c87 : 28              >            plp
                        
1c88 : a282                     ldx #$82
1c8a : 08                       php
1c8b : ec0102                   cpx abs1+1  ;test result
                                trap_ne
1c8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c90 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c91 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1c93 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1c96 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c98 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c9a : 48              >            pha         ;use stack to load status
1c9b : 28              >            plp
                        
1c9c : a241                     ldx #$41
1c9e : 08                       php
1c9f : ec0202                   cpx abs1+2  ;test result
                                trap_ne
1ca2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ca4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ca5 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1ca7 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1caa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1cac : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1cae : 48              >            pha         ;use stack to load status
1caf : 28              >            plp
                        
1cb0 : a200                     ldx #0
1cb2 : 08                       php
1cb3 : ec0302                   cpx abs1+3  ;test result
                                trap_ne
1cb6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cb8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1cb9 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1cbb : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1cbe : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
1cc0 : a200                     ldx #0
1cc2 : a50f                     lda zpt  
1cc4 : 49c3                     eor #$c3
1cc6 : c50a                     cmp zp1  
                                trap_ne     ;store to zp data
1cc8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cca : 860f                     stx zpt     ;clear                
1ccc : ad3302                   lda abst  
1ccf : 49c3                     eor #$c3
1cd1 : cd0002                   cmp abs1  
                                trap_ne     ;store to abs data
1cd4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cd6 : 8e3302                   stx abst    ;clear                
1cd9 : a510                     lda zpt+1
1cdb : 49c3                     eor #$c3
1cdd : c50b                     cmp zp1+1
                                trap_ne     ;store to zp data
1cdf : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ce1 : 8610                     stx zpt+1   ;clear                
1ce3 : ad3402                   lda abst+1
1ce6 : 49c3                     eor #$c3
1ce8 : cd0102                   cmp abs1+1
                                trap_ne     ;store to abs data
1ceb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ced : 8e3402                   stx abst+1  ;clear                
1cf0 : a511                     lda zpt+2
1cf2 : 49c3                     eor #$c3
1cf4 : c50c                     cmp zp1+2
                                trap_ne     ;store to zp data
1cf6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cf8 : 8611                     stx zpt+2   ;clear                
1cfa : ad3502                   lda abst+2
1cfd : 49c3                     eor #$c3
1cff : cd0202                   cmp abs1+2
                                trap_ne     ;store to abs data
1d02 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d04 : 8e3502                   stx abst+2  ;clear                
1d07 : a512                     lda zpt+3
1d09 : 49c3                     eor #$c3
1d0b : c50d                     cmp zp1+3
                                trap_ne     ;store to zp data
1d0d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d0f : 8612                     stx zpt+3   ;clear                
1d11 : ad3602                   lda abst+3
1d14 : 49c3                     eor #$c3
1d16 : cd0302                   cmp abs1+3
                                trap_ne     ;store to abs data
1d19 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d1b : 8e3602                   stx abst+3  ;clear                
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
1d1e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d20 : 48              >            pha         ;use stack to load status
1d21 : 28              >            plp
                        
1d22 : a40a                     ldy zp1  
1d24 : 08                       php         ;test stores do not alter flags
1d25 : 98                       tya
1d26 : 49c3                     eor #$c3
1d28 : a8                       tay
1d29 : 28                       plp
1d2a : 8c3302                   sty abst  
1d2d : 08                       php         ;flags after load/store sequence
1d2e : 49c3                     eor #$c3
1d30 : a8                       tay
1d31 : c0c3                     cpy #$c3    ;test result
                                trap_ne
1d33 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d35 : 68                       pla         ;load status
                                eor_flag 0
1d36 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1d38 : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1d3b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1d3d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d3f : 48              >            pha         ;use stack to load status
1d40 : 28              >            plp
                        
1d41 : a40b                     ldy zp1+1
1d43 : 08                       php         ;test stores do not alter flags
1d44 : 98                       tya
1d45 : 49c3                     eor #$c3
1d47 : a8                       tay
1d48 : 28                       plp
1d49 : 8c3402                   sty abst+1
1d4c : 08                       php         ;flags after load/store sequence
1d4d : 49c3                     eor #$c3
1d4f : a8                       tay
1d50 : c082                     cpy #$82    ;test result
                                trap_ne
1d52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d54 : 68                       pla         ;load status
                                eor_flag 0
1d55 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1d57 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1d5a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1d5c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d5e : 48              >            pha         ;use stack to load status
1d5f : 28              >            plp
                        
1d60 : a40c                     ldy zp1+2
1d62 : 08                       php         ;test stores do not alter flags
1d63 : 98                       tya
1d64 : 49c3                     eor #$c3
1d66 : a8                       tay
1d67 : 28                       plp
1d68 : 8c3502                   sty abst+2
1d6b : 08                       php         ;flags after load/store sequence
1d6c : 49c3                     eor #$c3
1d6e : a8                       tay
1d6f : c041                     cpy #$41    ;test result
                                trap_ne
1d71 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d73 : 68                       pla         ;load status
                                eor_flag 0
1d74 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1d76 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1d79 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1d7b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d7d : 48              >            pha         ;use stack to load status
1d7e : 28              >            plp
                        
1d7f : a40d                     ldy zp1+3
1d81 : 08                       php         ;test stores do not alter flags
1d82 : 98                       tya
1d83 : 49c3                     eor #$c3
1d85 : a8                       tay
1d86 : 28                       plp
1d87 : 8c3602                   sty abst+3
1d8a : 08                       php         ;flags after load/store sequence
1d8b : 49c3                     eor #$c3
1d8d : a8                       tay
1d8e : c000                     cpy #0      ;test result
                                trap_ne
1d90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d92 : 68                       pla         ;load status
                                eor_flag 0
1d93 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1d95 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1d98 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1d9a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d9c : 48              >            pha         ;use stack to load status
1d9d : 28              >            plp
                        
1d9e : a40a                     ldy zp1  
1da0 : 08                       php         ;test stores do not alter flags
1da1 : 98                       tya
1da2 : 49c3                     eor #$c3
1da4 : a8                       tay
1da5 : 28                       plp
1da6 : 8c3302                   sty abst  
1da9 : 08                       php         ;flags after load/store sequence
1daa : 49c3                     eor #$c3
1dac : a8                       tay
1dad : c0c3                     cpy #$c3    ;test result
                                trap_ne
1daf : d0fe            >        bne *           ;failed not equal (non zero)
                        
1db1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1db2 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1db4 : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1db7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1db9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1dbb : 48              >            pha         ;use stack to load status
1dbc : 28              >            plp
                        
1dbd : a40b                     ldy zp1+1
1dbf : 08                       php         ;test stores do not alter flags
1dc0 : 98                       tya
1dc1 : 49c3                     eor #$c3
1dc3 : a8                       tay
1dc4 : 28                       plp
1dc5 : 8c3402                   sty abst+1
1dc8 : 08                       php         ;flags after load/store sequence
1dc9 : 49c3                     eor #$c3
1dcb : a8                       tay
1dcc : c082                     cpy #$82   ;test result
                                trap_ne
1dce : d0fe            >        bne *           ;failed not equal (non zero)
                        
1dd0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1dd1 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1dd3 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1dd6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1dd8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1dda : 48              >            pha         ;use stack to load status
1ddb : 28              >            plp
                        
1ddc : a40c                     ldy zp1+2
1dde : 08                       php         ;test stores do not alter flags
1ddf : 98                       tya
1de0 : 49c3                     eor #$c3
1de2 : a8                       tay
1de3 : 28                       plp
1de4 : 8c3502                   sty abst+2
1de7 : 08                       php         ;flags after load/store sequence
1de8 : 49c3                     eor #$c3
1dea : a8                       tay
1deb : c041                     cpy #$41    ;test result
                                trap_ne
1ded : d0fe            >        bne *           ;failed not equal (non zero)
                        
1def : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1df0 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1df2 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1df5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1df7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1df9 : 48              >            pha         ;use stack to load status
1dfa : 28              >            plp
                        
1dfb : a40d                     ldy zp1+3
1dfd : 08                       php         ;test stores do not alter flags
1dfe : 98                       tya
1dff : 49c3                     eor #$c3
1e01 : a8                       tay
1e02 : 28                       plp
1e03 : 8c3602                   sty abst+3
1e06 : 08                       php         ;flags after load/store sequence
1e07 : 49c3                     eor #$c3
1e09 : a8                       tay
1e0a : c000                     cpy #0      ;test result
                                trap_ne
1e0c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1e0e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1e0f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1e11 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1e14 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                                set_stat 0
                       >            load_flag 0
1e16 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e18 : 48              >            pha         ;use stack to load status
1e19 : 28              >            plp
                        
1e1a : ac0002                   ldy abs1  
1e1d : 08                       php         ;test stores do not alter flags
1e1e : 98                       tya
1e1f : 49c3                     eor #$c3
1e21 : a8                       tay
1e22 : 28                       plp
1e23 : 840f                     sty zpt  
1e25 : 08                       php         ;flags after load/store sequence
1e26 : 49c3                     eor #$c3
1e28 : a8                       tay
1e29 : c40a                     cpy zp1     ;test result
                                trap_ne
1e2b : d0fe            >        bne *           ;failed not equal (non zero)
                        
1e2d : 68                       pla         ;load status
                                eor_flag 0
1e2e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e30 : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1e33 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1e35 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e37 : 48              >            pha         ;use stack to load status
1e38 : 28              >            plp
                        
1e39 : ac0102                   ldy abs1+1
1e3c : 08                       php         ;test stores do not alter flags
1e3d : 98                       tya
1e3e : 49c3                     eor #$c3
1e40 : a8                       tay
1e41 : 28                       plp
1e42 : 8410                     sty zpt+1
1e44 : 08                       php         ;flags after load/store sequence
1e45 : 49c3                     eor #$c3
1e47 : a8                       tay
1e48 : c40b                     cpy zp1+1   ;test result
                                trap_ne
1e4a : d0fe            >        bne *           ;failed not equal (non zero)
                        
1e4c : 68                       pla         ;load status
                                eor_flag 0
1e4d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e4f : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1e52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1e54 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e56 : 48              >            pha         ;use stack to load status
1e57 : 28              >            plp
                        
1e58 : ac0202                   ldy abs1+2
1e5b : 08                       php         ;test stores do not alter flags
1e5c : 98                       tya
1e5d : 49c3                     eor #$c3
1e5f : a8                       tay
1e60 : 28                       plp
1e61 : 8411                     sty zpt+2
1e63 : 08                       php         ;flags after load/store sequence
1e64 : 49c3                     eor #$c3
1e66 : a8                       tay
1e67 : c40c                     cpy zp1+2   ;test result
                                trap_ne
1e69 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1e6b : 68                       pla         ;load status
                                eor_flag 0
1e6c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e6e : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1e71 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1e73 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e75 : 48              >            pha         ;use stack to load status
1e76 : 28              >            plp
                        
1e77 : ac0302                   ldy abs1+3
1e7a : 08                       php         ;test stores do not alter flags
1e7b : 98                       tya
1e7c : 49c3                     eor #$c3
1e7e : a8                       tay
1e7f : 28                       plp
1e80 : 8412                     sty zpt+3
1e82 : 08                       php         ;flags after load/store sequence
1e83 : 49c3                     eor #$c3
1e85 : a8                       tay
1e86 : c40d                     cpy zp1+3   ;test result
                                trap_ne
1e88 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1e8a : 68                       pla         ;load status
                                eor_flag 0
1e8b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e8d : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1e90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1e92 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e94 : 48              >            pha         ;use stack to load status
1e95 : 28              >            plp
                        
1e96 : ac0002                   ldy abs1  
1e99 : 08                       php         ;test stores do not alter flags
1e9a : 98                       tya
1e9b : 49c3                     eor #$c3
1e9d : a8                       tay
1e9e : 28                       plp
1e9f : 840f                     sty zpt  
1ea1 : 08                       php         ;flags after load/store sequence
1ea2 : 49c3                     eor #$c3
1ea4 : a8                       tay
1ea5 : c50a                     cmp zp1     ;test result
                                trap_ne
1ea7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ea9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1eaa : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1eac : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1eaf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1eb1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1eb3 : 48              >            pha         ;use stack to load status
1eb4 : 28              >            plp
                        
1eb5 : ac0102                   ldy abs1+1
1eb8 : 08                       php         ;test stores do not alter flags
1eb9 : 98                       tya
1eba : 49c3                     eor #$c3
1ebc : a8                       tay
1ebd : 28                       plp
1ebe : 8410                     sty zpt+1
1ec0 : 08                       php         ;flags after load/store sequence
1ec1 : 49c3                     eor #$c3
1ec3 : a8                       tay
1ec4 : c50b                     cmp zp1+1   ;test result
                                trap_ne
1ec6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ec8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ec9 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1ecb : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1ece : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1ed0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ed2 : 48              >            pha         ;use stack to load status
1ed3 : 28              >            plp
                        
1ed4 : ac0202                   ldy abs1+2
1ed7 : 08                       php         ;test stores do not alter flags
1ed8 : 98                       tya
1ed9 : 49c3                     eor #$c3
1edb : a8                       tay
1edc : 28                       plp
1edd : 8411                     sty zpt+2
1edf : 08                       php         ;flags after load/store sequence
1ee0 : 49c3                     eor #$c3
1ee2 : a8                       tay
1ee3 : c50c                     cmp zp1+2   ;test result
                                trap_ne
1ee5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ee7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ee8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1eea : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1eed : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1eef : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ef1 : 48              >            pha         ;use stack to load status
1ef2 : 28              >            plp
                        
1ef3 : ac0302                   ldy abs1+3
1ef6 : 08                       php         ;test stores do not alter flags
1ef7 : 98                       tya
1ef8 : 49c3                     eor #$c3
1efa : a8                       tay
1efb : 28                       plp
1efc : 8412                     sty zpt+3
1efe : 08                       php         ;flags after load/store sequence
1eff : 49c3                     eor #$c3
1f01 : a8                       tay
1f02 : c50d                     cmp zp1+3   ;test result
                                trap_ne
1f04 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f06 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f07 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f09 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1f0c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
1f0e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f10 : 48              >            pha         ;use stack to load status
1f11 : 28              >            plp
                        
1f12 : a0c3                     ldy #$c3  
1f14 : 08                       php
1f15 : cc0002                   cpy abs1    ;test result
                                trap_ne
1f18 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f1a : 68                       pla         ;load status
                                eor_flag 0
1f1b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f1d : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1f20 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1f22 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f24 : 48              >            pha         ;use stack to load status
1f25 : 28              >            plp
                        
1f26 : a082                     ldy #$82
1f28 : 08                       php
1f29 : cc0102                   cpy abs1+1  ;test result
                                trap_ne
1f2c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f2e : 68                       pla         ;load status
                                eor_flag 0
1f2f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f31 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1f34 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1f36 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f38 : 48              >            pha         ;use stack to load status
1f39 : 28              >            plp
                        
1f3a : a041                     ldy #$41
1f3c : 08                       php
1f3d : cc0202                   cpy abs1+2  ;test result
                                trap_ne
1f40 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f42 : 68                       pla         ;load status
                                eor_flag 0
1f43 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f45 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1f48 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1f4a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f4c : 48              >            pha         ;use stack to load status
1f4d : 28              >            plp
                        
1f4e : a000                     ldy #0
1f50 : 08                       php
1f51 : cc0302                   cpy abs1+3  ;test result
                                trap_ne
1f54 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f56 : 68                       pla         ;load status
                                eor_flag 0
1f57 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f59 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1f5c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1f5e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f60 : 48              >            pha         ;use stack to load status
1f61 : 28              >            plp
                        
1f62 : a0c3                     ldy #$c3  
1f64 : 08                       php
1f65 : cc0002                   cpy abs1    ;test result
                                trap_ne
1f68 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f6a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f6b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f6d : cd0502                   cmp fLDx    ;test flags
                                trap_ne
1f70 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1f72 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f74 : 48              >            pha         ;use stack to load status
1f75 : 28              >            plp
                        
1f76 : a082                     ldy #$82
1f78 : 08                       php
1f79 : cc0102                   cpy abs1+1  ;test result
                                trap_ne
1f7c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f7e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f7f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f81 : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
1f84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1f86 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f88 : 48              >            pha         ;use stack to load status
1f89 : 28              >            plp
                        
1f8a : a041                     ldy #$41
1f8c : 08                       php
1f8d : cc0202                   cpy abs1+2   ;test result
                                trap_ne
1f90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1f92 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f93 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f95 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
1f98 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1f9a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f9c : 48              >            pha         ;use stack to load status
1f9d : 28              >            plp
                        
1f9e : a000                     ldy #0
1fa0 : 08                       php
1fa1 : cc0302                   cpy abs1+3  ;test result
                                trap_ne
1fa4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1fa6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1fa7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1fa9 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
1fac : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
1fae : a000                     ldy #0
1fb0 : a50f                     lda zpt  
1fb2 : 49c3                     eor #$c3
1fb4 : c50a                     cmp zp1  
                                trap_ne     ;store to zp   data
1fb6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1fb8 : 840f                     sty zpt     ;clear                
1fba : ad3302                   lda abst  
1fbd : 49c3                     eor #$c3
1fbf : cd0002                   cmp abs1  
                                trap_ne     ;store to abs   data
1fc2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1fc4 : 8c3302                   sty abst    ;clear                
1fc7 : a510                     lda zpt+1
1fc9 : 49c3                     eor #$c3
1fcb : c50b                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
1fcd : d0fe            >        bne *           ;failed not equal (non zero)
                        
1fcf : 8410                     sty zpt+1   ;clear                
1fd1 : ad3402                   lda abst+1
1fd4 : 49c3                     eor #$c3
1fd6 : cd0102                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
1fd9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1fdb : 8c3402                   sty abst+1  ;clear                
1fde : a511                     lda zpt+2
1fe0 : 49c3                     eor #$c3
1fe2 : c50c                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
1fe4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1fe6 : 8411                     sty zpt+2   ;clear                
1fe8 : ad3502                   lda abst+2
1feb : 49c3                     eor #$c3
1fed : cd0202                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
1ff0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ff2 : 8c3502                   sty abst+2  ;clear                
1ff5 : a512                     lda zpt+3
1ff7 : 49c3                     eor #$c3
1ff9 : c50d                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
1ffb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ffd : 8412                     sty zpt+3   ;clear                
1fff : ad3602                   lda abst+3
2002 : 49c3                     eor #$c3
2004 : cd0302                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
2007 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2009 : 8c3602                   sty abst+3  ;clear                
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
200c : a203                     ldx #3
200e :                  tldax    
                                set_stat 0
                       >            load_flag 0
200e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2010 : 48              >            pha         ;use stack to load status
2011 : 28              >            plp
                        
2012 : b50a                     lda zp1,x
2014 : 08                       php         ;test stores do not alter flags
2015 : 49c3                     eor #$c3
2017 : 28                       plp
2018 : 9d3302                   sta abst,x
201b : 08                       php         ;flags after load/store sequence
201c : 49c3                     eor #$c3
201e : dd0002                   cmp abs1,x  ;test result
                                trap_ne
2021 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2023 : 68                       pla         ;load status
                                eor_flag 0
2024 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2026 : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
2029 : d0fe            >        bne *           ;failed not equal (non zero)
                        
202b : ca                       dex
202c : 10e0                     bpl tldax                  
                        
202e : a203                     ldx #3
2030 :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
2030 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2032 : 48              >            pha         ;use stack to load status
2033 : 28              >            plp
                        
2034 : b50a                     lda zp1,x
2036 : 08                       php         ;test stores do not alter flags
2037 : 49c3                     eor #$c3
2039 : 28                       plp
203a : 9d3302                   sta abst,x
203d : 08                       php         ;flags after load/store sequence
203e : 49c3                     eor #$c3
2040 : dd0002                   cmp abs1,x   ;test result
                                trap_ne
2043 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2045 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2046 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2048 : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
204b : d0fe            >        bne *           ;failed not equal (non zero)
                        
204d : ca                       dex
204e : 10e0                     bpl tldax1                  
                        
2050 : a203                     ldx #3
2052 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
2052 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2054 : 48              >            pha         ;use stack to load status
2055 : 28              >            plp
                        
2056 : bd0002                   lda abs1,x
2059 : 08                       php         ;test stores do not alter flags
205a : 49c3                     eor #$c3
205c : 28                       plp
205d : 950f                     sta zpt,x
205f : 08                       php         ;flags after load/store sequence
2060 : 49c3                     eor #$c3
2062 : d50a                     cmp zp1,x   ;test result
                                trap_ne
2064 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2066 : 68                       pla         ;load status
                                eor_flag 0
2067 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2069 : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
206c : d0fe            >        bne *           ;failed not equal (non zero)
                        
206e : ca                       dex
206f : 10e1                     bpl tldax2                  
                        
2071 : a203                     ldx #3
2073 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
2073 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2075 : 48              >            pha         ;use stack to load status
2076 : 28              >            plp
                        
2077 : bd0002                   lda abs1,x
207a : 08                       php         ;test stores do not alter flags
207b : 49c3                     eor #$c3
207d : 28                       plp
207e : 950f                     sta zpt,x
2080 : 08                       php         ;flags after load/store sequence
2081 : 49c3                     eor #$c3
2083 : d50a                     cmp zp1,x   ;test result
                                trap_ne
2085 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2087 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2088 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
208a : dd0502                   cmp fLDx,x  ;test flags
                                trap_ne
208d : d0fe            >        bne *           ;failed not equal (non zero)
                        
208f : ca                       dex
2090 : 10e1                     bpl tldax3
                        
2092 : a203                     ldx #3      ;testing store result
2094 : a000                     ldy #0
2096 : b50f             tstax   lda zpt,x
2098 : 49c3                     eor #$c3
209a : d50a                     cmp zp1,x
                                trap_ne     ;store to zp,x data
209c : d0fe            >        bne *           ;failed not equal (non zero)
                        
209e : 940f                     sty zpt,x   ;clear                
20a0 : bd3302                   lda abst,x
20a3 : 49c3                     eor #$c3
20a5 : dd0002                   cmp abs1,x
                                trap_ne     ;store to abs,x data
20a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
20aa : 8a                       txa
20ab : 9d3302                   sta abst,x  ;clear                
20ae : ca                       dex
20af : 10e5                     bpl tstax
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
20b1 : a003                     ldy #3
20b3 :                  tlday    
                                set_stat 0
                       >            load_flag 0
20b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20b5 : 48              >            pha         ;use stack to load status
20b6 : 28              >            plp
                        
20b7 : b120                     lda (ind1),y
20b9 : 08                       php         ;test stores do not alter flags
20ba : 49c3                     eor #$c3
20bc : 28                       plp
20bd : 993302                   sta abst,y
20c0 : 08                       php         ;flags after load/store sequence
20c1 : 49c3                     eor #$c3
20c3 : d90002                   cmp abs1,y  ;test result
                                trap_ne
20c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
20c8 : 68                       pla         ;load status
                                eor_flag 0
20c9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
20cb : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
20ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
20d0 : 88                       dey
20d1 : 10e0                     bpl tlday                  
                        
20d3 : a003                     ldy #3
20d5 :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
20d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
20d7 : 48              >            pha         ;use stack to load status
20d8 : 28              >            plp
                        
20d9 : b120                     lda (ind1),y
20db : 08                       php         ;test stores do not alter flags
20dc : 49c3                     eor #$c3
20de : 28                       plp
20df : 993302                   sta abst,y
20e2 : 08                       php         ;flags after load/store sequence
20e3 : 49c3                     eor #$c3
20e5 : d90002                   cmp abs1,y  ;test result
                                trap_ne
20e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
20ea : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
20eb : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
20ed : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
20f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
20f2 : 88                       dey
20f3 : 10e0                     bpl tlday1                  
                        
20f5 : a003                     ldy #3      ;testing store result
20f7 : a200                     ldx #0
20f9 : b93302           tstay   lda abst,y
20fc : 49c3                     eor #$c3
20fe : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
2101 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2103 : 8a                       txa
2104 : 993302                   sta abst,y  ;clear                
2107 : 88                       dey
2108 : 10ef                     bpl tstay
                        
210a : a003                     ldy #3
210c :                  tlday2   
                                set_stat 0
                       >            load_flag 0
210c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
210e : 48              >            pha         ;use stack to load status
210f : 28              >            plp
                        
2110 : b90002                   lda abs1,y
2113 : 08                       php         ;test stores do not alter flags
2114 : 49c3                     eor #$c3
2116 : 28                       plp
2117 : 912c                     sta (indt),y
2119 : 08                       php         ;flags after load/store sequence
211a : 49c3                     eor #$c3
211c : d120                     cmp (ind1),y    ;test result
                                trap_ne
211e : d0fe            >        bne *           ;failed not equal (non zero)
                        
2120 : 68                       pla         ;load status
                                eor_flag 0
2121 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2123 : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
2126 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2128 : 88                       dey
2129 : 10e1                     bpl tlday2                  
                        
212b : a003                     ldy #3
212d :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
212d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
212f : 48              >            pha         ;use stack to load status
2130 : 28              >            plp
                        
2131 : b90002                   lda abs1,y
2134 : 08                       php         ;test stores do not alter flags
2135 : 49c3                     eor #$c3
2137 : 28                       plp
2138 : 912c                     sta (indt),y
213a : 08                       php         ;flags after load/store sequence
213b : 49c3                     eor #$c3
213d : d120                     cmp (ind1),y   ;test result
                                trap_ne
213f : d0fe            >        bne *           ;failed not equal (non zero)
                        
2141 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2142 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2144 : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
2147 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2149 : 88                       dey
214a : 10e1                     bpl tlday3
                                
214c : a003                     ldy #3      ;testing store result
214e : a200                     ldx #0
2150 : b93302           tstay1  lda abst,y
2153 : 49c3                     eor #$c3
2155 : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
2158 : d0fe            >        bne *           ;failed not equal (non zero)
                        
215a : 8a                       txa
215b : 993302                   sta abst,y  ;clear                
215e : 88                       dey
215f : 10ef                     bpl tstay1
                                
2161 : a206                     ldx #6
2163 : a003                     ldy #3
2165 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
2165 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2167 : 48              >            pha         ;use stack to load status
2168 : 28              >            plp
                        
2169 : a120                     lda (ind1,x)
216b : 08                       php         ;test stores do not alter flags
216c : 49c3                     eor #$c3
216e : 28                       plp
216f : 812c                     sta (indt,x)
2171 : 08                       php         ;flags after load/store sequence
2172 : 49c3                     eor #$c3
2174 : d90002                   cmp abs1,y  ;test result
                                trap_ne
2177 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2179 : 68                       pla         ;load status
                                eor_flag 0
217a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
217c : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
217f : d0fe            >        bne *           ;failed not equal (non zero)
                        
2181 : ca                       dex
2182 : ca                       dex
2183 : 88                       dey
2184 : 10df                     bpl tldax4                  
                        
2186 : a206                     ldx #6
2188 : a003                     ldy #3
218a :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
218a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
218c : 48              >            pha         ;use stack to load status
218d : 28              >            plp
                        
218e : a120                     lda (ind1,x)
2190 : 08                       php         ;test stores do not alter flags
2191 : 49c3                     eor #$c3
2193 : 28                       plp
2194 : 812c                     sta (indt,x)
2196 : 08                       php         ;flags after load/store sequence
2197 : 49c3                     eor #$c3
2199 : d90002                   cmp abs1,y  ;test result
                                trap_ne
219c : d0fe            >        bne *           ;failed not equal (non zero)
                        
219e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
219f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
21a1 : d90502                   cmp fLDx,y  ;test flags
                                trap_ne
21a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
21a6 : ca                       dex
21a7 : ca                       dex
21a8 : 88                       dey
21a9 : 10df                     bpl tldax5
                        
21ab : a003                     ldy #3      ;testing store result
21ad : a200                     ldx #0
21af : b93302           tstay2  lda abst,y
21b2 : 49c3                     eor #$c3
21b4 : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
21b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
21b9 : 8a                       txa
21ba : 993302                   sta abst,y  ;clear                
21bd : 88                       dey
21be : 10ef                     bpl tstay2
                        
                        ; indexed wraparound test (only zp should wrap)
21c0 : a2fd                     ldx #3+$fa
21c2 : b510             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
21c4 : 9d3901                   sta abst-$fa,x      ;no STX abs,x!
21c7 : ca                       dex
21c8 : e0fa                     cpx #$fa
21ca : b0f6                     bcs tldax6                  
21cc : a2fd                     ldx #3+$fa
21ce : bd0601           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
21d1 : 9515                     sta zpt-$fa&$ff,x
21d3 : ca                       dex
21d4 : e0fa                     cpx #$fa
21d6 : b0f6                     bcs tldax7
                                                  
21d8 : a203                     ldx #3      ;testing wraparound result
21da : a000                     ldy #0
21dc : b50f             tstax1  lda zpt,x
21de : d50a                     cmp zp1,x
                                trap_ne     ;store to zp,x data
21e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
21e2 : 940f                     sty zpt,x   ;clear                
21e4 : bd3302                   lda abst,x
21e7 : dd0002                   cmp abs1,x
                                trap_ne     ;store to abs,x data
21ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
21ec : 8a                       txa
21ed : 9d3302                   sta abst,x  ;clear                
21f0 : ca                       dex
21f1 : 10e9                     bpl tstax1
                        
21f3 : a0fb                     ldy #3+$f8
21f5 : a2fe                     ldx #6+$f8
21f7 : a128             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
21f9 : 993b01                   sta abst-$f8,y
21fc : ca                       dex
21fd : ca                       dex
21fe : 88                       dey
21ff : c0f8                     cpy #$f8
2201 : b0f4                     bcs tlday4
2203 : a003                     ldy #3      ;testing wraparound result
2205 : a200                     ldx #0
2207 : b93302           tstay4  lda abst,y
220a : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
220d : d0fe            >        bne *           ;failed not equal (non zero)
                        
220f : 8a                       txa
2210 : 993302                   sta abst,y  ;clear                
2213 : 88                       dey
2214 : 10f1                     bpl tstay4
                                
2216 : a0fb                     ldy #3+$f8
2218 : b90801           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
221b : 9134                     sta (inwt),y
221d : 88                       dey
221e : c0f8                     cpy #$f8
2220 : b0f6                     bcs tlday5                  
2222 : a003                     ldy #3      ;testing wraparound result
2224 : a200                     ldx #0
2226 : b93302           tstay5  lda abst,y
2229 : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
222c : d0fe            >        bne *           ;failed not equal (non zero)
                        
222e : 8a                       txa
222f : 993302                   sta abst,y  ;clear                
2232 : 88                       dey
2233 : 10f1                     bpl tstay5
                        
2235 : a0fb                     ldy #3+$f8
2237 : a2fe                     ldx #6+$f8
2239 : b12a             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
223b : 8134                     sta (indt-$f8&$ff,x)
223d : ca                       dex
223e : ca                       dex
223f : 88                       dey
2240 : c0f8                     cpy #$f8
2242 : b0f5                     bcs tlday6
2244 : a003                     ldy #3      ;testing wraparound result
2246 : a200                     ldx #0
2248 : b93302           tstay6  lda abst,y
224b : d90002                   cmp abs1,y
                                trap_ne     ;store to abs data
224e : d0fe            >        bne *           ;failed not equal (non zero)
                        
2250 : 8a                       txa
2251 : 993302                   sta abst,y  ;clear                
2254 : 88                       dey
2255 : 10f1                     bpl tstay6
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
2257 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
2259 : 48              >            pha         ;use stack to load status
225a : 28              >            plp
                        
225b : a50a                     lda zp1
225d : 08                       php         ;test stores do not alter flags
225e : 49c3                     eor #$c3
2260 : 28                       plp
2261 : 8d3302                   sta abst
2264 : 08                       php         ;flags after load/store sequence
2265 : 49c3                     eor #$c3
2267 : c9c3                     cmp #$c3    ;test result
                                trap_ne
2269 : d0fe            >        bne *           ;failed not equal (non zero)
                        
226b : 68                       pla         ;load status
                                eor_flag 0
226c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
226e : cd0502                   cmp fLDx    ;test flags
                                trap_ne
2271 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
2273 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2275 : 48              >            pha         ;use stack to load status
2276 : 28              >            plp
                        
2277 : a50b                     lda zp1+1
2279 : 08                       php         ;test stores do not alter flags
227a : 49c3                     eor #$c3
227c : 28                       plp
227d : 8d3402                   sta abst+1
2280 : 08                       php         ;flags after load/store sequence
2281 : 49c3                     eor #$c3
2283 : c982                     cmp #$82    ;test result
                                trap_ne
2285 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2287 : 68                       pla         ;load status
                                eor_flag 0
2288 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
228a : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
228d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
228f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2291 : 48              >            pha         ;use stack to load status
2292 : 28              >            plp
                        
2293 : a50c                     lda zp1+2
2295 : 08                       php         ;test stores do not alter flags
2296 : 49c3                     eor #$c3
2298 : 28                       plp
2299 : 8d3502                   sta abst+2
229c : 08                       php         ;flags after load/store sequence
229d : 49c3                     eor #$c3
229f : c941                     cmp #$41    ;test result
                                trap_ne
22a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
22a3 : 68                       pla         ;load status
                                eor_flag 0
22a4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
22a6 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
22a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
22ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22ad : 48              >            pha         ;use stack to load status
22ae : 28              >            plp
                        
22af : a50d                     lda zp1+3
22b1 : 08                       php         ;test stores do not alter flags
22b2 : 49c3                     eor #$c3
22b4 : 28                       plp
22b5 : 8d3602                   sta abst+3
22b8 : 08                       php         ;flags after load/store sequence
22b9 : 49c3                     eor #$c3
22bb : c900                     cmp #0      ;test result
                                trap_ne
22bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
22bf : 68                       pla         ;load status
                                eor_flag 0
22c0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
22c2 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
22c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
22c7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22c9 : 48              >            pha         ;use stack to load status
22ca : 28              >            plp
                        
22cb : a50a                     lda zp1  
22cd : 08                       php         ;test stores do not alter flags
22ce : 49c3                     eor #$c3
22d0 : 28                       plp
22d1 : 8d3302                   sta abst  
22d4 : 08                       php         ;flags after load/store sequence
22d5 : 49c3                     eor #$c3
22d7 : c9c3                     cmp #$c3    ;test result
                                trap_ne
22d9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
22db : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
22dc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
22de : cd0502                   cmp fLDx    ;test flags
                                trap_ne
22e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
22e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22e5 : 48              >            pha         ;use stack to load status
22e6 : 28              >            plp
                        
22e7 : a50b                     lda zp1+1
22e9 : 08                       php         ;test stores do not alter flags
22ea : 49c3                     eor #$c3
22ec : 28                       plp
22ed : 8d3402                   sta abst+1
22f0 : 08                       php         ;flags after load/store sequence
22f1 : 49c3                     eor #$c3
22f3 : c982                     cmp #$82    ;test result
                                trap_ne
22f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
22f7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
22f8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
22fa : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
22fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
22ff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2301 : 48              >            pha         ;use stack to load status
2302 : 28              >            plp
                        
2303 : a50c                     lda zp1+2
2305 : 08                       php         ;test stores do not alter flags
2306 : 49c3                     eor #$c3
2308 : 28                       plp
2309 : 8d3502                   sta abst+2
230c : 08                       php         ;flags after load/store sequence
230d : 49c3                     eor #$c3
230f : c941                     cmp #$41    ;test result
                                trap_ne
2311 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2313 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2314 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2316 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
2319 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
231b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
231d : 48              >            pha         ;use stack to load status
231e : 28              >            plp
                        
231f : a50d                     lda zp1+3
2321 : 08                       php         ;test stores do not alter flags
2322 : 49c3                     eor #$c3
2324 : 28                       plp
2325 : 8d3602                   sta abst+3
2328 : 08                       php         ;flags after load/store sequence
2329 : 49c3                     eor #$c3
232b : c900                     cmp #0      ;test result
                                trap_ne
232d : d0fe            >        bne *           ;failed not equal (non zero)
                        
232f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2330 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2332 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
2335 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
2337 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2339 : 48              >            pha         ;use stack to load status
233a : 28              >            plp
                        
233b : ad0002                   lda abs1  
233e : 08                       php         ;test stores do not alter flags
233f : 49c3                     eor #$c3
2341 : 28                       plp
2342 : 850f                     sta zpt  
2344 : 08                       php         ;flags after load/store sequence
2345 : 49c3                     eor #$c3
2347 : c50a                     cmp zp1     ;test result
                                trap_ne
2349 : d0fe            >        bne *           ;failed not equal (non zero)
                        
234b : 68                       pla         ;load status
                                eor_flag 0
234c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
234e : cd0502                   cmp fLDx    ;test flags
                                trap_ne
2351 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
2353 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2355 : 48              >            pha         ;use stack to load status
2356 : 28              >            plp
                        
2357 : ad0102                   lda abs1+1
235a : 08                       php         ;test stores do not alter flags
235b : 49c3                     eor #$c3
235d : 28                       plp
235e : 8510                     sta zpt+1
2360 : 08                       php         ;flags after load/store sequence
2361 : 49c3                     eor #$c3
2363 : c50b                     cmp zp1+1   ;test result
                                trap_ne
2365 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2367 : 68                       pla         ;load status
                                eor_flag 0
2368 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
236a : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
236d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
236f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2371 : 48              >            pha         ;use stack to load status
2372 : 28              >            plp
                        
2373 : ad0202                   lda abs1+2
2376 : 08                       php         ;test stores do not alter flags
2377 : 49c3                     eor #$c3
2379 : 28                       plp
237a : 8511                     sta zpt+2
237c : 08                       php         ;flags after load/store sequence
237d : 49c3                     eor #$c3
237f : c50c                     cmp zp1+2   ;test result
                                trap_ne
2381 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2383 : 68                       pla         ;load status
                                eor_flag 0
2384 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2386 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
2389 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
238b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
238d : 48              >            pha         ;use stack to load status
238e : 28              >            plp
                        
238f : ad0302                   lda abs1+3
2392 : 08                       php         ;test stores do not alter flags
2393 : 49c3                     eor #$c3
2395 : 28                       plp
2396 : 8512                     sta zpt+3
2398 : 08                       php         ;flags after load/store sequence
2399 : 49c3                     eor #$c3
239b : c50d                     cmp zp1+3   ;test result
                                trap_ne
239d : d0fe            >        bne *           ;failed not equal (non zero)
                        
239f : 68                       pla         ;load status
                                eor_flag 0
23a0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
23a2 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
23a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
23a7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23a9 : 48              >            pha         ;use stack to load status
23aa : 28              >            plp
                        
23ab : ad0002                   lda abs1  
23ae : 08                       php         ;test stores do not alter flags
23af : 49c3                     eor #$c3
23b1 : 28                       plp
23b2 : 850f                     sta zpt  
23b4 : 08                       php         ;flags after load/store sequence
23b5 : 49c3                     eor #$c3
23b7 : c50a                     cmp zp1     ;test result
                                trap_ne
23b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
23bb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
23bc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
23be : cd0502                   cmp fLDx    ;test flags
                                trap_ne
23c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
23c3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23c5 : 48              >            pha         ;use stack to load status
23c6 : 28              >            plp
                        
23c7 : ad0102                   lda abs1+1
23ca : 08                       php         ;test stores do not alter flags
23cb : 49c3                     eor #$c3
23cd : 28                       plp
23ce : 8510                     sta zpt+1
23d0 : 08                       php         ;flags after load/store sequence
23d1 : 49c3                     eor #$c3
23d3 : c50b                     cmp zp1+1   ;test result
                                trap_ne
23d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
23d7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
23d8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
23da : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
23dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
23df : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23e1 : 48              >            pha         ;use stack to load status
23e2 : 28              >            plp
                        
23e3 : ad0202                   lda abs1+2
23e6 : 08                       php         ;test stores do not alter flags
23e7 : 49c3                     eor #$c3
23e9 : 28                       plp
23ea : 8511                     sta zpt+2
23ec : 08                       php         ;flags after load/store sequence
23ed : 49c3                     eor #$c3
23ef : c50c                     cmp zp1+2   ;test result
                                trap_ne
23f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
23f3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
23f4 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
23f6 : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
23f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
23fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23fd : 48              >            pha         ;use stack to load status
23fe : 28              >            plp
                        
23ff : ad0302                   lda abs1+3
2402 : 08                       php         ;test stores do not alter flags
2403 : 49c3                     eor #$c3
2405 : 28                       plp
2406 : 8512                     sta zpt+3
2408 : 08                       php         ;flags after load/store sequence
2409 : 49c3                     eor #$c3
240b : c50d                     cmp zp1+3   ;test result
                                trap_ne
240d : d0fe            >        bne *           ;failed not equal (non zero)
                        
240f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2410 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2412 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
2415 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0  
                       >            load_flag 0  
2417 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
2419 : 48              >            pha         ;use stack to load status
241a : 28              >            plp
                        
241b : a9c3                     lda #$c3
241d : 08                       php
241e : cd0002                   cmp abs1    ;test result
                                trap_ne
2421 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2423 : 68                       pla         ;load status
                                eor_flag 0
2424 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2426 : cd0502                   cmp fLDx    ;test flags
                                trap_ne
2429 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
242b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
242d : 48              >            pha         ;use stack to load status
242e : 28              >            plp
                        
242f : a982                     lda #$82
2431 : 08                       php
2432 : cd0102                   cmp abs1+1  ;test result
                                trap_ne
2435 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2437 : 68                       pla         ;load status
                                eor_flag 0
2438 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
243a : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
243d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
243f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2441 : 48              >            pha         ;use stack to load status
2442 : 28              >            plp
                        
2443 : a941                     lda #$41
2445 : 08                       php
2446 : cd0202                   cmp abs1+2  ;test result
                                trap_ne
2449 : d0fe            >        bne *           ;failed not equal (non zero)
                        
244b : 68                       pla         ;load status
                                eor_flag 0
244c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
244e : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
2451 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
2453 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2455 : 48              >            pha         ;use stack to load status
2456 : 28              >            plp
                        
2457 : a900                     lda #0
2459 : 08                       php
245a : cd0302                   cmp abs1+3  ;test result
                                trap_ne
245d : d0fe            >        bne *           ;failed not equal (non zero)
                        
245f : 68                       pla         ;load status
                                eor_flag 0
2460 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2462 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
2465 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
2467 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2469 : 48              >            pha         ;use stack to load status
246a : 28              >            plp
                        
246b : a9c3                     lda #$c3  
246d : 08                       php
246e : cd0002                   cmp abs1    ;test result
                                trap_ne
2471 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2473 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2474 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2476 : cd0502                   cmp fLDx    ;test flags
                                trap_ne
2479 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
247b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
247d : 48              >            pha         ;use stack to load status
247e : 28              >            plp
                        
247f : a982                     lda #$82
2481 : 08                       php
2482 : cd0102                   cmp abs1+1  ;test result
                                trap_ne
2485 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2487 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2488 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
248a : cd0602                   cmp fLDx+1  ;test flags
                                trap_ne
248d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
248f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2491 : 48              >            pha         ;use stack to load status
2492 : 28              >            plp
                        
2493 : a941                     lda #$41
2495 : 08                       php
2496 : cd0202                   cmp abs1+2  ;test result
                                trap_ne
2499 : d0fe            >        bne *           ;failed not equal (non zero)
                        
249b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
249c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
249e : cd0702                   cmp fLDx+2  ;test flags
                                trap_ne
24a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
24a3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24a5 : 48              >            pha         ;use stack to load status
24a6 : 28              >            plp
                        
24a7 : a900                     lda #0
24a9 : 08                       php
24aa : cd0302                   cmp abs1+3  ;test result
                                trap_ne
24ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
24af : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
24b0 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
24b2 : cd0802                   cmp fLDx+3  ;test flags
                                trap_ne
24b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
24b7 : a200                     ldx #0
24b9 : a50f                     lda zpt  
24bb : 49c3                     eor #$c3
24bd : c50a                     cmp zp1  
                                trap_ne     ;store to zp data
24bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
24c1 : 860f                     stx zpt     ;clear                
24c3 : ad3302                   lda abst  
24c6 : 49c3                     eor #$c3
24c8 : cd0002                   cmp abs1  
                                trap_ne     ;store to abs data
24cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
24cd : 8e3302                   stx abst    ;clear                
24d0 : a510                     lda zpt+1
24d2 : 49c3                     eor #$c3
24d4 : c50b                     cmp zp1+1
                                trap_ne     ;store to zp data
24d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
24d8 : 8610                     stx zpt+1   ;clear                
24da : ad3402                   lda abst+1
24dd : 49c3                     eor #$c3
24df : cd0102                   cmp abs1+1
                                trap_ne     ;store to abs data
24e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
24e4 : 8e3402                   stx abst+1  ;clear                
24e7 : a511                     lda zpt+2
24e9 : 49c3                     eor #$c3
24eb : c50c                     cmp zp1+2
                                trap_ne     ;store to zp data
24ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
24ef : 8611                     stx zpt+2   ;clear                
24f1 : ad3502                   lda abst+2
24f4 : 49c3                     eor #$c3
24f6 : cd0202                   cmp abs1+2
                                trap_ne     ;store to abs data
24f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
24fb : 8e3502                   stx abst+2  ;clear                
24fe : a512                     lda zpt+3
2500 : 49c3                     eor #$c3
2502 : c50d                     cmp zp1+3
                                trap_ne     ;store to zp data
2504 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2506 : 8612                     stx zpt+3   ;clear                
2508 : ad3602                   lda abst+3
250b : 49c3                     eor #$c3
250d : cd0302                   cmp abs1+3
                                trap_ne     ;store to abs data
2510 : d0fe            >        bne *           ;failed not equal (non zero)
                        
2512 : 8e3602                   stx abst+3  ;clear                
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
2515 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2517 : 48              >            pha         ;use stack to load status
2518 : a9ff            >            lda #$ff     ;precharge accu
251a : 28              >            plp
                        
251b : 240d                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
251d : 08              >            php         ;save flags
251e : 08              >            php
251f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2521 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2523 : 68              >            pla         ;load status
                       >            cmp_flag fz 
2524 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2526 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2528 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2529 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
252b : 48              >            pha         ;use stack to load status
252c : a901            >            lda #1     ;precharge accu
252e : 28              >            plp
                        
252f : 240c                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
2531 : 08              >            php         ;save flags
2532 : 08              >            php
2533 : c901            >            cmp #1     ;test result
                       >            trap_ne
2535 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2537 : 68              >            pla         ;load status
                       >            cmp_flag fv
2538 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
253a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
253c : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
253d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
253f : 48              >            pha         ;use stack to load status
2540 : a901            >            lda #1     ;precharge accu
2542 : 28              >            plp
                        
2543 : 240b                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
2545 : 08              >            php         ;save flags
2546 : 08              >            php
2547 : c901            >            cmp #1     ;test result
                       >            trap_ne
2549 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
254b : 68              >            pla         ;load status
                       >            cmp_flag fnz
254c : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
254e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2550 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2551 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2553 : 48              >            pha         ;use stack to load status
2554 : a901            >            lda #1     ;precharge accu
2556 : 28              >            plp
                        
2557 : 240a                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
2559 : 08              >            php         ;save flags
255a : 08              >            php
255b : c901            >            cmp #1     ;test result
                       >            trap_ne
255d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
255f : 68              >            pla         ;load status
                       >            cmp_flag fnv
2560 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2562 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2564 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
2565 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2567 : 48              >            pha         ;use stack to load status
2568 : a9ff            >            lda #$ff     ;precharge accu
256a : 28              >            plp
                        
256b : 240d                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
256d : 08              >            php         ;save flags
256e : 08              >            php
256f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2571 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2573 : 68              >            pla         ;load status
                       >            cmp_flag ~fnv 
2574 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2576 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2578 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
2579 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
257b : 48              >            pha         ;use stack to load status
257c : a901            >            lda #1     ;precharge accu
257e : 28              >            plp
                        
257f : 240c                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
2581 : 08              >            php         ;save flags
2582 : 08              >            php
2583 : c901            >            cmp #1     ;test result
                       >            trap_ne
2585 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2587 : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
2588 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
258a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
258c : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
258d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
258f : 48              >            pha         ;use stack to load status
2590 : a901            >            lda #1     ;precharge accu
2592 : 28              >            plp
                        
2593 : 240b                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
2595 : 08              >            php         ;save flags
2596 : 08              >            php
2597 : c901            >            cmp #1     ;test result
                       >            trap_ne
2599 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
259b : 68              >            pla         ;load status
                       >            cmp_flag ~fv
259c : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
259e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25a0 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
25a1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25a3 : 48              >            pha         ;use stack to load status
25a4 : a901            >            lda #1     ;precharge accu
25a6 : 28              >            plp
                        
25a7 : 240a                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
25a9 : 08              >            php         ;save flags
25aa : 08              >            php
25ab : c901            >            cmp #1     ;test result
                       >            trap_ne
25ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25af : 68              >            pla         ;load status
                       >            cmp_flag ~fz
25b0 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25b4 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
25b5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25b7 : 48              >            pha         ;use stack to load status
25b8 : a9ff            >            lda #$ff     ;precharge accu
25ba : 28              >            plp
                        
25bb : 2c0302                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
25be : 08              >            php         ;save flags
25bf : 08              >            php
25c0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
25c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25c4 : 68              >            pla         ;load status
                       >            cmp_flag fz 
25c5 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25c9 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
25ca : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25cc : 48              >            pha         ;use stack to load status
25cd : a901            >            lda #1     ;precharge accu
25cf : 28              >            plp
                        
25d0 : 2c0202                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
25d3 : 08              >            php         ;save flags
25d4 : 08              >            php
25d5 : c901            >            cmp #1     ;test result
                       >            trap_ne
25d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25d9 : 68              >            pla         ;load status
                       >            cmp_flag fv
25da : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25de : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
25df : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25e1 : 48              >            pha         ;use stack to load status
25e2 : a901            >            lda #1     ;precharge accu
25e4 : 28              >            plp
                        
25e5 : 2c0102                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
25e8 : 08              >            php         ;save flags
25e9 : 08              >            php
25ea : c901            >            cmp #1     ;test result
                       >            trap_ne
25ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25ee : 68              >            pla         ;load status
                       >            cmp_flag fnz
25ef : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25f3 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
25f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25f6 : 48              >            pha         ;use stack to load status
25f7 : a901            >            lda #1     ;precharge accu
25f9 : 28              >            plp
                        
25fa : 2c0002                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
25fd : 08              >            php         ;save flags
25fe : 08              >            php
25ff : c901            >            cmp #1     ;test result
                       >            trap_ne
2601 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2603 : 68              >            pla         ;load status
                       >            cmp_flag fnv
2604 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2606 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2608 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
2609 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
260b : 48              >            pha         ;use stack to load status
260c : a9ff            >            lda #$ff     ;precharge accu
260e : 28              >            plp
                        
260f : 2c0302                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
2612 : 08              >            php         ;save flags
2613 : 08              >            php
2614 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2616 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2618 : 68              >            pla         ;load status
                       >            cmp_flag ~fnv 
2619 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
261b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
261d : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
261e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2620 : 48              >            pha         ;use stack to load status
2621 : a901            >            lda #1     ;precharge accu
2623 : 28              >            plp
                        
2624 : 2c0202                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
2627 : 08              >            php         ;save flags
2628 : 08              >            php
2629 : c901            >            cmp #1     ;test result
                       >            trap_ne
262b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
262d : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
262e : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2630 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2632 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
2633 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2635 : 48              >            pha         ;use stack to load status
2636 : a901            >            lda #1     ;precharge accu
2638 : 28              >            plp
                        
2639 : 2c0102                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
263c : 08              >            php         ;save flags
263d : 08              >            php
263e : c901            >            cmp #1     ;test result
                       >            trap_ne
2640 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2642 : 68              >            pla         ;load status
                       >            cmp_flag ~fv
2643 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2645 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2647 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
2648 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
264a : 48              >            pha         ;use stack to load status
264b : a901            >            lda #1     ;precharge accu
264d : 28              >            plp
                        
264e : 2c0002                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
2651 : 08              >            php         ;save flags
2652 : 08              >            php
2653 : c901            >            cmp #1     ;test result
                       >            trap_ne
2655 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2657 : 68              >            pla         ;load status
                       >            cmp_flag ~fz
2658 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
265a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
265c : 28              >            plp         ;restore status
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
265d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
265f : 48              >            pha         ;use stack to load status
2660 : a280            >            ldx #$80     ;precharge index x
2662 : 28              >            plp
                        
2663 : e40e                     cpx zp7f
                                tst_stat fc
2665 : 08              >            php         ;save status
2666 : 08              >            php         ;use stack to retrieve status
2667 : 68              >            pla
                       >            cmp_flag fc
2668 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
266a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
266c : 28              >            plp         ;restore status
                        
266d : ca                       dex
266e : e40e                     cpx zp7f
                                tst_stat fzc
2670 : 08              >            php         ;save status
2671 : 08              >            php         ;use stack to retrieve status
2672 : 68              >            pla
                       >            cmp_flag fzc
2673 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2675 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2677 : 28              >            plp         ;restore status
                        
2678 : ca                       dex
2679 : e40e                     cpx zp7f
                                tst_x $7e,fn
267b : 08              >            php         ;save flags
267c : 08              >            php
267d : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
267f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2681 : 68              >            pla         ;load status
                       >            cmp_flag fn
2682 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2684 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2686 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
2687 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2689 : 48              >            pha         ;use stack to load status
268a : a280            >            ldx #$80     ;precharge index x
268c : 28              >            plp
                        
268d : e40e                     cpx zp7f
                                tst_stat ~fnz
268f : 08              >            php         ;save status
2690 : 08              >            php         ;use stack to retrieve status
2691 : 68              >            pla
                       >            cmp_flag ~fnz
2692 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2694 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2696 : 28              >            plp         ;restore status
                        
2697 : ca                       dex
2698 : e40e                     cpx zp7f
                                tst_stat ~fn
269a : 08              >            php         ;save status
269b : 08              >            php         ;use stack to retrieve status
269c : 68              >            pla
                       >            cmp_flag ~fn
269d : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
269f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26a1 : 28              >            plp         ;restore status
                        
26a2 : ca                       dex
26a3 : e40e                     cpx zp7f
                                tst_x $7e,~fzc
26a5 : 08              >            php         ;save flags
26a6 : 08              >            php
26a7 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
26a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26ab : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
26ac : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26b0 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
26b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26b3 : 48              >            pha         ;use stack to load status
26b4 : a280            >            ldx #$80     ;precharge index x
26b6 : 28              >            plp
                        
26b7 : ec0402                   cpx abs7f
                                tst_stat fc
26ba : 08              >            php         ;save status
26bb : 08              >            php         ;use stack to retrieve status
26bc : 68              >            pla
                       >            cmp_flag fc
26bd : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26c1 : 28              >            plp         ;restore status
                        
26c2 : ca                       dex
26c3 : ec0402                   cpx abs7f
                                tst_stat fzc
26c6 : 08              >            php         ;save status
26c7 : 08              >            php         ;use stack to retrieve status
26c8 : 68              >            pla
                       >            cmp_flag fzc
26c9 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26cd : 28              >            plp         ;restore status
                        
26ce : ca                       dex
26cf : ec0402                   cpx abs7f
                                tst_x $7e,fn
26d2 : 08              >            php         ;save flags
26d3 : 08              >            php
26d4 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
26d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26d8 : 68              >            pla         ;load status
                       >            cmp_flag fn
26d9 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26dd : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
26de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
26e0 : 48              >            pha         ;use stack to load status
26e1 : a280            >            ldx #$80     ;precharge index x
26e3 : 28              >            plp
                        
26e4 : ec0402                   cpx abs7f
                                tst_stat ~fnz
26e7 : 08              >            php         ;save status
26e8 : 08              >            php         ;use stack to retrieve status
26e9 : 68              >            pla
                       >            cmp_flag ~fnz
26ea : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26ee : 28              >            plp         ;restore status
                        
26ef : ca                       dex
26f0 : ec0402                   cpx abs7f
                                tst_stat ~fn
26f3 : 08              >            php         ;save status
26f4 : 08              >            php         ;use stack to retrieve status
26f5 : 68              >            pla
                       >            cmp_flag ~fn
26f6 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26fa : 28              >            plp         ;restore status
                        
26fb : ca                       dex
26fc : ec0402                   cpx abs7f
                                tst_x $7e,~fzc
26ff : 08              >            php         ;save flags
2700 : 08              >            php
2701 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
2703 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2705 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2706 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2708 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
270a : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
270b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
270d : 48              >            pha         ;use stack to load status
270e : a280            >            ldx #$80     ;precharge index x
2710 : 28              >            plp
                        
2711 : e07f                     cpx #$7f
                                tst_stat fc
2713 : 08              >            php         ;save status
2714 : 08              >            php         ;use stack to retrieve status
2715 : 68              >            pla
                       >            cmp_flag fc
2716 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2718 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
271a : 28              >            plp         ;restore status
                        
271b : ca                       dex
271c : e07f                     cpx #$7f
                                tst_stat fzc
271e : 08              >            php         ;save status
271f : 08              >            php         ;use stack to retrieve status
2720 : 68              >            pla
                       >            cmp_flag fzc
2721 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2723 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2725 : 28              >            plp         ;restore status
                        
2726 : ca                       dex
2727 : e07f                     cpx #$7f
                                tst_x $7e,fn
2729 : 08              >            php         ;save flags
272a : 08              >            php
272b : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
272d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
272f : 68              >            pla         ;load status
                       >            cmp_flag fn
2730 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2732 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2734 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
2735 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2737 : 48              >            pha         ;use stack to load status
2738 : a280            >            ldx #$80     ;precharge index x
273a : 28              >            plp
                        
273b : e07f                     cpx #$7f
                                tst_stat ~fnz
273d : 08              >            php         ;save status
273e : 08              >            php         ;use stack to retrieve status
273f : 68              >            pla
                       >            cmp_flag ~fnz
2740 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2742 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2744 : 28              >            plp         ;restore status
                        
2745 : ca                       dex
2746 : e07f                     cpx #$7f
                                tst_stat ~fn
2748 : 08              >            php         ;save status
2749 : 08              >            php         ;use stack to retrieve status
274a : 68              >            pla
                       >            cmp_flag ~fn
274b : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
274d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
274f : 28              >            plp         ;restore status
                        
2750 : ca                       dex
2751 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
2753 : 08              >            php         ;save flags
2754 : 08              >            php
2755 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
2757 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2759 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
275a : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
275c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
275e : 28              >            plp         ;restore status
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
275f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2761 : 48              >            pha         ;use stack to load status
2762 : a080            >            ldy #$80     ;precharge index y
2764 : 28              >            plp
                        
2765 : c40e                     cpy zp7f
                                tst_stat fc
2767 : 08              >            php         ;save status
2768 : 08              >            php         ;use stack to retrieve status
2769 : 68              >            pla
                       >            cmp_flag fc
276a : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
276c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
276e : 28              >            plp         ;restore status
                        
276f : 88                       dey
2770 : c40e                     cpy zp7f
                                tst_stat fzc
2772 : 08              >            php         ;save status
2773 : 08              >            php         ;use stack to retrieve status
2774 : 68              >            pla
                       >            cmp_flag fzc
2775 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2777 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2779 : 28              >            plp         ;restore status
                        
277a : 88                       dey
277b : c40e                     cpy zp7f
                                tst_y $7e,fn
277d : 08              >            php         ;save flags
277e : 08              >            php
277f : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2781 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2783 : 68              >            pla         ;load status
                       >            cmp_flag fn
2784 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2786 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2788 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
2789 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
278b : 48              >            pha         ;use stack to load status
278c : a080            >            ldy #$80     ;precharge index y
278e : 28              >            plp
                        
278f : c40e                     cpy zp7f
                                tst_stat ~fnz
2791 : 08              >            php         ;save status
2792 : 08              >            php         ;use stack to retrieve status
2793 : 68              >            pla
                       >            cmp_flag ~fnz
2794 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2796 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2798 : 28              >            plp         ;restore status
                        
2799 : 88                       dey
279a : c40e                     cpy zp7f
                                tst_stat ~fn
279c : 08              >            php         ;save status
279d : 08              >            php         ;use stack to retrieve status
279e : 68              >            pla
                       >            cmp_flag ~fn
279f : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27a3 : 28              >            plp         ;restore status
                        
27a4 : 88                       dey
27a5 : c40e                     cpy zp7f
                                tst_y $7e,~fzc
27a7 : 08              >            php         ;save flags
27a8 : 08              >            php
27a9 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
27ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27ad : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
27ae : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27b2 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
27b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
27b5 : 48              >            pha         ;use stack to load status
27b6 : a080            >            ldy #$80     ;precharge index y
27b8 : 28              >            plp
                        
27b9 : cc0402                   cpy abs7f
                                tst_stat fc
27bc : 08              >            php         ;save status
27bd : 08              >            php         ;use stack to retrieve status
27be : 68              >            pla
                       >            cmp_flag fc
27bf : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27c3 : 28              >            plp         ;restore status
                        
27c4 : 88                       dey
27c5 : cc0402                   cpy abs7f
                                tst_stat fzc
27c8 : 08              >            php         ;save status
27c9 : 08              >            php         ;use stack to retrieve status
27ca : 68              >            pla
                       >            cmp_flag fzc
27cb : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27cf : 28              >            plp         ;restore status
                        
27d0 : 88                       dey
27d1 : cc0402                   cpy abs7f
                                tst_y $7e,fn
27d4 : 08              >            php         ;save flags
27d5 : 08              >            php
27d6 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
27d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27da : 68              >            pla         ;load status
                       >            cmp_flag fn
27db : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27df : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
27e0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27e2 : 48              >            pha         ;use stack to load status
27e3 : a080            >            ldy #$80     ;precharge index y
27e5 : 28              >            plp
                        
27e6 : cc0402                   cpy abs7f
                                tst_stat ~fnz
27e9 : 08              >            php         ;save status
27ea : 08              >            php         ;use stack to retrieve status
27eb : 68              >            pla
                       >            cmp_flag ~fnz
27ec : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27f0 : 28              >            plp         ;restore status
                        
27f1 : 88                       dey
27f2 : cc0402                   cpy abs7f
                                tst_stat ~fn
27f5 : 08              >            php         ;save status
27f6 : 08              >            php         ;use stack to retrieve status
27f7 : 68              >            pla
                       >            cmp_flag ~fn
27f8 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27fc : 28              >            plp         ;restore status
                        
27fd : 88                       dey
27fe : cc0402                   cpy abs7f
                                tst_y $7e,~fzc
2801 : 08              >            php         ;save flags
2802 : 08              >            php
2803 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2805 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2807 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2808 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
280a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
280c : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
280d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
280f : 48              >            pha         ;use stack to load status
2810 : a080            >            ldy #$80     ;precharge index y
2812 : 28              >            plp
                        
2813 : c07f                     cpy #$7f
                                tst_stat fc
2815 : 08              >            php         ;save status
2816 : 08              >            php         ;use stack to retrieve status
2817 : 68              >            pla
                       >            cmp_flag fc
2818 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
281a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
281c : 28              >            plp         ;restore status
                        
281d : 88                       dey
281e : c07f                     cpy #$7f
                                tst_stat fzc
2820 : 08              >            php         ;save status
2821 : 08              >            php         ;use stack to retrieve status
2822 : 68              >            pla
                       >            cmp_flag fzc
2823 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2825 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2827 : 28              >            plp         ;restore status
                        
2828 : 88                       dey
2829 : c07f                     cpy #$7f
                                tst_y $7e,fn
282b : 08              >            php         ;save flags
282c : 08              >            php
282d : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
282f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2831 : 68              >            pla         ;load status
                       >            cmp_flag fn
2832 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2834 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2836 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
2837 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2839 : 48              >            pha         ;use stack to load status
283a : a080            >            ldy #$80     ;precharge index y
283c : 28              >            plp
                        
283d : c07f                     cpy #$7f
                                tst_stat ~fnz
283f : 08              >            php         ;save status
2840 : 08              >            php         ;use stack to retrieve status
2841 : 68              >            pla
                       >            cmp_flag ~fnz
2842 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2844 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2846 : 28              >            plp         ;restore status
                        
2847 : 88                       dey
2848 : c07f                     cpy #$7f
                                tst_stat ~fn
284a : 08              >            php         ;save status
284b : 08              >            php         ;use stack to retrieve status
284c : 68              >            pla
                       >            cmp_flag ~fn
284d : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
284f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2851 : 28              >            plp         ;restore status
                        
2852 : 88                       dey
2853 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
2855 : 08              >            php         ;save flags
2856 : 08              >            php
2857 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2859 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
285b : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
285c : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
285e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2860 : 28              >            plp         ;restore status
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
2861 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2863 : 48              >            pha         ;use stack to load status
2864 : a980            >            lda #$80     ;precharge accu
2866 : 28              >            plp
                        
2867 : c50e                     cmp zp7f
                                tst_a $80,fc
2869 : 08              >            php         ;save flags
286a : 08              >            php
286b : c980            >            cmp #$80     ;test result
                       >            trap_ne
286d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
286f : 68              >            pla         ;load status
                       >            cmp_flag fc
2870 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2872 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2874 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2875 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2877 : 48              >            pha         ;use stack to load status
2878 : a97f            >            lda #$7f     ;precharge accu
287a : 28              >            plp
                        
287b : c50e                     cmp zp7f
                                tst_a $7f,fzc
287d : 08              >            php         ;save flags
287e : 08              >            php
287f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2881 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2883 : 68              >            pla         ;load status
                       >            cmp_flag fzc
2884 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2886 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2888 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2889 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
288b : 48              >            pha         ;use stack to load status
288c : a97e            >            lda #$7e     ;precharge accu
288e : 28              >            plp
                        
288f : c50e                     cmp zp7f
                                tst_a $7e,fn
2891 : 08              >            php         ;save flags
2892 : 08              >            php
2893 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2895 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2897 : 68              >            pla         ;load status
                       >            cmp_flag fn
2898 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
289a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
289c : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
289d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
289f : 48              >            pha         ;use stack to load status
28a0 : a980            >            lda #$80     ;precharge accu
28a2 : 28              >            plp
                        
28a3 : c50e                     cmp zp7f
                                tst_a $80,~fnz
28a5 : 08              >            php         ;save flags
28a6 : 08              >            php
28a7 : c980            >            cmp #$80     ;test result
                       >            trap_ne
28a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28ab : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
28ac : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28b0 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
28b1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28b3 : 48              >            pha         ;use stack to load status
28b4 : a97f            >            lda #$7f     ;precharge accu
28b6 : 28              >            plp
                        
28b7 : c50e                     cmp zp7f
                                tst_a $7f,~fn
28b9 : 08              >            php         ;save flags
28ba : 08              >            php
28bb : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
28bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28bf : 68              >            pla         ;load status
                       >            cmp_flag ~fn
28c0 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28c4 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
28c5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28c7 : 48              >            pha         ;use stack to load status
28c8 : a97e            >            lda #$7e     ;precharge accu
28ca : 28              >            plp
                        
28cb : c50e                     cmp zp7f
                                tst_a $7e,~fzc
28cd : 08              >            php         ;save flags
28ce : 08              >            php
28cf : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
28d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28d3 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
28d4 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28d8 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
28d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28db : 48              >            pha         ;use stack to load status
28dc : a980            >            lda #$80     ;precharge accu
28de : 28              >            plp
                        
28df : cd0402                   cmp abs7f
                                tst_a $80,fc
28e2 : 08              >            php         ;save flags
28e3 : 08              >            php
28e4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
28e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28e8 : 68              >            pla         ;load status
                       >            cmp_flag fc
28e9 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28ed : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
28ee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28f0 : 48              >            pha         ;use stack to load status
28f1 : a97f            >            lda #$7f     ;precharge accu
28f3 : 28              >            plp
                        
28f4 : cd0402                   cmp abs7f
                                tst_a $7f,fzc
28f7 : 08              >            php         ;save flags
28f8 : 08              >            php
28f9 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
28fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28fd : 68              >            pla         ;load status
                       >            cmp_flag fzc
28fe : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2900 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2902 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2903 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2905 : 48              >            pha         ;use stack to load status
2906 : a97e            >            lda #$7e     ;precharge accu
2908 : 28              >            plp
                        
2909 : cd0402                   cmp abs7f
                                tst_a $7e,fn
290c : 08              >            php         ;save flags
290d : 08              >            php
290e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2910 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2912 : 68              >            pla         ;load status
                       >            cmp_flag fn
2913 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2915 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2917 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2918 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
291a : 48              >            pha         ;use stack to load status
291b : a980            >            lda #$80     ;precharge accu
291d : 28              >            plp
                        
291e : cd0402                   cmp abs7f
                                tst_a $80,~fnz
2921 : 08              >            php         ;save flags
2922 : 08              >            php
2923 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2925 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2927 : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
2928 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
292a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
292c : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
292d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
292f : 48              >            pha         ;use stack to load status
2930 : a97f            >            lda #$7f     ;precharge accu
2932 : 28              >            plp
                        
2933 : cd0402                   cmp abs7f
                                tst_a $7f,~fn
2936 : 08              >            php         ;save flags
2937 : 08              >            php
2938 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
293a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
293c : 68              >            pla         ;load status
                       >            cmp_flag ~fn
293d : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
293f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2941 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2942 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2944 : 48              >            pha         ;use stack to load status
2945 : a97e            >            lda #$7e     ;precharge accu
2947 : 28              >            plp
                        
2948 : cd0402                   cmp abs7f
                                tst_a $7e,~fzc
294b : 08              >            php         ;save flags
294c : 08              >            php
294d : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
294f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2951 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2952 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2954 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2956 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2957 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2959 : 48              >            pha         ;use stack to load status
295a : a980            >            lda #$80     ;precharge accu
295c : 28              >            plp
                        
295d : c97f                     cmp #$7f
                                tst_a $80,fc
295f : 08              >            php         ;save flags
2960 : 08              >            php
2961 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2963 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2965 : 68              >            pla         ;load status
                       >            cmp_flag fc
2966 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2968 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
296a : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
296b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
296d : 48              >            pha         ;use stack to load status
296e : a97f            >            lda #$7f     ;precharge accu
2970 : 28              >            plp
                        
2971 : c97f                     cmp #$7f
                                tst_a $7f,fzc
2973 : 08              >            php         ;save flags
2974 : 08              >            php
2975 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2977 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2979 : 68              >            pla         ;load status
                       >            cmp_flag fzc
297a : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
297c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
297e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
297f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2981 : 48              >            pha         ;use stack to load status
2982 : a97e            >            lda #$7e     ;precharge accu
2984 : 28              >            plp
                        
2985 : c97f                     cmp #$7f
                                tst_a $7e,fn
2987 : 08              >            php         ;save flags
2988 : 08              >            php
2989 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
298b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
298d : 68              >            pla         ;load status
                       >            cmp_flag fn
298e : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2990 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2992 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2993 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2995 : 48              >            pha         ;use stack to load status
2996 : a980            >            lda #$80     ;precharge accu
2998 : 28              >            plp
                        
2999 : c97f                     cmp #$7f
                                tst_a $80,~fnz
299b : 08              >            php         ;save flags
299c : 08              >            php
299d : c980            >            cmp #$80     ;test result
                       >            trap_ne
299f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29a1 : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
29a2 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29a6 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
29a7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29a9 : 48              >            pha         ;use stack to load status
29aa : a97f            >            lda #$7f     ;precharge accu
29ac : 28              >            plp
                        
29ad : c97f                     cmp #$7f
                                tst_a $7f,~fn
29af : 08              >            php         ;save flags
29b0 : 08              >            php
29b1 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
29b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29b5 : 68              >            pla         ;load status
                       >            cmp_flag ~fn
29b6 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29ba : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
29bb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29bd : 48              >            pha         ;use stack to load status
29be : a97e            >            lda #$7e     ;precharge accu
29c0 : 28              >            plp
                        
29c1 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
29c3 : 08              >            php         ;save flags
29c4 : 08              >            php
29c5 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
29c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29c9 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
29ca : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29ce : 28              >            plp         ;restore status
                        
                        
29cf : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
29d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29d3 : 48              >            pha         ;use stack to load status
29d4 : a980            >            lda #$80     ;precharge accu
29d6 : 28              >            plp
                        
29d7 : d50a                     cmp zp1,x
                                tst_a $80,fc
29d9 : 08              >            php         ;save flags
29da : 08              >            php
29db : c980            >            cmp #$80     ;test result
                       >            trap_ne
29dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29df : 68              >            pla         ;load status
                       >            cmp_flag fc
29e0 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29e4 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
29e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29e7 : 48              >            pha         ;use stack to load status
29e8 : a97f            >            lda #$7f     ;precharge accu
29ea : 28              >            plp
                        
29eb : d50a                     cmp zp1,x
                                tst_a $7f,fzc
29ed : 08              >            php         ;save flags
29ee : 08              >            php
29ef : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
29f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29f3 : 68              >            pla         ;load status
                       >            cmp_flag fzc
29f4 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29f8 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
29f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29fb : 48              >            pha         ;use stack to load status
29fc : a97e            >            lda #$7e     ;precharge accu
29fe : 28              >            plp
                        
29ff : d50a                     cmp zp1,x
                                tst_a $7e,fn
2a01 : 08              >            php         ;save flags
2a02 : 08              >            php
2a03 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2a05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a07 : 68              >            pla         ;load status
                       >            cmp_flag fn
2a08 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a0c : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2a0d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a0f : 48              >            pha         ;use stack to load status
2a10 : a980            >            lda #$80     ;precharge accu
2a12 : 28              >            plp
                        
2a13 : d50a                     cmp zp1,x
                                tst_a $80,~fnz
2a15 : 08              >            php         ;save flags
2a16 : 08              >            php
2a17 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2a19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a1b : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
2a1c : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a20 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2a21 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a23 : 48              >            pha         ;use stack to load status
2a24 : a97f            >            lda #$7f     ;precharge accu
2a26 : 28              >            plp
                        
2a27 : d50a                     cmp zp1,x
                                tst_a $7f,~fn
2a29 : 08              >            php         ;save flags
2a2a : 08              >            php
2a2b : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2a2d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a2f : 68              >            pla         ;load status
                       >            cmp_flag ~fn
2a30 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a34 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2a35 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a37 : 48              >            pha         ;use stack to load status
2a38 : a97e            >            lda #$7e     ;precharge accu
2a3a : 28              >            plp
                        
2a3b : d50a                     cmp zp1,x
                                tst_a $7e,~fzc
2a3d : 08              >            php         ;save flags
2a3e : 08              >            php
2a3f : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2a41 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a43 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2a44 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a48 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2a49 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a4b : 48              >            pha         ;use stack to load status
2a4c : a980            >            lda #$80     ;precharge accu
2a4e : 28              >            plp
                        
2a4f : dd0002                   cmp abs1,x
                                tst_a $80,fc
2a52 : 08              >            php         ;save flags
2a53 : 08              >            php
2a54 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2a56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a58 : 68              >            pla         ;load status
                       >            cmp_flag fc
2a59 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a5d : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2a5e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a60 : 48              >            pha         ;use stack to load status
2a61 : a97f            >            lda #$7f     ;precharge accu
2a63 : 28              >            plp
                        
2a64 : dd0002                   cmp abs1,x
                                tst_a $7f,fzc
2a67 : 08              >            php         ;save flags
2a68 : 08              >            php
2a69 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2a6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a6d : 68              >            pla         ;load status
                       >            cmp_flag fzc
2a6e : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a72 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2a73 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a75 : 48              >            pha         ;use stack to load status
2a76 : a97e            >            lda #$7e     ;precharge accu
2a78 : 28              >            plp
                        
2a79 : dd0002                   cmp abs1,x
                                tst_a $7e,fn
2a7c : 08              >            php         ;save flags
2a7d : 08              >            php
2a7e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2a80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a82 : 68              >            pla         ;load status
                       >            cmp_flag fn
2a83 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a85 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a87 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2a88 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a8a : 48              >            pha         ;use stack to load status
2a8b : a980            >            lda #$80     ;precharge accu
2a8d : 28              >            plp
                        
2a8e : dd0002                   cmp abs1,x
                                tst_a $80,~fnz
2a91 : 08              >            php         ;save flags
2a92 : 08              >            php
2a93 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2a95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a97 : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
2a98 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a9c : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2a9d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a9f : 48              >            pha         ;use stack to load status
2aa0 : a97f            >            lda #$7f     ;precharge accu
2aa2 : 28              >            plp
                        
2aa3 : dd0002                   cmp abs1,x
                                tst_a $7f,~fn
2aa6 : 08              >            php         ;save flags
2aa7 : 08              >            php
2aa8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2aaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2aac : 68              >            pla         ;load status
                       >            cmp_flag ~fn
2aad : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2aaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ab1 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2ab2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ab4 : 48              >            pha         ;use stack to load status
2ab5 : a97e            >            lda #$7e     ;precharge accu
2ab7 : 28              >            plp
                        
2ab8 : dd0002                   cmp abs1,x
                                tst_a $7e,~fzc
2abb : 08              >            php         ;save flags
2abc : 08              >            php
2abd : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2abf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ac1 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2ac2 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2ac4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ac6 : 28              >            plp         ;restore status
                        
                        
2ac7 : a004                     ldy #4          ;with indexing by Y
2ac9 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
2acb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2acd : 48              >            pha         ;use stack to load status
2ace : a980            >            lda #$80     ;precharge accu
2ad0 : 28              >            plp
                        
2ad1 : d90002                   cmp abs1,y
                                tst_a $80,fc
2ad4 : 08              >            php         ;save flags
2ad5 : 08              >            php
2ad6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2ad8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ada : 68              >            pla         ;load status
                       >            cmp_flag fc
2adb : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2add : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2adf : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2ae0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ae2 : 48              >            pha         ;use stack to load status
2ae3 : a97f            >            lda #$7f     ;precharge accu
2ae5 : 28              >            plp
                        
2ae6 : d90002                   cmp abs1,y
                                tst_a $7f,fzc
2ae9 : 08              >            php         ;save flags
2aea : 08              >            php
2aeb : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2aed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2aef : 68              >            pla         ;load status
                       >            cmp_flag fzc
2af0 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2af2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2af4 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2af5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2af7 : 48              >            pha         ;use stack to load status
2af8 : a97e            >            lda #$7e     ;precharge accu
2afa : 28              >            plp
                        
2afb : d90002                   cmp abs1,y
                                tst_a $7e,fn
2afe : 08              >            php         ;save flags
2aff : 08              >            php
2b00 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2b02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b04 : 68              >            pla         ;load status
                       >            cmp_flag fn
2b05 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b09 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2b0a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b0c : 48              >            pha         ;use stack to load status
2b0d : a980            >            lda #$80     ;precharge accu
2b0f : 28              >            plp
                        
2b10 : d90002                   cmp abs1,y
                                tst_a $80,~fnz
2b13 : 08              >            php         ;save flags
2b14 : 08              >            php
2b15 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2b17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b19 : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
2b1a : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b1e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2b1f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b21 : 48              >            pha         ;use stack to load status
2b22 : a97f            >            lda #$7f     ;precharge accu
2b24 : 28              >            plp
                        
2b25 : d90002                   cmp abs1,y
                                tst_a $7f,~fn
2b28 : 08              >            php         ;save flags
2b29 : 08              >            php
2b2a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2b2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b2e : 68              >            pla         ;load status
                       >            cmp_flag ~fn
2b2f : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b33 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2b34 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b36 : 48              >            pha         ;use stack to load status
2b37 : a97e            >            lda #$7e     ;precharge accu
2b39 : 28              >            plp
                        
2b3a : d90002                   cmp abs1,y
                                tst_a $7e,~fzc
2b3d : 08              >            php         ;save flags
2b3e : 08              >            php
2b3f : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2b41 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b43 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2b44 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b48 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2b49 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b4b : 48              >            pha         ;use stack to load status
2b4c : a980            >            lda #$80     ;precharge accu
2b4e : 28              >            plp
                        
2b4f : c120                     cmp (ind1,x)
                                tst_a $80,fc
2b51 : 08              >            php         ;save flags
2b52 : 08              >            php
2b53 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2b55 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b57 : 68              >            pla         ;load status
                       >            cmp_flag fc
2b58 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b5a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b5c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2b5d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b5f : 48              >            pha         ;use stack to load status
2b60 : a97f            >            lda #$7f     ;precharge accu
2b62 : 28              >            plp
                        
2b63 : c120                     cmp (ind1,x)
                                tst_a $7f,fzc
2b65 : 08              >            php         ;save flags
2b66 : 08              >            php
2b67 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2b69 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b6b : 68              >            pla         ;load status
                       >            cmp_flag fzc
2b6c : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b70 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2b71 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b73 : 48              >            pha         ;use stack to load status
2b74 : a97e            >            lda #$7e     ;precharge accu
2b76 : 28              >            plp
                        
2b77 : c120                     cmp (ind1,x)
                                tst_a $7e,fn
2b79 : 08              >            php         ;save flags
2b7a : 08              >            php
2b7b : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2b7d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b7f : 68              >            pla         ;load status
                       >            cmp_flag fn
2b80 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b84 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2b85 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b87 : 48              >            pha         ;use stack to load status
2b88 : a980            >            lda #$80     ;precharge accu
2b8a : 28              >            plp
                        
2b8b : c120                     cmp (ind1,x)
                                tst_a $80,~fnz
2b8d : 08              >            php         ;save flags
2b8e : 08              >            php
2b8f : c980            >            cmp #$80     ;test result
                       >            trap_ne
2b91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b93 : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
2b94 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2b96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b98 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2b99 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b9b : 48              >            pha         ;use stack to load status
2b9c : a97f            >            lda #$7f     ;precharge accu
2b9e : 28              >            plp
                        
2b9f : c120                     cmp (ind1,x)
                                tst_a $7f,~fn
2ba1 : 08              >            php         ;save flags
2ba2 : 08              >            php
2ba3 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2ba5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ba7 : 68              >            pla         ;load status
                       >            cmp_flag ~fn
2ba8 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2baa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bac : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2bad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2baf : 48              >            pha         ;use stack to load status
2bb0 : a97e            >            lda #$7e     ;precharge accu
2bb2 : 28              >            plp
                        
2bb3 : c120                     cmp (ind1,x)
                                tst_a $7e,~fzc
2bb5 : 08              >            php         ;save flags
2bb6 : 08              >            php
2bb7 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2bb9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bbb : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2bbc : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2bbe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bc0 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2bc1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bc3 : 48              >            pha         ;use stack to load status
2bc4 : a980            >            lda #$80     ;precharge accu
2bc6 : 28              >            plp
                        
2bc7 : d120                     cmp (ind1),y
                                tst_a $80,fc
2bc9 : 08              >            php         ;save flags
2bca : 08              >            php
2bcb : c980            >            cmp #$80     ;test result
                       >            trap_ne
2bcd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bcf : 68              >            pla         ;load status
                       >            cmp_flag fc
2bd0 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2bd2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bd4 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2bd5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bd7 : 48              >            pha         ;use stack to load status
2bd8 : a97f            >            lda #$7f     ;precharge accu
2bda : 28              >            plp
                        
2bdb : d120                     cmp (ind1),y
                                tst_a $7f,fzc
2bdd : 08              >            php         ;save flags
2bde : 08              >            php
2bdf : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2be1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2be3 : 68              >            pla         ;load status
                       >            cmp_flag fzc
2be4 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2be6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2be8 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2be9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2beb : 48              >            pha         ;use stack to load status
2bec : a97e            >            lda #$7e     ;precharge accu
2bee : 28              >            plp
                        
2bef : d120                     cmp (ind1),y
                                tst_a $7e,fn
2bf1 : 08              >            php         ;save flags
2bf2 : 08              >            php
2bf3 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2bf5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bf7 : 68              >            pla         ;load status
                       >            cmp_flag fn
2bf8 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2bfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bfc : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2bfd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2bff : 48              >            pha         ;use stack to load status
2c00 : a980            >            lda #$80     ;precharge accu
2c02 : 28              >            plp
                        
2c03 : d120                     cmp (ind1),y
                                tst_a $80,~fnz
2c05 : 08              >            php         ;save flags
2c06 : 08              >            php
2c07 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2c09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c0b : 68              >            pla         ;load status
                       >            cmp_flag ~fnz
2c0c : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2c0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c10 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2c11 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c13 : 48              >            pha         ;use stack to load status
2c14 : a97f            >            lda #$7f     ;precharge accu
2c16 : 28              >            plp
                        
2c17 : d120                     cmp (ind1),y
                                tst_a $7f,~fn
2c19 : 08              >            php         ;save flags
2c1a : 08              >            php
2c1b : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2c1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c1f : 68              >            pla         ;load status
                       >            cmp_flag ~fn
2c20 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2c22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c24 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2c25 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c27 : 48              >            pha         ;use stack to load status
2c28 : a97e            >            lda #$7e     ;precharge accu
2c2a : 28              >            plp
                        
2c2b : d120                     cmp (ind1),y
                                tst_a $7e,~fzc
2c2d : 08              >            php         ;save flags
2c2e : 08              >            php
2c2f : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2c31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c33 : 68              >            pla         ;load status
                       >            cmp_flag ~fzc
2c34 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2c36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c38 : 28              >            plp         ;restore status
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
2c39 : a203                     ldx #3
2c3b :                  tasl
                                set_ax zp1,0
                       >            load_flag 0
2c3b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c3d : 48              >            pha         ;use stack to load status
2c3e : b50a            >            lda zp1,x    ;precharge accu
2c40 : 28              >            plp
                        
2c41 : 0a                       asl a
                                tst_ax rASL,fASL,0
2c42 : 08              >            php         ;save flags
2c43 : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
2c46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c48 : 68              >            pla         ;load status
                       >            eor_flag 0
2c49 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2c4b : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2c4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c50 : ca                       dex
2c51 : 10e8                     bpl tasl
2c53 : a203                     ldx #3
2c55 :                  tasl1
                                set_ax zp1,$ff
                       >            load_flag $ff
2c55 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c57 : 48              >            pha         ;use stack to load status
2c58 : b50a            >            lda zp1,x    ;precharge accu
2c5a : 28              >            plp
                        
2c5b : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
2c5c : 08              >            php         ;save flags
2c5d : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
2c60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c63 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2c65 : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2c68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c6a : ca                       dex
2c6b : 10e8                     bpl tasl1
                        
2c6d : a203                     ldx #3
2c6f :                  tlsr
                                set_ax zp1,0
                       >            load_flag 0
2c6f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c71 : 48              >            pha         ;use stack to load status
2c72 : b50a            >            lda zp1,x    ;precharge accu
2c74 : 28              >            plp
                        
2c75 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
2c76 : 08              >            php         ;save flags
2c77 : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
2c7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c7c : 68              >            pla         ;load status
                       >            eor_flag 0
2c7d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2c7f : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2c82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c84 : ca                       dex
2c85 : 10e8                     bpl tlsr
2c87 : a203                     ldx #3
2c89 :                  tlsr1
                                set_ax zp1,$ff
                       >            load_flag $ff
2c89 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c8b : 48              >            pha         ;use stack to load status
2c8c : b50a            >            lda zp1,x    ;precharge accu
2c8e : 28              >            plp
                        
2c8f : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
2c90 : 08              >            php         ;save flags
2c91 : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
2c94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c96 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c97 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2c99 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2c9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c9e : ca                       dex
2c9f : 10e8                     bpl tlsr1
                        
2ca1 : a203                     ldx #3
2ca3 :                  trol
                                set_ax zp1,0
                       >            load_flag 0
2ca3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ca5 : 48              >            pha         ;use stack to load status
2ca6 : b50a            >            lda zp1,x    ;precharge accu
2ca8 : 28              >            plp
                        
2ca9 : 2a                       rol a
                                tst_ax rROL,fROL,0
2caa : 08              >            php         ;save flags
2cab : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
2cae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cb0 : 68              >            pla         ;load status
                       >            eor_flag 0
2cb1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2cb3 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2cb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cb8 : ca                       dex
2cb9 : 10e8                     bpl trol
2cbb : a203                     ldx #3
2cbd :                  trol1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
2cbd : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2cbf : 48              >            pha         ;use stack to load status
2cc0 : b50a            >            lda zp1,x    ;precharge accu
2cc2 : 28              >            plp
                        
2cc3 : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
2cc4 : 08              >            php         ;save flags
2cc5 : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
2cc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ccb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2ccd : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2cd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cd2 : ca                       dex
2cd3 : 10e8                     bpl trol1
                        
2cd5 : a203                     ldx #3
2cd7 :                  trolc
                                set_ax zp1,fc
                       >            load_flag fc
2cd7 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2cd9 : 48              >            pha         ;use stack to load status
2cda : b50a            >            lda zp1,x    ;precharge accu
2cdc : 28              >            plp
                        
2cdd : 2a                       rol a
                                tst_ax rROLc,fROLc,0
2cde : 08              >            php         ;save flags
2cdf : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
2ce2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ce4 : 68              >            pla         ;load status
                       >            eor_flag 0
2ce5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2ce7 : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
2cea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cec : ca                       dex
2ced : 10e8                     bpl trolc
2cef : a203                     ldx #3
2cf1 :                  trolc1
                                set_ax zp1,$ff
                       >            load_flag $ff
2cf1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2cf3 : 48              >            pha         ;use stack to load status
2cf4 : b50a            >            lda zp1,x    ;precharge accu
2cf6 : 28              >            plp
                        
2cf7 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
2cf8 : 08              >            php         ;save flags
2cf9 : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
2cfc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cfe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2cff : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2d01 : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
2d04 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d06 : ca                       dex
2d07 : 10e8                     bpl trolc1
                        
2d09 : a203                     ldx #3
2d0b :                  tror
                                set_ax zp1,0
                       >            load_flag 0
2d0b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d0d : 48              >            pha         ;use stack to load status
2d0e : b50a            >            lda zp1,x    ;precharge accu
2d10 : 28              >            plp
                        
2d11 : 6a                       ror a
                                tst_ax rROR,fROR,0
2d12 : 08              >            php         ;save flags
2d13 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
2d16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d18 : 68              >            pla         ;load status
                       >            eor_flag 0
2d19 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2d1b : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2d1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d20 : ca                       dex
2d21 : 10e8                     bpl tror
2d23 : a203                     ldx #3
2d25 :                  tror1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
2d25 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2d27 : 48              >            pha         ;use stack to load status
2d28 : b50a            >            lda zp1,x    ;precharge accu
2d2a : 28              >            plp
                        
2d2b : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
2d2c : 08              >            php         ;save flags
2d2d : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
2d30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d32 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2d33 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2d35 : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2d38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d3a : ca                       dex
2d3b : 10e8                     bpl tror1
                        
2d3d : a203                     ldx #3
2d3f :                  trorc
                                set_ax zp1,fc
                       >            load_flag fc
2d3f : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2d41 : 48              >            pha         ;use stack to load status
2d42 : b50a            >            lda zp1,x    ;precharge accu
2d44 : 28              >            plp
                        
2d45 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
2d46 : 08              >            php         ;save flags
2d47 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
2d4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d4c : 68              >            pla         ;load status
                       >            eor_flag 0
2d4d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2d4f : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2d52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d54 : ca                       dex
2d55 : 10e8                     bpl trorc
2d57 : a203                     ldx #3
2d59 :                  trorc1
                                set_ax zp1,$ff
                       >            load_flag $ff
2d59 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d5b : 48              >            pha         ;use stack to load status
2d5c : b50a            >            lda zp1,x    ;precharge accu
2d5e : 28              >            plp
                        
2d5f : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
2d60 : 08              >            php         ;save flags
2d61 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
2d64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d66 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2d67 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2d69 : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2d6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d6e : ca                       dex
2d6f : 10e8                     bpl trorc1
                        
                        ; shifts - zeropage
2d71 : a203                     ldx #3
2d73 :                  tasl2
                                set_z zp1,0
                       >            load_flag 0
2d73 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d75 : 48              >            pha         ;use stack to load status
2d76 : b50a            >            lda zp1,x    ;load to zeropage
2d78 : 850f            >            sta zpt
2d7a : 28              >            plp
                        
2d7b : 060f                     asl zpt
                                tst_z rASL,fASL,0
2d7d : 08              >            php         ;save flags
2d7e : a50f            >            lda zpt
2d80 : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
2d83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d85 : 68              >            pla         ;load status
                       >            eor_flag 0
2d86 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2d88 : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2d8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d8d : ca                       dex
2d8e : 10e3                     bpl tasl2
2d90 : a203                     ldx #3
2d92 :                  tasl3
                                set_z zp1,$ff
                       >            load_flag $ff
2d92 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d94 : 48              >            pha         ;use stack to load status
2d95 : b50a            >            lda zp1,x    ;load to zeropage
2d97 : 850f            >            sta zpt
2d99 : 28              >            plp
                        
2d9a : 060f                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
2d9c : 08              >            php         ;save flags
2d9d : a50f            >            lda zpt
2d9f : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
2da2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2da4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2da5 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2da7 : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2daa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2dac : ca                       dex
2dad : 10e3                     bpl tasl3
                        
2daf : a203                     ldx #3
2db1 :                  tlsr2
                                set_z zp1,0
                       >            load_flag 0
2db1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2db3 : 48              >            pha         ;use stack to load status
2db4 : b50a            >            lda zp1,x    ;load to zeropage
2db6 : 850f            >            sta zpt
2db8 : 28              >            plp
                        
2db9 : 460f                     lsr zpt
                                tst_z rLSR,fLSR,0
2dbb : 08              >            php         ;save flags
2dbc : a50f            >            lda zpt
2dbe : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
2dc1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2dc3 : 68              >            pla         ;load status
                       >            eor_flag 0
2dc4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2dc6 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2dc9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2dcb : ca                       dex
2dcc : 10e3                     bpl tlsr2
2dce : a203                     ldx #3
2dd0 :                  tlsr3
                                set_z zp1,$ff
                       >            load_flag $ff
2dd0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2dd2 : 48              >            pha         ;use stack to load status
2dd3 : b50a            >            lda zp1,x    ;load to zeropage
2dd5 : 850f            >            sta zpt
2dd7 : 28              >            plp
                        
2dd8 : 460f                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
2dda : 08              >            php         ;save flags
2ddb : a50f            >            lda zpt
2ddd : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
2de0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2de2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2de3 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2de5 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2de8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2dea : ca                       dex
2deb : 10e3                     bpl tlsr3
                        
2ded : a203                     ldx #3
2def :                  trol2
                                set_z zp1,0
                       >            load_flag 0
2def : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2df1 : 48              >            pha         ;use stack to load status
2df2 : b50a            >            lda zp1,x    ;load to zeropage
2df4 : 850f            >            sta zpt
2df6 : 28              >            plp
                        
2df7 : 260f                     rol zpt
                                tst_z rROL,fROL,0
2df9 : 08              >            php         ;save flags
2dfa : a50f            >            lda zpt
2dfc : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
2dff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e01 : 68              >            pla         ;load status
                       >            eor_flag 0
2e02 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2e04 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2e07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e09 : ca                       dex
2e0a : 10e3                     bpl trol2
2e0c : a203                     ldx #3
2e0e :                  trol3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
2e0e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2e10 : 48              >            pha         ;use stack to load status
2e11 : b50a            >            lda zp1,x    ;load to zeropage
2e13 : 850f            >            sta zpt
2e15 : 28              >            plp
                        
2e16 : 260f                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
2e18 : 08              >            php         ;save flags
2e19 : a50f            >            lda zpt
2e1b : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
2e1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e20 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2e21 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2e23 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2e26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e28 : ca                       dex
2e29 : 10e3                     bpl trol3
                        
2e2b : a203                     ldx #3
2e2d :                  trolc2
                                set_z zp1,fc
                       >            load_flag fc
2e2d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2e2f : 48              >            pha         ;use stack to load status
2e30 : b50a            >            lda zp1,x    ;load to zeropage
2e32 : 850f            >            sta zpt
2e34 : 28              >            plp
                        
2e35 : 260f                     rol zpt
                                tst_z rROLc,fROLc,0
2e37 : 08              >            php         ;save flags
2e38 : a50f            >            lda zpt
2e3a : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
2e3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e3f : 68              >            pla         ;load status
                       >            eor_flag 0
2e40 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2e42 : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2e45 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e47 : ca                       dex
2e48 : 10e3                     bpl trolc2
2e4a : a203                     ldx #3
2e4c :                  trolc3
                                set_z zp1,$ff
                       >            load_flag $ff
2e4c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e4e : 48              >            pha         ;use stack to load status
2e4f : b50a            >            lda zp1,x    ;load to zeropage
2e51 : 850f            >            sta zpt
2e53 : 28              >            plp
                        
2e54 : 260f                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
2e56 : 08              >            php         ;save flags
2e57 : a50f            >            lda zpt
2e59 : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
2e5c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e5e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2e5f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2e61 : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2e64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e66 : ca                       dex
2e67 : 10e3                     bpl trolc3
                        
2e69 : a203                     ldx #3
2e6b :                  tror2
                                set_z zp1,0
                       >            load_flag 0
2e6b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e6d : 48              >            pha         ;use stack to load status
2e6e : b50a            >            lda zp1,x    ;load to zeropage
2e70 : 850f            >            sta zpt
2e72 : 28              >            plp
                        
2e73 : 660f                     ror zpt
                                tst_z rROR,fROR,0
2e75 : 08              >            php         ;save flags
2e76 : a50f            >            lda zpt
2e78 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
2e7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e7d : 68              >            pla         ;load status
                       >            eor_flag 0
2e7e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2e80 : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
2e83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e85 : ca                       dex
2e86 : 10e3                     bpl tror2
2e88 : a203                     ldx #3
2e8a :                  tror3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
2e8a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2e8c : 48              >            pha         ;use stack to load status
2e8d : b50a            >            lda zp1,x    ;load to zeropage
2e8f : 850f            >            sta zpt
2e91 : 28              >            plp
                        
2e92 : 660f                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
2e94 : 08              >            php         ;save flags
2e95 : a50f            >            lda zpt
2e97 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
2e9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e9c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2e9d : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2e9f : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
2ea2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ea4 : ca                       dex
2ea5 : 10e3                     bpl tror3
                        
2ea7 : a203                     ldx #3
2ea9 :                  trorc2
                                set_z zp1,fc
                       >            load_flag fc
2ea9 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2eab : 48              >            pha         ;use stack to load status
2eac : b50a            >            lda zp1,x    ;load to zeropage
2eae : 850f            >            sta zpt
2eb0 : 28              >            plp
                        
2eb1 : 660f                     ror zpt
                                tst_z rRORc,fRORc,0
2eb3 : 08              >            php         ;save flags
2eb4 : a50f            >            lda zpt
2eb6 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
2eb9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ebb : 68              >            pla         ;load status
                       >            eor_flag 0
2ebc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2ebe : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2ec1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ec3 : ca                       dex
2ec4 : 10e3                     bpl trorc2
2ec6 : a203                     ldx #3
2ec8 :                  trorc3
                                set_z zp1,$ff
                       >            load_flag $ff
2ec8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2eca : 48              >            pha         ;use stack to load status
2ecb : b50a            >            lda zp1,x    ;load to zeropage
2ecd : 850f            >            sta zpt
2ecf : 28              >            plp
                        
2ed0 : 660f                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
2ed2 : 08              >            php         ;save flags
2ed3 : a50f            >            lda zpt
2ed5 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
2ed8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2eda : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2edb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2edd : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2ee0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ee2 : ca                       dex
2ee3 : 10e3                     bpl trorc3
                        
                        ; shifts - absolute
2ee5 : a203                     ldx #3
2ee7 :                  tasl4
                                set_abs zp1,0
                       >            load_flag 0
2ee7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ee9 : 48              >            pha         ;use stack to load status
2eea : b50a            >            lda zp1,x    ;load to memory
2eec : 8d3302          >            sta abst
2eef : 28              >            plp
                        
2ef0 : 0e3302                   asl abst
                                tst_abs rASL,fASL,0
2ef3 : 08              >            php         ;save flags
2ef4 : ad3302          >            lda abst
2ef7 : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
2efa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2efc : 68              >            pla         ;load status
                       >            eor_flag 0
2efd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2eff : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2f02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f04 : ca                       dex
2f05 : 10e0                     bpl tasl4
2f07 : a203                     ldx #3
2f09 :                  tasl5
                                set_abs zp1,$ff
                       >            load_flag $ff
2f09 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f0b : 48              >            pha         ;use stack to load status
2f0c : b50a            >            lda zp1,x    ;load to memory
2f0e : 8d3302          >            sta abst
2f11 : 28              >            plp
                        
2f12 : 0e3302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
2f15 : 08              >            php         ;save flags
2f16 : ad3302          >            lda abst
2f19 : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
2f1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f1e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2f1f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2f21 : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2f24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f26 : ca                       dex
2f27 : 10e0                     bpl tasl5
                        
2f29 : a203                     ldx #3
2f2b :                  tlsr4
                                set_abs zp1,0
                       >            load_flag 0
2f2b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f2d : 48              >            pha         ;use stack to load status
2f2e : b50a            >            lda zp1,x    ;load to memory
2f30 : 8d3302          >            sta abst
2f33 : 28              >            plp
                        
2f34 : 4e3302                   lsr abst
                                tst_abs rLSR,fLSR,0
2f37 : 08              >            php         ;save flags
2f38 : ad3302          >            lda abst
2f3b : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
2f3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f40 : 68              >            pla         ;load status
                       >            eor_flag 0
2f41 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2f43 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2f46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f48 : ca                       dex
2f49 : 10e0                     bpl tlsr4
2f4b : a203                     ldx #3
2f4d :                  tlsr5
                                set_abs zp1,$ff
                       >            load_flag $ff
2f4d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f4f : 48              >            pha         ;use stack to load status
2f50 : b50a            >            lda zp1,x    ;load to memory
2f52 : 8d3302          >            sta abst
2f55 : 28              >            plp
                        
2f56 : 4e3302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
2f59 : 08              >            php         ;save flags
2f5a : ad3302          >            lda abst
2f5d : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
2f60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2f63 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2f65 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2f68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f6a : ca                       dex
2f6b : 10e0                     bpl tlsr5
                        
2f6d : a203                     ldx #3
2f6f :                  trol4
                                set_abs zp1,0
                       >            load_flag 0
2f6f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f71 : 48              >            pha         ;use stack to load status
2f72 : b50a            >            lda zp1,x    ;load to memory
2f74 : 8d3302          >            sta abst
2f77 : 28              >            plp
                        
2f78 : 2e3302                   rol abst
                                tst_abs rROL,fROL,0
2f7b : 08              >            php         ;save flags
2f7c : ad3302          >            lda abst
2f7f : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
2f82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f84 : 68              >            pla         ;load status
                       >            eor_flag 0
2f85 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2f87 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2f8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f8c : ca                       dex
2f8d : 10e0                     bpl trol4
2f8f : a203                     ldx #3
2f91 :                  trol5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
2f91 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2f93 : 48              >            pha         ;use stack to load status
2f94 : b50a            >            lda zp1,x    ;load to memory
2f96 : 8d3302          >            sta abst
2f99 : 28              >            plp
                        
2f9a : 2e3302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
2f9d : 08              >            php         ;save flags
2f9e : ad3302          >            lda abst
2fa1 : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
2fa4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fa6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2fa7 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2fa9 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2fac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fae : ca                       dex
2faf : 10e0                     bpl trol5
                        
2fb1 : a203                     ldx #3
2fb3 :                  trolc4
                                set_abs zp1,fc
                       >            load_flag fc
2fb3 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2fb5 : 48              >            pha         ;use stack to load status
2fb6 : b50a            >            lda zp1,x    ;load to memory
2fb8 : 8d3302          >            sta abst
2fbb : 28              >            plp
                        
2fbc : 2e3302                   rol abst
                                tst_abs rROLc,fROLc,0
2fbf : 08              >            php         ;save flags
2fc0 : ad3302          >            lda abst
2fc3 : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
2fc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fc8 : 68              >            pla         ;load status
                       >            eor_flag 0
2fc9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2fcb : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2fce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fd0 : ca                       dex
2fd1 : 10e0                     bpl trolc4
2fd3 : a203                     ldx #3
2fd5 :                  trolc5
                                set_abs zp1,$ff
                       >            load_flag $ff
2fd5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2fd7 : 48              >            pha         ;use stack to load status
2fd8 : b50a            >            lda zp1,x    ;load to memory
2fda : 8d3302          >            sta abst
2fdd : 28              >            plp
                        
2fde : 2e3302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
2fe1 : 08              >            php         ;save flags
2fe2 : ad3302          >            lda abst
2fe5 : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
2fe8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fea : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2feb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2fed : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2ff0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ff2 : ca                       dex
2ff3 : 10e0                     bpl trolc5
                        
2ff5 : a203                     ldx #3
2ff7 :                  tror4
                                set_abs zp1,0
                       >            load_flag 0
2ff7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ff9 : 48              >            pha         ;use stack to load status
2ffa : b50a            >            lda zp1,x    ;load to memory
2ffc : 8d3302          >            sta abst
2fff : 28              >            plp
                        
3000 : 6e3302                   ror abst
                                tst_abs rROR,fROR,0
3003 : 08              >            php         ;save flags
3004 : ad3302          >            lda abst
3007 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
300a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
300c : 68              >            pla         ;load status
                       >            eor_flag 0
300d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
300f : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
3012 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3014 : ca                       dex
3015 : 10e0                     bpl tror4
3017 : a203                     ldx #3
3019 :                  tror5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
3019 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
301b : 48              >            pha         ;use stack to load status
301c : b50a            >            lda zp1,x    ;load to memory
301e : 8d3302          >            sta abst
3021 : 28              >            plp
                        
3022 : 6e3302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
3025 : 08              >            php         ;save flags
3026 : ad3302          >            lda abst
3029 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
302c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
302e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
302f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3031 : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
3034 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3036 : ca                       dex
3037 : 10e0                     bpl tror5
                        
3039 : a203                     ldx #3
303b :                  trorc4
                                set_abs zp1,fc
                       >            load_flag fc
303b : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
303d : 48              >            pha         ;use stack to load status
303e : b50a            >            lda zp1,x    ;load to memory
3040 : 8d3302          >            sta abst
3043 : 28              >            plp
                        
3044 : 6e3302                   ror abst
                                tst_abs rRORc,fRORc,0
3047 : 08              >            php         ;save flags
3048 : ad3302          >            lda abst
304b : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
304e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3050 : 68              >            pla         ;load status
                       >            eor_flag 0
3051 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3053 : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3056 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3058 : ca                       dex
3059 : 10e0                     bpl trorc4
305b : a203                     ldx #3
305d :                  trorc5
                                set_abs zp1,$ff
                       >            load_flag $ff
305d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
305f : 48              >            pha         ;use stack to load status
3060 : b50a            >            lda zp1,x    ;load to memory
3062 : 8d3302          >            sta abst
3065 : 28              >            plp
                        
3066 : 6e3302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
3069 : 08              >            php         ;save flags
306a : ad3302          >            lda abst
306d : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
3070 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3072 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3073 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3075 : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3078 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
307a : ca                       dex
307b : 10e0                     bpl trorc5
                        
                        ; shifts - zp indexed
307d : a203                     ldx #3
307f :                  tasl6
                                set_zx zp1,0
                       >            load_flag 0
307f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3081 : 48              >            pha         ;use stack to load status
3082 : b50a            >            lda zp1,x    ;load to indexed zeropage
3084 : 950f            >            sta zpt,x
3086 : 28              >            plp
                        
3087 : 160f                     asl zpt,x
                                tst_zx rASL,fASL,0
3089 : 08              >            php         ;save flags
308a : b50f            >            lda zpt,x
308c : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
308f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3091 : 68              >            pla         ;load status
                       >            eor_flag 0
3092 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3094 : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
3097 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3099 : ca                       dex
309a : 10e3                     bpl tasl6
309c : a203                     ldx #3
309e :                  tasl7
                                set_zx zp1,$ff
                       >            load_flag $ff
309e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30a0 : 48              >            pha         ;use stack to load status
30a1 : b50a            >            lda zp1,x    ;load to indexed zeropage
30a3 : 950f            >            sta zpt,x
30a5 : 28              >            plp
                        
30a6 : 160f                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
30a8 : 08              >            php         ;save flags
30a9 : b50f            >            lda zpt,x
30ab : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
30ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30b0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
30b1 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
30b3 : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
30b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30b8 : ca                       dex
30b9 : 10e3                     bpl tasl7
                        
30bb : a203                     ldx #3
30bd :                  tlsr6
                                set_zx zp1,0
                       >            load_flag 0
30bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30bf : 48              >            pha         ;use stack to load status
30c0 : b50a            >            lda zp1,x    ;load to indexed zeropage
30c2 : 950f            >            sta zpt,x
30c4 : 28              >            plp
                        
30c5 : 560f                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
30c7 : 08              >            php         ;save flags
30c8 : b50f            >            lda zpt,x
30ca : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
30cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30cf : 68              >            pla         ;load status
                       >            eor_flag 0
30d0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
30d2 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
30d5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30d7 : ca                       dex
30d8 : 10e3                     bpl tlsr6
30da : a203                     ldx #3
30dc :                  tlsr7
                                set_zx zp1,$ff
                       >            load_flag $ff
30dc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30de : 48              >            pha         ;use stack to load status
30df : b50a            >            lda zp1,x    ;load to indexed zeropage
30e1 : 950f            >            sta zpt,x
30e3 : 28              >            plp
                        
30e4 : 560f                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
30e6 : 08              >            php         ;save flags
30e7 : b50f            >            lda zpt,x
30e9 : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
30ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30ee : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
30ef : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
30f1 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
30f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30f6 : ca                       dex
30f7 : 10e3                     bpl tlsr7
                        
30f9 : a203                     ldx #3
30fb :                  trol6
                                set_zx zp1,0
                       >            load_flag 0
30fb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30fd : 48              >            pha         ;use stack to load status
30fe : b50a            >            lda zp1,x    ;load to indexed zeropage
3100 : 950f            >            sta zpt,x
3102 : 28              >            plp
                        
3103 : 360f                     rol zpt,x
                                tst_zx rROL,fROL,0
3105 : 08              >            php         ;save flags
3106 : b50f            >            lda zpt,x
3108 : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
310b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
310d : 68              >            pla         ;load status
                       >            eor_flag 0
310e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3110 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
3113 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3115 : ca                       dex
3116 : 10e3                     bpl trol6
3118 : a203                     ldx #3
311a :                  trol7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
311a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
311c : 48              >            pha         ;use stack to load status
311d : b50a            >            lda zp1,x    ;load to indexed zeropage
311f : 950f            >            sta zpt,x
3121 : 28              >            plp
                        
3122 : 360f                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
3124 : 08              >            php         ;save flags
3125 : b50f            >            lda zpt,x
3127 : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
312a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
312c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
312d : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
312f : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
3132 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3134 : ca                       dex
3135 : 10e3                     bpl trol7
                        
3137 : a203                     ldx #3
3139 :                  trolc6
                                set_zx zp1,fc
                       >            load_flag fc
3139 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
313b : 48              >            pha         ;use stack to load status
313c : b50a            >            lda zp1,x    ;load to indexed zeropage
313e : 950f            >            sta zpt,x
3140 : 28              >            plp
                        
3141 : 360f                     rol zpt,x
                                tst_zx rROLc,fROLc,0
3143 : 08              >            php         ;save flags
3144 : b50f            >            lda zpt,x
3146 : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
3149 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
314b : 68              >            pla         ;load status
                       >            eor_flag 0
314c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
314e : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
3151 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3153 : ca                       dex
3154 : 10e3                     bpl trolc6
3156 : a203                     ldx #3
3158 :                  trolc7
                                set_zx zp1,$ff
                       >            load_flag $ff
3158 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
315a : 48              >            pha         ;use stack to load status
315b : b50a            >            lda zp1,x    ;load to indexed zeropage
315d : 950f            >            sta zpt,x
315f : 28              >            plp
                        
3160 : 360f                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
3162 : 08              >            php         ;save flags
3163 : b50f            >            lda zpt,x
3165 : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
3168 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
316a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
316b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
316d : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
3170 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3172 : ca                       dex
3173 : 10e3                     bpl trolc7
                        
3175 : a203                     ldx #3
3177 :                  tror6
                                set_zx zp1,0
                       >            load_flag 0
3177 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3179 : 48              >            pha         ;use stack to load status
317a : b50a            >            lda zp1,x    ;load to indexed zeropage
317c : 950f            >            sta zpt,x
317e : 28              >            plp
                        
317f : 760f                     ror zpt,x
                                tst_zx rROR,fROR,0
3181 : 08              >            php         ;save flags
3182 : b50f            >            lda zpt,x
3184 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
3187 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3189 : 68              >            pla         ;load status
                       >            eor_flag 0
318a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
318c : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
318f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3191 : ca                       dex
3192 : 10e3                     bpl tror6
3194 : a203                     ldx #3
3196 :                  tror7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
3196 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
3198 : 48              >            pha         ;use stack to load status
3199 : b50a            >            lda zp1,x    ;load to indexed zeropage
319b : 950f            >            sta zpt,x
319d : 28              >            plp
                        
319e : 760f                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
31a0 : 08              >            php         ;save flags
31a1 : b50f            >            lda zpt,x
31a3 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
31a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31a8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
31a9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
31ab : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
31ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31b0 : ca                       dex
31b1 : 10e3                     bpl tror7
                        
31b3 : a203                     ldx #3
31b5 :                  trorc6
                                set_zx zp1,fc
                       >            load_flag fc
31b5 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
31b7 : 48              >            pha         ;use stack to load status
31b8 : b50a            >            lda zp1,x    ;load to indexed zeropage
31ba : 950f            >            sta zpt,x
31bc : 28              >            plp
                        
31bd : 760f                     ror zpt,x
                                tst_zx rRORc,fRORc,0
31bf : 08              >            php         ;save flags
31c0 : b50f            >            lda zpt,x
31c2 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
31c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31c7 : 68              >            pla         ;load status
                       >            eor_flag 0
31c8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
31ca : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
31cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31cf : ca                       dex
31d0 : 10e3                     bpl trorc6
31d2 : a203                     ldx #3
31d4 :                  trorc7
                                set_zx zp1,$ff
                       >            load_flag $ff
31d4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31d6 : 48              >            pha         ;use stack to load status
31d7 : b50a            >            lda zp1,x    ;load to indexed zeropage
31d9 : 950f            >            sta zpt,x
31db : 28              >            plp
                        
31dc : 760f                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
31de : 08              >            php         ;save flags
31df : b50f            >            lda zpt,x
31e1 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
31e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31e6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
31e7 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
31e9 : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
31ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31ee : ca                       dex
31ef : 10e3                     bpl trorc7
                                
                        ; shifts - abs indexed
31f1 : a203                     ldx #3
31f3 :                  tasl8
                                set_absx zp1,0
                       >            load_flag 0
31f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
31f5 : 48              >            pha         ;use stack to load status
31f6 : b50a            >            lda zp1,x    ;load to indexed memory
31f8 : 9d3302          >            sta abst,x
31fb : 28              >            plp
                        
31fc : 1e3302                   asl abst,x
                                tst_absx rASL,fASL,0
31ff : 08              >            php         ;save flags
3200 : bd3302          >            lda abst,x
3203 : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
3206 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3208 : 68              >            pla         ;load status
                       >            eor_flag 0
3209 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
320b : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
320e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3210 : ca                       dex
3211 : 10e0                     bpl tasl8
3213 : a203                     ldx #3
3215 :                  tasl9
                                set_absx zp1,$ff
                       >            load_flag $ff
3215 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3217 : 48              >            pha         ;use stack to load status
3218 : b50a            >            lda zp1,x    ;load to indexed memory
321a : 9d3302          >            sta abst,x
321d : 28              >            plp
                        
321e : 1e3302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
3221 : 08              >            php         ;save flags
3222 : bd3302          >            lda abst,x
3225 : dd0902          >            cmp rASL,x    ;test result
                       >            trap_ne
3228 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
322a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
322b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
322d : dd1902          >            cmp fASL,x    ;test flags
                       >            trap_ne
3230 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3232 : ca                       dex
3233 : 10e0                     bpl tasl9
                        
3235 : a203                     ldx #3
3237 :                  tlsr8
                                set_absx zp1,0
                       >            load_flag 0
3237 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3239 : 48              >            pha         ;use stack to load status
323a : b50a            >            lda zp1,x    ;load to indexed memory
323c : 9d3302          >            sta abst,x
323f : 28              >            plp
                        
3240 : 5e3302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
3243 : 08              >            php         ;save flags
3244 : bd3302          >            lda abst,x
3247 : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
324a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
324c : 68              >            pla         ;load status
                       >            eor_flag 0
324d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
324f : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
3252 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3254 : ca                       dex
3255 : 10e0                     bpl tlsr8
3257 : a203                     ldx #3
3259 :                  tlsr9
                                set_absx zp1,$ff
                       >            load_flag $ff
3259 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
325b : 48              >            pha         ;use stack to load status
325c : b50a            >            lda zp1,x    ;load to indexed memory
325e : 9d3302          >            sta abst,x
3261 : 28              >            plp
                        
3262 : 5e3302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
3265 : 08              >            php         ;save flags
3266 : bd3302          >            lda abst,x
3269 : dd1102          >            cmp rLSR,x    ;test result
                       >            trap_ne
326c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
326e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
326f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3271 : dd2102          >            cmp fLSR,x    ;test flags
                       >            trap_ne
3274 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3276 : ca                       dex
3277 : 10e0                     bpl tlsr9
                        
3279 : a203                     ldx #3
327b :                  trol8
                                set_absx zp1,0
                       >            load_flag 0
327b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
327d : 48              >            pha         ;use stack to load status
327e : b50a            >            lda zp1,x    ;load to indexed memory
3280 : 9d3302          >            sta abst,x
3283 : 28              >            plp
                        
3284 : 3e3302                   rol abst,x
                                tst_absx rROL,fROL,0
3287 : 08              >            php         ;save flags
3288 : bd3302          >            lda abst,x
328b : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
328e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3290 : 68              >            pla         ;load status
                       >            eor_flag 0
3291 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3293 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
3296 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3298 : ca                       dex
3299 : 10e0                     bpl trol8
329b : a203                     ldx #3
329d :                  trol9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
329d : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
329f : 48              >            pha         ;use stack to load status
32a0 : b50a            >            lda zp1,x    ;load to indexed memory
32a2 : 9d3302          >            sta abst,x
32a5 : 28              >            plp
                        
32a6 : 3e3302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
32a9 : 08              >            php         ;save flags
32aa : bd3302          >            lda abst,x
32ad : dd0902          >            cmp rROL,x    ;test result
                       >            trap_ne
32b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32b2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
32b3 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
32b5 : dd1902          >            cmp fROL,x    ;test flags
                       >            trap_ne
32b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32ba : ca                       dex
32bb : 10e0                     bpl trol9
                        
32bd : a203                     ldx #3
32bf :                  trolc8
                                set_absx zp1,fc
                       >            load_flag fc
32bf : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
32c1 : 48              >            pha         ;use stack to load status
32c2 : b50a            >            lda zp1,x    ;load to indexed memory
32c4 : 9d3302          >            sta abst,x
32c7 : 28              >            plp
                        
32c8 : 3e3302                   rol abst,x
                                tst_absx rROLc,fROLc,0
32cb : 08              >            php         ;save flags
32cc : bd3302          >            lda abst,x
32cf : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
32d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32d4 : 68              >            pla         ;load status
                       >            eor_flag 0
32d5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
32d7 : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
32da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32dc : ca                       dex
32dd : 10e0                     bpl trolc8
32df : a203                     ldx #3
32e1 :                  trolc9
                                set_absx zp1,$ff
                       >            load_flag $ff
32e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32e3 : 48              >            pha         ;use stack to load status
32e4 : b50a            >            lda zp1,x    ;load to indexed memory
32e6 : 9d3302          >            sta abst,x
32e9 : 28              >            plp
                        
32ea : 3e3302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
32ed : 08              >            php         ;save flags
32ee : bd3302          >            lda abst,x
32f1 : dd0d02          >            cmp rROLc,x    ;test result
                       >            trap_ne
32f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32f6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
32f7 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
32f9 : dd1d02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
32fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32fe : ca                       dex
32ff : 10e0                     bpl trolc9
                        
3301 : a203                     ldx #3
3303 :                  tror8
                                set_absx zp1,0
                       >            load_flag 0
3303 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3305 : 48              >            pha         ;use stack to load status
3306 : b50a            >            lda zp1,x    ;load to indexed memory
3308 : 9d3302          >            sta abst,x
330b : 28              >            plp
                        
330c : 7e3302                   ror abst,x
                                tst_absx rROR,fROR,0
330f : 08              >            php         ;save flags
3310 : bd3302          >            lda abst,x
3313 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
3316 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3318 : 68              >            pla         ;load status
                       >            eor_flag 0
3319 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
331b : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
331e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3320 : ca                       dex
3321 : 10e0                     bpl tror8
3323 : a203                     ldx #3
3325 :                  tror9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
3325 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
3327 : 48              >            pha         ;use stack to load status
3328 : b50a            >            lda zp1,x    ;load to indexed memory
332a : 9d3302          >            sta abst,x
332d : 28              >            plp
                        
332e : 7e3302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
3331 : 08              >            php         ;save flags
3332 : bd3302          >            lda abst,x
3335 : dd1102          >            cmp rROR,x    ;test result
                       >            trap_ne
3338 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
333a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
333b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
333d : dd2102          >            cmp fROR,x    ;test flags
                       >            trap_ne
3340 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3342 : ca                       dex
3343 : 10e0                     bpl tror9
                        
3345 : a203                     ldx #3
3347 :                  trorc8
                                set_absx zp1,fc
                       >            load_flag fc
3347 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
3349 : 48              >            pha         ;use stack to load status
334a : b50a            >            lda zp1,x    ;load to indexed memory
334c : 9d3302          >            sta abst,x
334f : 28              >            plp
                        
3350 : 7e3302                   ror abst,x
                                tst_absx rRORc,fRORc,0
3353 : 08              >            php         ;save flags
3354 : bd3302          >            lda abst,x
3357 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
335a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
335c : 68              >            pla         ;load status
                       >            eor_flag 0
335d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
335f : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3362 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3364 : ca                       dex
3365 : 10e0                     bpl trorc8
3367 : a203                     ldx #3
3369 :                  trorc9
                                set_absx zp1,$ff
                       >            load_flag $ff
3369 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
336b : 48              >            pha         ;use stack to load status
336c : b50a            >            lda zp1,x    ;load to indexed memory
336e : 9d3302          >            sta abst,x
3371 : 28              >            plp
                        
3372 : 7e3302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
3375 : 08              >            php         ;save flags
3376 : bd3302          >            lda abst,x
3379 : dd1502          >            cmp rRORc,x    ;test result
                       >            trap_ne
337c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
337e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
337f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3381 : dd2502          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3384 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3386 : ca                       dex
3387 : 10e0                     bpl trorc9
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
3389 : a200                     ldx #0
338b : a97e                     lda #$7e
338d : 850f                     sta zpt
338f :                  tinc    
                                set_stat 0
                       >            load_flag 0
338f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3391 : 48              >            pha         ;use stack to load status
3392 : 28              >            plp
                        
3393 : e60f                     inc zpt
                                tst_z rINC,fINC,0
3395 : 08              >            php         ;save flags
3396 : a50f            >            lda zpt
3398 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
339b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
339d : 68              >            pla         ;load status
                       >            eor_flag 0
339e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
33a0 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
33a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33a5 : e8                       inx
33a6 : e002                     cpx #2
33a8 : d004                     bne tinc1
33aa : a9fe                     lda #$fe
33ac : 850f                     sta zpt
33ae : e005             tinc1   cpx #5
33b0 : d0dd                     bne tinc
33b2 : ca                       dex
33b3 : e60f                     inc zpt
33b5 :                  tdec    
                                set_stat 0
                       >            load_flag 0
33b5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33b7 : 48              >            pha         ;use stack to load status
33b8 : 28              >            plp
                        
33b9 : c60f                     dec zpt
                                tst_z rINC,fINC,0
33bb : 08              >            php         ;save flags
33bc : a50f            >            lda zpt
33be : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
33c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33c3 : 68              >            pla         ;load status
                       >            eor_flag 0
33c4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
33c6 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
33c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33cb : ca                       dex
33cc : 300a                     bmi tdec1
33ce : e001                     cpx #1
33d0 : d0e3                     bne tdec
33d2 : a981                     lda #$81
33d4 : 850f                     sta zpt
33d6 : d0dd                     bne tdec
33d8 :                  tdec1
33d8 : a200                     ldx #0
33da : a97e                     lda #$7e
33dc : 850f                     sta zpt
33de :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
33de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33e0 : 48              >            pha         ;use stack to load status
33e1 : 28              >            plp
                        
33e2 : e60f                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
33e4 : 08              >            php         ;save flags
33e5 : a50f            >            lda zpt
33e7 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
33ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33ec : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
33ed : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
33ef : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
33f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33f4 : e8                       inx
33f5 : e002                     cpx #2
33f7 : d004                     bne tinc11
33f9 : a9fe                     lda #$fe
33fb : 850f                     sta zpt
33fd : e005             tinc11  cpx #5
33ff : d0dd                     bne tinc10
3401 : ca                       dex
3402 : e60f                     inc zpt
3404 :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
3404 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3406 : 48              >            pha         ;use stack to load status
3407 : 28              >            plp
                        
3408 : c60f                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
340a : 08              >            php         ;save flags
340b : a50f            >            lda zpt
340d : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
3410 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3412 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3413 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3415 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
3418 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
341a : ca                       dex
341b : 300a                     bmi tdec11
341d : e001                     cpx #1
341f : d0e3                     bne tdec10
3421 : a981                     lda #$81
3423 : 850f                     sta zpt
3425 : d0dd                     bne tdec10
3427 :                  tdec11
                        
                        ; absolute memory
3427 : a200                     ldx #0
3429 : a97e                     lda #$7e
342b : 8d3302                   sta abst
342e :                  tinc2    
                                set_stat 0
                       >            load_flag 0
342e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3430 : 48              >            pha         ;use stack to load status
3431 : 28              >            plp
                        
3432 : ee3302                   inc abst
                                tst_abs rINC,fINC,0
3435 : 08              >            php         ;save flags
3436 : ad3302          >            lda abst
3439 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
343c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
343e : 68              >            pla         ;load status
                       >            eor_flag 0
343f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3441 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
3444 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3446 : e8                       inx
3447 : e002                     cpx #2
3449 : d005                     bne tinc3
344b : a9fe                     lda #$fe
344d : 8d3302                   sta abst
3450 : e005             tinc3   cpx #5
3452 : d0da                     bne tinc2
3454 : ca                       dex
3455 : ee3302                   inc abst
3458 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
3458 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
345a : 48              >            pha         ;use stack to load status
345b : 28              >            plp
                        
345c : ce3302                   dec abst
                                tst_abs rINC,fINC,0
345f : 08              >            php         ;save flags
3460 : ad3302          >            lda abst
3463 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
3466 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3468 : 68              >            pla         ;load status
                       >            eor_flag 0
3469 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
346b : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
346e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3470 : ca                       dex
3471 : 300b                     bmi tdec3
3473 : e001                     cpx #1
3475 : d0e1                     bne tdec2
3477 : a981                     lda #$81
3479 : 8d3302                   sta abst
347c : d0da                     bne tdec2
347e :                  tdec3
347e : a200                     ldx #0
3480 : a97e                     lda #$7e
3482 : 8d3302                   sta abst
3485 :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
3485 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3487 : 48              >            pha         ;use stack to load status
3488 : 28              >            plp
                        
3489 : ee3302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
348c : 08              >            php         ;save flags
348d : ad3302          >            lda abst
3490 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
3493 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3495 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3496 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3498 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
349b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
349d : e8                       inx
349e : e002                     cpx #2
34a0 : d005                     bne tinc13
34a2 : a9fe                     lda #$fe
34a4 : 8d3302                   sta abst
34a7 : e005             tinc13   cpx #5
34a9 : d0da                     bne tinc12
34ab : ca                       dex
34ac : ee3302                   inc abst
34af :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
34af : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34b1 : 48              >            pha         ;use stack to load status
34b2 : 28              >            plp
                        
34b3 : ce3302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
34b6 : 08              >            php         ;save flags
34b7 : ad3302          >            lda abst
34ba : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
34bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34bf : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34c0 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
34c2 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
34c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34c7 : ca                       dex
34c8 : 300b                     bmi tdec13
34ca : e001                     cpx #1
34cc : d0e1                     bne tdec12
34ce : a981                     lda #$81
34d0 : 8d3302                   sta abst
34d3 : d0da                     bne tdec12
34d5 :                  tdec13
                        
                        ; zeropage indexed
34d5 : a200                     ldx #0
34d7 : a97e                     lda #$7e
34d9 : 950f             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
34db : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34dd : 48              >            pha         ;use stack to load status
34de : 28              >            plp
                        
34df : f60f                     inc zpt,x
                                tst_zx rINC,fINC,0
34e1 : 08              >            php         ;save flags
34e2 : b50f            >            lda zpt,x
34e4 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
34e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34e9 : 68              >            pla         ;load status
                       >            eor_flag 0
34ea : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
34ec : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
34ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34f1 : b50f                     lda zpt,x
34f3 : e8                       inx
34f4 : e002                     cpx #2
34f6 : d002                     bne tinc5
34f8 : a9fe                     lda #$fe
34fa : e005             tinc5   cpx #5
34fc : d0db                     bne tinc4
34fe : ca                       dex
34ff : a902                     lda #2
3501 : 950f             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
3503 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3505 : 48              >            pha         ;use stack to load status
3506 : 28              >            plp
                        
3507 : d60f                     dec zpt,x
                                tst_zx rINC,fINC,0
3509 : 08              >            php         ;save flags
350a : b50f            >            lda zpt,x
350c : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
350f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3511 : 68              >            pla         ;load status
                       >            eor_flag 0
3512 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3514 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
3517 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3519 : b50f                     lda zpt,x
351b : ca                       dex
351c : 3008                     bmi tdec5
351e : e001                     cpx #1
3520 : d0df                     bne tdec4
3522 : a981                     lda #$81
3524 : d0db                     bne tdec4
3526 :                  tdec5
3526 : a200                     ldx #0
3528 : a97e                     lda #$7e
352a : 950f             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
352c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
352e : 48              >            pha         ;use stack to load status
352f : 28              >            plp
                        
3530 : f60f                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
3532 : 08              >            php         ;save flags
3533 : b50f            >            lda zpt,x
3535 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
3538 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
353a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
353b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
353d : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
3540 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3542 : b50f                     lda zpt,x
3544 : e8                       inx
3545 : e002                     cpx #2
3547 : d002                     bne tinc15
3549 : a9fe                     lda #$fe
354b : e005             tinc15  cpx #5
354d : d0db                     bne tinc14
354f : ca                       dex
3550 : a902                     lda #2
3552 : 950f             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
3554 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3556 : 48              >            pha         ;use stack to load status
3557 : 28              >            plp
                        
3558 : d60f                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
355a : 08              >            php         ;save flags
355b : b50f            >            lda zpt,x
355d : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
3560 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3562 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3563 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3565 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
3568 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
356a : b50f                     lda zpt,x
356c : ca                       dex
356d : 3008                     bmi tdec15
356f : e001                     cpx #1
3571 : d0df                     bne tdec14
3573 : a981                     lda #$81
3575 : d0db                     bne tdec14
3577 :                  tdec15
                        
                        ; memory indexed
3577 : a200                     ldx #0
3579 : a97e                     lda #$7e
357b : 9d3302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
357e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3580 : 48              >            pha         ;use stack to load status
3581 : 28              >            plp
                        
3582 : fe3302                   inc abst,x
                                tst_absx rINC,fINC,0
3585 : 08              >            php         ;save flags
3586 : bd3302          >            lda abst,x
3589 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
358c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
358e : 68              >            pla         ;load status
                       >            eor_flag 0
358f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3591 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
3594 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3596 : bd3302                   lda abst,x
3599 : e8                       inx
359a : e002                     cpx #2
359c : d002                     bne tinc7
359e : a9fe                     lda #$fe
35a0 : e005             tinc7   cpx #5
35a2 : d0d7                     bne tinc6
35a4 : ca                       dex
35a5 : a902                     lda #2
35a7 : 9d3302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
35aa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35ac : 48              >            pha         ;use stack to load status
35ad : 28              >            plp
                        
35ae : de3302                   dec abst,x
                                tst_absx rINC,fINC,0
35b1 : 08              >            php         ;save flags
35b2 : bd3302          >            lda abst,x
35b5 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
35b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35ba : 68              >            pla         ;load status
                       >            eor_flag 0
35bb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
35bd : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
35c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35c2 : bd3302                   lda abst,x
35c5 : ca                       dex
35c6 : 3008                     bmi tdec7
35c8 : e001                     cpx #1
35ca : d0db                     bne tdec6
35cc : a981                     lda #$81
35ce : d0d7                     bne tdec6
35d0 :                  tdec7
35d0 : a200                     ldx #0
35d2 : a97e                     lda #$7e
35d4 : 9d3302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
35d7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35d9 : 48              >            pha         ;use stack to load status
35da : 28              >            plp
                        
35db : fe3302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
35de : 08              >            php         ;save flags
35df : bd3302          >            lda abst,x
35e2 : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
35e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35e7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35e8 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
35ea : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
35ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35ef : bd3302                   lda abst,x
35f2 : e8                       inx
35f3 : e002                     cpx #2
35f5 : d002                     bne tinc17
35f7 : a9fe                     lda #$fe
35f9 : e005             tinc17  cpx #5
35fb : d0d7                     bne tinc16
35fd : ca                       dex
35fe : a902                     lda #2
3600 : 9d3302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
3603 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3605 : 48              >            pha         ;use stack to load status
3606 : 28              >            plp
                        
3607 : de3302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
360a : 08              >            php         ;save flags
360b : bd3302          >            lda abst,x
360e : dd2902          >            cmp rINC,x    ;test result
                       >            trap_ne
3611 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3613 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3614 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3616 : dd2e02          >            cmp fINC,x    ;test flags
                       >            trap_ne
3619 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
361b : bd3302                   lda abst,x
361e : ca                       dex
361f : 3008                     bmi tdec17
3621 : e001                     cpx #1
3623 : d0db                     bne tdec16
3625 : a981                     lda #$81
3627 : d0d7                     bne tdec16
3629 :                  tdec17
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
3629 : a203                     ldx #3      ;immediate - self modifying code
362b : b518             tand    lda zpAN,x
362d : 8d3836                   sta tandi1
                                set_ax  absANa,0
                       >            load_flag 0
3630 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3632 : 48              >            pha         ;use stack to load status
3633 : bd4802          >            lda absANa,x    ;precharge accu
3636 : 28              >            plp
                        
3638 =                  tandi1  equ *+1     ;target for immediate operand
3637 : 2963                     and #99
                                tst_ax  absrlo,absflo,0
3639 : 08              >            php         ;save flags
363a : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
363d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
363f : 68              >            pla         ;load status
                       >            eor_flag 0
3640 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3642 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3645 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3647 : ca                       dex
3648 : 10e1                     bpl tand
364a : a203                     ldx #3
364c : b518             tand1   lda zpAN,x
364e : 8d5936                   sta tandi2
                                set_ax  absANa,$ff
                       >            load_flag $ff
3651 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3653 : 48              >            pha         ;use stack to load status
3654 : bd4802          >            lda absANa,x    ;precharge accu
3657 : 28              >            plp
                        
3659 =                  tandi2  equ *+1     ;target for immediate operand
3658 : 2963                     and #99
                                tst_ax  absrlo,absflo,$ff-fnz
365a : 08              >            php         ;save flags
365b : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
365e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3660 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3661 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3663 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3666 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3668 : ca                       dex
3669 : 10e1                     bpl tand1
                        
366b : a203                     ldx #3      ;zp
366d : b518             tand2    lda zpAN,x
366f : 850f                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
3671 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3673 : 48              >            pha         ;use stack to load status
3674 : bd4802          >            lda absANa,x    ;precharge accu
3677 : 28              >            plp
                        
3678 : 250f                     and zpt
                                tst_ax  absrlo,absflo,0
367a : 08              >            php         ;save flags
367b : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
367e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3680 : 68              >            pla         ;load status
                       >            eor_flag 0
3681 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3683 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3686 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3688 : ca                       dex
3689 : 10e2                     bpl tand2
368b : a203                     ldx #3
368d : b518             tand3   lda zpAN,x
368f : 850f                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
3691 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3693 : 48              >            pha         ;use stack to load status
3694 : bd4802          >            lda absANa,x    ;precharge accu
3697 : 28              >            plp
                        
3698 : 250f                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
369a : 08              >            php         ;save flags
369b : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
369e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
36a0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
36a1 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
36a3 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
36a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
36a8 : ca                       dex
36a9 : 10e2                     bpl tand3
                        
36ab : a203                     ldx #3      ;abs
36ad : b518             tand4   lda zpAN,x
36af : 8d3302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
36b2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
36b4 : 48              >            pha         ;use stack to load status
36b5 : bd4802          >            lda absANa,x    ;precharge accu
36b8 : 28              >            plp
                        
36b9 : 2d3302                   and abst
                                tst_ax  absrlo,absflo,0
36bc : 08              >            php         ;save flags
36bd : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
36c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
36c2 : 68              >            pla         ;load status
                       >            eor_flag 0
36c3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
36c5 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
36c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
36ca : ca                       dex
36cb : 10e0                     bpl tand4
36cd : a203                     ldx #3
36cf : b518             tand5   lda zpAN,x
36d1 : 8d3302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
36d4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
36d6 : 48              >            pha         ;use stack to load status
36d7 : bd4802          >            lda absANa,x    ;precharge accu
36da : 28              >            plp
                        
36db : 2d3302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
36de : 08              >            php         ;save flags
36df : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
36e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
36e4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
36e5 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
36e7 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
36ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
36ec : ca                       dex
36ed : 1002                     bpl tand6
                        
36ef : a203                     ldx #3      ;zp,x
36f1 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
36f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
36f3 : 48              >            pha         ;use stack to load status
36f4 : bd4802          >            lda absANa,x    ;precharge accu
36f7 : 28              >            plp
                        
36f8 : 3518                     and zpAN,x
                                tst_ax  absrlo,absflo,0
36fa : 08              >            php         ;save flags
36fb : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
36fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3700 : 68              >            pla         ;load status
                       >            eor_flag 0
3701 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3703 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3706 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3708 : ca                       dex
3709 : 10e6                     bpl tand6
370b : a203                     ldx #3
370d :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
370d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
370f : 48              >            pha         ;use stack to load status
3710 : bd4802          >            lda absANa,x    ;precharge accu
3713 : 28              >            plp
                        
3714 : 3518                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
3716 : 08              >            php         ;save flags
3717 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
371a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
371c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
371d : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
371f : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3722 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3724 : ca                       dex
3725 : 10e6                     bpl tand7
                        
3727 : a203                     ldx #3      ;abs,x
3729 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
3729 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
372b : 48              >            pha         ;use stack to load status
372c : bd4802          >            lda absANa,x    ;precharge accu
372f : 28              >            plp
                        
3730 : 3d3c02                   and absAN,x
                                tst_ax  absrlo,absflo,0
3733 : 08              >            php         ;save flags
3734 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3737 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3739 : 68              >            pla         ;load status
                       >            eor_flag 0
373a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
373c : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
373f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3741 : ca                       dex
3742 : 10e5                     bpl tand8
3744 : a203                     ldx #3
3746 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
3746 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3748 : 48              >            pha         ;use stack to load status
3749 : bd4802          >            lda absANa,x    ;precharge accu
374c : 28              >            plp
                        
374d : 3d3c02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
3750 : 08              >            php         ;save flags
3751 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3754 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3756 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3757 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3759 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
375c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
375e : ca                       dex
375f : 10e5                     bpl tand9
                        
3761 : a003                     ldy #3      ;abs,y
3763 :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
3763 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3765 : 48              >            pha         ;use stack to load status
3766 : b94802          >            lda absANa,y    ;precharge accu
3769 : 28              >            plp
                        
376a : 393c02                   and absAN,y
                                tst_ay  absrlo,absflo,0
376d : 08              >            php         ;save flags
376e : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3771 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3773 : 68              >            pla         ;load status
                       >            eor_flag 0
3774 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3776 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3779 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
377b : 88                       dey
377c : 10e5                     bpl tand10
377e : a003                     ldy #3
3780 :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
3780 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3782 : 48              >            pha         ;use stack to load status
3783 : b94802          >            lda absANa,y    ;precharge accu
3786 : 28              >            plp
                        
3787 : 393c02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
378a : 08              >            php         ;save flags
378b : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
378e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3790 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3791 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3793 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3796 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3798 : 88                       dey
3799 : 10e5                     bpl tand11
                        
379b : a206                     ldx #6      ;(zp,x)
379d : a003                     ldy #3
379f :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
379f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
37a1 : 48              >            pha         ;use stack to load status
37a2 : b94802          >            lda absANa,y    ;precharge accu
37a5 : 28              >            plp
                        
37a6 : 2136                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
37a8 : 08              >            php         ;save flags
37a9 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
37ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
37ae : 68              >            pla         ;load status
                       >            eor_flag 0
37af : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
37b1 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
37b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
37b6 : ca                       dex
37b7 : ca                       dex
37b8 : 88                       dey
37b9 : 10e4                     bpl tand12
37bb : a206                     ldx #6
37bd : a003                     ldy #3
37bf :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
37bf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37c1 : 48              >            pha         ;use stack to load status
37c2 : b94802          >            lda absANa,y    ;precharge accu
37c5 : 28              >            plp
                        
37c6 : 2136                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
37c8 : 08              >            php         ;save flags
37c9 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
37cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
37ce : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
37cf : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
37d1 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
37d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
37d6 : ca                       dex
37d7 : ca                       dex
37d8 : 88                       dey
37d9 : 10e4                     bpl tand13
                        
37db : a003                     ldy #3      ;(zp),y
37dd :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
37dd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
37df : 48              >            pha         ;use stack to load status
37e0 : b94802          >            lda absANa,y    ;precharge accu
37e3 : 28              >            plp
                        
37e4 : 3136                     and (indAN),y
                                tst_ay  absrlo,absflo,0
37e6 : 08              >            php         ;save flags
37e7 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
37ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
37ec : 68              >            pla         ;load status
                       >            eor_flag 0
37ed : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
37ef : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
37f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
37f4 : 88                       dey
37f5 : 10e6                     bpl tand14
37f7 : a003                     ldy #3
37f9 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
37f9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37fb : 48              >            pha         ;use stack to load status
37fc : b94802          >            lda absANa,y    ;precharge accu
37ff : 28              >            plp
                        
3800 : 3136                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
3802 : 08              >            php         ;save flags
3803 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3806 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3808 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3809 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
380b : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
380e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3810 : 88                       dey
3811 : 10e6                     bpl tand15
                        
                        ; EOR
3813 : a203                     ldx #3      ;immediate - self modifying code
3815 : b51c             teor    lda zpEO,x
3817 : 8d2238                   sta teori1
                                set_ax  absEOa,0
                       >            load_flag 0
381a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
381c : 48              >            pha         ;use stack to load status
381d : bd4c02          >            lda absEOa,x    ;precharge accu
3820 : 28              >            plp
                        
3822 =                  teori1  equ *+1     ;target for immediate operand
3821 : 4963                     eor #99
                                tst_ax  absrlo,absflo,0
3823 : 08              >            php         ;save flags
3824 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3827 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3829 : 68              >            pla         ;load status
                       >            eor_flag 0
382a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
382c : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
382f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3831 : ca                       dex
3832 : 10e1                     bpl teor
3834 : a203                     ldx #3
3836 : b51c             teor1   lda zpEO,x
3838 : 8d4338                   sta teori2
                                set_ax  absEOa,$ff
                       >            load_flag $ff
383b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
383d : 48              >            pha         ;use stack to load status
383e : bd4c02          >            lda absEOa,x    ;precharge accu
3841 : 28              >            plp
                        
3843 =                  teori2  equ *+1     ;target for immediate operand
3842 : 4963                     eor #99
                                tst_ax  absrlo,absflo,$ff-fnz
3844 : 08              >            php         ;save flags
3845 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3848 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
384a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
384b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
384d : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3850 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3852 : ca                       dex
3853 : 10e1                     bpl teor1
                        
3855 : a203                     ldx #3      ;zp
3857 : b51c             teor2    lda zpEO,x
3859 : 850f                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
385b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
385d : 48              >            pha         ;use stack to load status
385e : bd4c02          >            lda absEOa,x    ;precharge accu
3861 : 28              >            plp
                        
3862 : 450f                     eor zpt
                                tst_ax  absrlo,absflo,0
3864 : 08              >            php         ;save flags
3865 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3868 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
386a : 68              >            pla         ;load status
                       >            eor_flag 0
386b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
386d : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3870 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3872 : ca                       dex
3873 : 10e2                     bpl teor2
3875 : a203                     ldx #3
3877 : b51c             teor3   lda zpEO,x
3879 : 850f                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
387b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
387d : 48              >            pha         ;use stack to load status
387e : bd4c02          >            lda absEOa,x    ;precharge accu
3881 : 28              >            plp
                        
3882 : 450f                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3884 : 08              >            php         ;save flags
3885 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3888 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
388a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
388b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
388d : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3890 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3892 : ca                       dex
3893 : 10e2                     bpl teor3
                        
3895 : a203                     ldx #3      ;abs
3897 : b51c             teor4   lda zpEO,x
3899 : 8d3302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
389c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
389e : 48              >            pha         ;use stack to load status
389f : bd4c02          >            lda absEOa,x    ;precharge accu
38a2 : 28              >            plp
                        
38a3 : 4d3302                   eor abst
                                tst_ax  absrlo,absflo,0
38a6 : 08              >            php         ;save flags
38a7 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
38aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
38ac : 68              >            pla         ;load status
                       >            eor_flag 0
38ad : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
38af : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
38b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
38b4 : ca                       dex
38b5 : 10e0                     bpl teor4
38b7 : a203                     ldx #3
38b9 : b51c             teor5   lda zpEO,x
38bb : 8d3302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
38be : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38c0 : 48              >            pha         ;use stack to load status
38c1 : bd4c02          >            lda absEOa,x    ;precharge accu
38c4 : 28              >            plp
                        
38c5 : 4d3302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
38c8 : 08              >            php         ;save flags
38c9 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
38cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
38ce : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
38cf : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
38d1 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
38d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
38d6 : ca                       dex
38d7 : 1002                     bpl teor6
                        
38d9 : a203                     ldx #3      ;zp,x
38db :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
38db : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
38dd : 48              >            pha         ;use stack to load status
38de : bd4c02          >            lda absEOa,x    ;precharge accu
38e1 : 28              >            plp
                        
38e2 : 551c                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
38e4 : 08              >            php         ;save flags
38e5 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
38e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
38ea : 68              >            pla         ;load status
                       >            eor_flag 0
38eb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
38ed : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
38f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
38f2 : ca                       dex
38f3 : 10e6                     bpl teor6
38f5 : a203                     ldx #3
38f7 :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
38f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38f9 : 48              >            pha         ;use stack to load status
38fa : bd4c02          >            lda absEOa,x    ;precharge accu
38fd : 28              >            plp
                        
38fe : 551c                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3900 : 08              >            php         ;save flags
3901 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3904 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3906 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3907 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3909 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
390c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
390e : ca                       dex
390f : 10e6                     bpl teor7
                        
3911 : a203                     ldx #3      ;abs,x
3913 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
3913 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3915 : 48              >            pha         ;use stack to load status
3916 : bd4c02          >            lda absEOa,x    ;precharge accu
3919 : 28              >            plp
                        
391a : 5d4002                   eor absEO,x
                                tst_ax  absrlo,absflo,0
391d : 08              >            php         ;save flags
391e : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3921 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3923 : 68              >            pla         ;load status
                       >            eor_flag 0
3924 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3926 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3929 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
392b : ca                       dex
392c : 10e5                     bpl teor8
392e : a203                     ldx #3
3930 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3930 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3932 : 48              >            pha         ;use stack to load status
3933 : bd4c02          >            lda absEOa,x    ;precharge accu
3936 : 28              >            plp
                        
3937 : 5d4002                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
393a : 08              >            php         ;save flags
393b : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
393e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3940 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3941 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3943 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3946 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3948 : ca                       dex
3949 : 10e5                     bpl teor9
                        
394b : a003                     ldy #3      ;abs,y
394d :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
394d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
394f : 48              >            pha         ;use stack to load status
3950 : b94c02          >            lda absEOa,y    ;precharge accu
3953 : 28              >            plp
                        
3954 : 594002                   eor absEO,y
                                tst_ay  absrlo,absflo,0
3957 : 08              >            php         ;save flags
3958 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
395b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
395d : 68              >            pla         ;load status
                       >            eor_flag 0
395e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3960 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3963 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3965 : 88                       dey
3966 : 10e5                     bpl teor10
3968 : a003                     ldy #3
396a :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
396a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
396c : 48              >            pha         ;use stack to load status
396d : b94c02          >            lda absEOa,y    ;precharge accu
3970 : 28              >            plp
                        
3971 : 594002                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
3974 : 08              >            php         ;save flags
3975 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3978 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
397a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
397b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
397d : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3980 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3982 : 88                       dey
3983 : 10e5                     bpl teor11
                        
3985 : a206                     ldx #6      ;(zp,x)
3987 : a003                     ldy #3
3989 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
3989 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
398b : 48              >            pha         ;use stack to load status
398c : b94c02          >            lda absEOa,y    ;precharge accu
398f : 28              >            plp
                        
3990 : 413e                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
3992 : 08              >            php         ;save flags
3993 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3996 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3998 : 68              >            pla         ;load status
                       >            eor_flag 0
3999 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
399b : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
399e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
39a0 : ca                       dex
39a1 : ca                       dex
39a2 : 88                       dey
39a3 : 10e4                     bpl teor12
39a5 : a206                     ldx #6
39a7 : a003                     ldy #3
39a9 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
39a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
39ab : 48              >            pha         ;use stack to load status
39ac : b94c02          >            lda absEOa,y    ;precharge accu
39af : 28              >            plp
                        
39b0 : 413e                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
39b2 : 08              >            php         ;save flags
39b3 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
39b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
39b8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
39b9 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
39bb : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
39be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
39c0 : ca                       dex
39c1 : ca                       dex
39c2 : 88                       dey
39c3 : 10e4                     bpl teor13
                        
39c5 : a003                     ldy #3      ;(zp),y
39c7 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
39c7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
39c9 : 48              >            pha         ;use stack to load status
39ca : b94c02          >            lda absEOa,y    ;precharge accu
39cd : 28              >            plp
                        
39ce : 513e                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
39d0 : 08              >            php         ;save flags
39d1 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
39d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
39d6 : 68              >            pla         ;load status
                       >            eor_flag 0
39d7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
39d9 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
39dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
39de : 88                       dey
39df : 10e6                     bpl teor14
39e1 : a003                     ldy #3
39e3 :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
39e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
39e5 : 48              >            pha         ;use stack to load status
39e6 : b94c02          >            lda absEOa,y    ;precharge accu
39e9 : 28              >            plp
                        
39ea : 513e                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
39ec : 08              >            php         ;save flags
39ed : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
39f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
39f2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
39f3 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
39f5 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
39f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
39fa : 88                       dey
39fb : 10e6                     bpl teor15
                        
                        ; OR
39fd : a203                     ldx #3      ;immediate - self modifying code
39ff : b514             tora    lda zpOR,x
3a01 : 8d0c3a                   sta torai1
                                set_ax  absORa,0
                       >            load_flag 0
3a04 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a06 : 48              >            pha         ;use stack to load status
3a07 : bd4402          >            lda absORa,x    ;precharge accu
3a0a : 28              >            plp
                        
3a0c =                  torai1  equ *+1     ;target for immediate operand
3a0b : 0963                     ora #99
                                tst_ax  absrlo,absflo,0
3a0d : 08              >            php         ;save flags
3a0e : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3a13 : 68              >            pla         ;load status
                       >            eor_flag 0
3a14 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a16 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3a1b : ca                       dex
3a1c : 10e1                     bpl tora
3a1e : a203                     ldx #3
3a20 : b514             tora1   lda zpOR,x
3a22 : 8d2d3a                   sta torai2
                                set_ax  absORa,$ff
                       >            load_flag $ff
3a25 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a27 : 48              >            pha         ;use stack to load status
3a28 : bd4402          >            lda absORa,x    ;precharge accu
3a2b : 28              >            plp
                        
3a2d =                  torai2  equ *+1     ;target for immediate operand
3a2c : 0963                     ora #99
                                tst_ax  absrlo,absflo,$ff-fnz
3a2e : 08              >            php         ;save flags
3a2f : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3a34 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3a35 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3a37 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3a3c : ca                       dex
3a3d : 10e1                     bpl tora1
                        
3a3f : a203                     ldx #3      ;zp
3a41 : b514             tora2    lda zpOR,x
3a43 : 850f                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
3a45 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a47 : 48              >            pha         ;use stack to load status
3a48 : bd4402          >            lda absORa,x    ;precharge accu
3a4b : 28              >            plp
                        
3a4c : 050f                     ora zpt
                                tst_ax  absrlo,absflo,0
3a4e : 08              >            php         ;save flags
3a4f : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3a54 : 68              >            pla         ;load status
                       >            eor_flag 0
3a55 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a57 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a5a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3a5c : ca                       dex
3a5d : 10e2                     bpl tora2
3a5f : a203                     ldx #3
3a61 : b514             tora3   lda zpOR,x
3a63 : 850f                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
3a65 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a67 : 48              >            pha         ;use stack to load status
3a68 : bd4402          >            lda absORa,x    ;precharge accu
3a6b : 28              >            plp
                        
3a6c : 050f                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3a6e : 08              >            php         ;save flags
3a6f : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3a74 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3a75 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3a77 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3a7c : ca                       dex
3a7d : 10e2                     bpl tora3
                        
3a7f : a203                     ldx #3      ;abs
3a81 : b514             tora4   lda zpOR,x
3a83 : 8d3302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
3a86 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a88 : 48              >            pha         ;use stack to load status
3a89 : bd4402          >            lda absORa,x    ;precharge accu
3a8c : 28              >            plp
                        
3a8d : 0d3302                   ora abst
                                tst_ax  absrlo,absflo,0
3a90 : 08              >            php         ;save flags
3a91 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3a96 : 68              >            pla         ;load status
                       >            eor_flag 0
3a97 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a99 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3a9e : ca                       dex
3a9f : 10e0                     bpl tora4
3aa1 : a203                     ldx #3
3aa3 : b514             tora5   lda zpOR,x
3aa5 : 8d3302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
3aa8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3aaa : 48              >            pha         ;use stack to load status
3aab : bd4402          >            lda absORa,x    ;precharge accu
3aae : 28              >            plp
                        
3aaf : 0d3302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
3ab2 : 08              >            php         ;save flags
3ab3 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3ab6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3ab8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3ab9 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3abb : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3abe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3ac0 : ca                       dex
3ac1 : 1002                     bpl tora6
                        
3ac3 : a203                     ldx #3      ;zp,x
3ac5 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
3ac5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3ac7 : 48              >            pha         ;use stack to load status
3ac8 : bd4402          >            lda absORa,x    ;precharge accu
3acb : 28              >            plp
                        
3acc : 1514                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
3ace : 08              >            php         ;save flags
3acf : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3ad2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3ad4 : 68              >            pla         ;load status
                       >            eor_flag 0
3ad5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3ad7 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3ada : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3adc : ca                       dex
3add : 10e6                     bpl tora6
3adf : a203                     ldx #3
3ae1 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
3ae1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3ae3 : 48              >            pha         ;use stack to load status
3ae4 : bd4402          >            lda absORa,x    ;precharge accu
3ae7 : 28              >            plp
                        
3ae8 : 1514                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3aea : 08              >            php         ;save flags
3aeb : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3aee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3af0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3af1 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3af3 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3af6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3af8 : ca                       dex
3af9 : 10e6                     bpl tora7
                        
3afb : a203                     ldx #3      ;abs,x
3afd :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
3afd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3aff : 48              >            pha         ;use stack to load status
3b00 : bd4402          >            lda absORa,x    ;precharge accu
3b03 : 28              >            plp
                        
3b04 : 1d3802                   ora absOR,x
                                tst_ax  absrlo,absflo,0
3b07 : 08              >            php         ;save flags
3b08 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3b0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3b0d : 68              >            pla         ;load status
                       >            eor_flag 0
3b0e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3b10 : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3b13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3b15 : ca                       dex
3b16 : 10e5                     bpl tora8
3b18 : a203                     ldx #3
3b1a :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
3b1a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b1c : 48              >            pha         ;use stack to load status
3b1d : bd4402          >            lda absORa,x    ;precharge accu
3b20 : 28              >            plp
                        
3b21 : 1d3802                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3b24 : 08              >            php         ;save flags
3b25 : dd5002          >            cmp absrlo,x    ;test result
                       >            trap_ne
3b28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3b2a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3b2b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3b2d : dd5402          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3b30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3b32 : ca                       dex
3b33 : 10e5                     bpl tora9
                        
3b35 : a003                     ldy #3      ;abs,y
3b37 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
3b37 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b39 : 48              >            pha         ;use stack to load status
3b3a : b94402          >            lda absORa,y    ;precharge accu
3b3d : 28              >            plp
                        
3b3e : 193802                   ora absOR,y
                                tst_ay  absrlo,absflo,0
3b41 : 08              >            php         ;save flags
3b42 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b45 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3b47 : 68              >            pla         ;load status
                       >            eor_flag 0
3b48 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3b4a : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b4d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3b4f : 88                       dey
3b50 : 10e5                     bpl tora10
3b52 : a003                     ldy #3
3b54 :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
3b54 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b56 : 48              >            pha         ;use stack to load status
3b57 : b94402          >            lda absORa,y    ;precharge accu
3b5a : 28              >            plp
                        
3b5b : 193802                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
3b5e : 08              >            php         ;save flags
3b5f : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3b64 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3b65 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3b67 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3b6c : 88                       dey
3b6d : 10e5                     bpl tora11
                        
3b6f : a206                     ldx #6      ;(zp,x)
3b71 : a003                     ldy #3
3b73 :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
3b73 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b75 : 48              >            pha         ;use stack to load status
3b76 : b94402          >            lda absORa,y    ;precharge accu
3b79 : 28              >            plp
                        
3b7a : 0146                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
3b7c : 08              >            php         ;save flags
3b7d : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3b82 : 68              >            pla         ;load status
                       >            eor_flag 0
3b83 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3b85 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3b8a : ca                       dex
3b8b : ca                       dex
3b8c : 88                       dey
3b8d : 10e4                     bpl tora12
3b8f : a206                     ldx #6
3b91 : a003                     ldy #3
3b93 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
3b93 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b95 : 48              >            pha         ;use stack to load status
3b96 : b94402          >            lda absORa,y    ;precharge accu
3b99 : 28              >            plp
                        
3b9a : 0146                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
3b9c : 08              >            php         ;save flags
3b9d : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3ba0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3ba2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3ba3 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3ba5 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3ba8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3baa : ca                       dex
3bab : ca                       dex
3bac : 88                       dey
3bad : 10e4                     bpl tora13
                        
3baf : a003                     ldy #3      ;(zp),y
3bb1 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
3bb1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3bb3 : 48              >            pha         ;use stack to load status
3bb4 : b94402          >            lda absORa,y    ;precharge accu
3bb7 : 28              >            plp
                        
3bb8 : 1146                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
3bba : 08              >            php         ;save flags
3bbb : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3bbe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3bc0 : 68              >            pla         ;load status
                       >            eor_flag 0
3bc1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3bc3 : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3bc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3bc8 : 88                       dey
3bc9 : 10e6                     bpl tora14
3bcb : a003                     ldy #3
3bcd :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
3bcd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3bcf : 48              >            pha         ;use stack to load status
3bd0 : b94402          >            lda absORa,y    ;precharge accu
3bd3 : 28              >            plp
                        
3bd4 : 1146                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
3bd6 : 08              >            php         ;save flags
3bd7 : d95002          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3bda : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3bdc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3bdd : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3bdf : d95402          >            cmp absflo,y    ;test flags
                       >            trap_ne
3be2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3be4 : 88                       dey
3be5 : 10e6                     bpl tora15
                            if I_flag = 3
3be7 : 58                       cli
                            endif                
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3be8 : d8                       cld
3be9 : a258                     ldx #ad2        ;for indexed test
3beb : a0ff                     ldy #$ff        ;max range
3bed : a900                     lda #0          ;start with adding zeroes & no carry
3bef : 8556                     sta adfc        ;carry in - for diag
3bf1 : 8557                     sta ad1         ;operand 1 - accumulator
3bf3 : 8558                     sta ad2         ;operand 2 - memory or immediate
3bf5 : 8d5802                   sta ada2        ;non zp
3bf8 : 8559                     sta adrl        ;expected result bits 0-7
3bfa : 855a                     sta adrh        ;expected result bit 8 (carry out)
3bfc : a9ff                     lda #$ff        ;complemented operand 2 for subtract
3bfe : 855c                     sta sb2
3c00 : 8d5902                   sta sba2        ;non zp
3c03 : a902                     lda #2          ;expected Z-flag
3c05 : 855b                     sta adrf
3c07 : 18               tadd    clc             ;test with carry clear
3c08 : 200e3e                   jsr chkadd
3c0b : e656                     inc adfc        ;now with carry
3c0d : e659                     inc adrl        ;result +1
3c0f : 08                       php             ;save N & Z from low result
3c10 : 08                       php
3c11 : 68                       pla             ;accu holds expected flags
3c12 : 2982                     and #$82        ;mask N & Z
3c14 : 28                       plp
3c15 : d002                     bne tadd1
3c17 : e65a                     inc adrh        ;result bit 8 - carry
3c19 : 055a             tadd1   ora adrh        ;merge C to expected flags
3c1b : 855b                     sta adrf        ;save expected flags except overflow
3c1d : 38                       sec             ;test with carry set
3c1e : 200e3e                   jsr chkadd
3c21 : c656                     dec adfc        ;same for operand +1 but no carry
3c23 : e657                     inc ad1
3c25 : d0e0                     bne tadd        ;iterate op1
3c27 : a900                     lda #0          ;preset result to op2 when op1 = 0
3c29 : 855a                     sta adrh
3c2b : ee5802                   inc ada2
3c2e : e658                     inc ad2
3c30 : 08                       php             ;save NZ as operand 2 becomes the new result
3c31 : 68                       pla
3c32 : 2982                     and #$82        ;mask N00000Z0
3c34 : 855b                     sta adrf        ;no need to check carry as we are adding to 0
3c36 : c65c                     dec sb2         ;complement subtract operand 2
3c38 : ce5902                   dec sba2
3c3b : a558                     lda ad2         
3c3d : 8559                     sta adrl
3c3f : d0c6                     bne tadd        ;iterate op2
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3c41 : f8                       sed 
3c42 : a258                     ldx #ad2        ;for indexed test
3c44 : a0ff                     ldy #$ff        ;max range
3c46 : a999                     lda #$99        ;start with adding 99 to 99 with carry
3c48 : 8557                     sta ad1         ;operand 1 - accumulator
3c4a : 8558                     sta ad2         ;operand 2 - memory or immediate
3c4c : 8d5802                   sta ada2        ;non zp
3c4f : 8559                     sta adrl        ;expected result bits 0-7
3c51 : a901                     lda #1          ;set carry in & out
3c53 : 8556                     sta adfc        ;carry in - for diag
3c55 : 855a                     sta adrh        ;expected result bit 8 (carry out)
3c57 : a900                     lda #0          ;complemented operand 2 for subtract
3c59 : 855c                     sta sb2
3c5b : 8d5902                   sta sba2        ;non zp
3c5e : 38               tdad    sec             ;test with carry set
3c5f : 20dd3c                   jsr chkdad
3c62 : c656                     dec adfc        ;now with carry clear
3c64 : a559                     lda adrl        ;decimal adjust result
3c66 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
3c68 : c65a                     dec adrh
3c6a : a999                     lda #$99
3c6c : 8559                     sta adrl
3c6e : d012                     bne tdad3
3c70 : 290f             tdad1   and #$f         ;lower nibble mask
3c72 : d00c                     bne tdad2       ;no decimal adjust needed
3c74 : c659                     dec adrl        ;decimal adjust (?0-6)
3c76 : c659                     dec adrl
3c78 : c659                     dec adrl
3c7a : c659                     dec adrl
3c7c : c659                     dec adrl
3c7e : c659                     dec adrl
3c80 : c659             tdad2   dec adrl        ;result -1
3c82 : 18               tdad3   clc             ;test with carry clear
3c83 : 20dd3c                   jsr chkdad
3c86 : e656                     inc adfc        ;same for operand -1 but with carry
3c88 : a557                     lda ad1         ;decimal adjust operand 1
3c8a : f015                     beq tdad5       ;iterate operand 2
3c8c : 290f                     and #$f         ;lower nibble mask
3c8e : d00c                     bne tdad4       ;skip decimal adjust
3c90 : c657                     dec ad1         ;decimal adjust (?0-6)
3c92 : c657                     dec ad1
3c94 : c657                     dec ad1
3c96 : c657                     dec ad1
3c98 : c657                     dec ad1
3c9a : c657                     dec ad1
3c9c : c657             tdad4   dec ad1         ;operand 1 -1
3c9e : 4c5e3c                   jmp tdad        ;iterate op1
                        
3ca1 : a999             tdad5   lda #$99        ;precharge op1 max
3ca3 : 8557                     sta ad1
3ca5 : a558                     lda ad2         ;decimal adjust operand 2
3ca7 : f030                     beq tdad7       ;end of iteration
3ca9 : 290f                     and #$f         ;lower nibble mask
3cab : d018                     bne tdad6       ;skip decimal adjust
3cad : c658                     dec ad2         ;decimal adjust (?0-6)
3caf : c658                     dec ad2
3cb1 : c658                     dec ad2
3cb3 : c658                     dec ad2
3cb5 : c658                     dec ad2
3cb7 : c658                     dec ad2
3cb9 : e65c                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
3cbb : e65c                     inc sb2
3cbd : e65c                     inc sb2
3cbf : e65c                     inc sb2
3cc1 : e65c                     inc sb2
3cc3 : e65c                     inc sb2
3cc5 : c658             tdad6   dec ad2         ;operand 2 -1
3cc7 : e65c                     inc sb2         ;complemeted operand for subtract
3cc9 : a55c                     lda sb2
3ccb : 8d5902                   sta sba2        ;copy as non zp operand
3cce : a558                     lda ad2
3cd0 : 8d5802                   sta ada2        ;copy as non zp operand
3cd3 : 8559                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
3cd5 : e65a                     inc adrh        ;result carry
3cd7 : d085                     bne tdad        ;iterate op2
3cd9 : d8               tdad7   cld
                        
                        ; S U C C E S S ************************************************       
                        ; -------------       
                                success         ;if you get here everything went well
3cda : 4cda3c          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************       
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3cdd :                  chkdad
                        ; decimal ADC / SBC zp
3cdd : 08                       php             ;save carry for subtract
3cde : a557                     lda ad1
3ce0 : 6558                     adc ad2         ;perform add
3ce2 : 08                       php          
3ce3 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3ce5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ce7 : 68                       pla             ;check flags
3ce8 : 2901                     and #1          ;mask carry
3cea : c55a                     cmp adrh
                                trap_ne         ;bad carry
3cec : d0fe            >        bne *           ;failed not equal (non zero)
                        
3cee : 28                       plp
3cef : 08                       php             ;save carry for next add
3cf0 : a557                     lda ad1
3cf2 : e55c                     sbc sb2         ;perform subtract
3cf4 : 08                       php          
3cf5 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3cf7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3cf9 : 68                       pla             ;check flags
3cfa : 2901                     and #1          ;mask carry
3cfc : c55a                     cmp adrh
                                trap_ne         ;bad flags
3cfe : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d00 : 28                       plp
                        ; decimal ADC / SBC abs
3d01 : 08                       php             ;save carry for subtract
3d02 : a557                     lda ad1
3d04 : 6d5802                   adc ada2        ;perform add
3d07 : 08                       php          
3d08 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d0a : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d0c : 68                       pla             ;check flags
3d0d : 2901                     and #1          ;mask carry
3d0f : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d11 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d13 : 28                       plp
3d14 : 08                       php             ;save carry for next add
3d15 : a557                     lda ad1
3d17 : ed5902                   sbc sba2        ;perform subtract
3d1a : 08                       php          
3d1b : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d1d : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d1f : 68                       pla             ;check flags
3d20 : 2901                     and #1          ;mask carry
3d22 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d24 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d26 : 28                       plp
                        ; decimal ADC / SBC #
3d27 : 08                       php             ;save carry for subtract
3d28 : a558                     lda ad2
3d2a : 8d303d                   sta chkdadi     ;self modify immediate
3d2d : a557                     lda ad1
3d30 =                  chkdadi = * + 1         ;operand of the immediate ADC
3d2f : 6900                     adc #0          ;perform add
3d31 : 08                       php          
3d32 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d34 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d36 : 68                       pla             ;check flags
3d37 : 2901                     and #1          ;mask carry
3d39 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d3b : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d3d : 28                       plp
3d3e : 08                       php             ;save carry for next add
3d3f : a55c                     lda sb2
3d41 : 8d473d                   sta chkdsbi     ;self modify immediate
3d44 : a557                     lda ad1
3d47 =                  chkdsbi = * + 1         ;operand of the immediate SBC
3d46 : e900                     sbc #0          ;perform subtract
3d48 : 08                       php          
3d49 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d4b : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d4d : 68                       pla             ;check flags
3d4e : 2901                     and #1          ;mask carry
3d50 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d54 : 28                       plp
                        ; decimal ADC / SBC zp,x
3d55 : 08                       php             ;save carry for subtract
3d56 : a557                     lda ad1
3d58 : 7500                     adc 0,x         ;perform add
3d5a : 08                       php          
3d5b : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d5d : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d5f : 68                       pla             ;check flags
3d60 : 2901                     and #1          ;mask carry
3d62 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d64 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d66 : 28                       plp
3d67 : 08                       php             ;save carry for next add
3d68 : a557                     lda ad1
3d6a : f504                     sbc sb2-ad2,x   ;perform subtract
3d6c : 08                       php          
3d6d : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d6f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d71 : 68                       pla             ;check flags
3d72 : 2901                     and #1          ;mask carry
3d74 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d76 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d78 : 28                       plp
                        ; decimal ADC / SBC abs,x
3d79 : 08                       php             ;save carry for subtract
3d7a : a557                     lda ad1
3d7c : 7d0002                   adc ada2-ad2,x  ;perform add
3d7f : 08                       php          
3d80 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d82 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d84 : 68                       pla             ;check flags
3d85 : 2901                     and #1          ;mask carry
3d87 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d8b : 28                       plp
3d8c : 08                       php             ;save carry for next add
3d8d : a557                     lda ad1
3d8f : fd0102                   sbc sba2-ad2,x  ;perform subtract
3d92 : 08                       php          
3d93 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3d95 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d97 : 68                       pla             ;check flags
3d98 : 2901                     and #1          ;mask carry
3d9a : c55a                     cmp adrh
                                trap_ne         ;bad carry
3d9c : d0fe            >        bne *           ;failed not equal (non zero)
                        
3d9e : 28                       plp
                        ; decimal ADC / SBC abs,y
3d9f : 08                       php             ;save carry for subtract
3da0 : a557                     lda ad1
3da2 : 795901                   adc ada2-$ff,y  ;perform add
3da5 : 08                       php          
3da6 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3da8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3daa : 68                       pla             ;check flags
3dab : 2901                     and #1          ;mask carry
3dad : c55a                     cmp adrh
                                trap_ne         ;bad carry
3daf : d0fe            >        bne *           ;failed not equal (non zero)
                        
3db1 : 28                       plp
3db2 : 08                       php             ;save carry for next add
3db3 : a557                     lda ad1
3db5 : f95a01                   sbc sba2-$ff,y  ;perform subtract
3db8 : 08                       php          
3db9 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3dbb : d0fe            >        bne *           ;failed not equal (non zero)
                        
3dbd : 68                       pla             ;check flags
3dbe : 2901                     and #1          ;mask carry
3dc0 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3dc2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3dc4 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
3dc5 : 08                       php             ;save carry for subtract
3dc6 : a557                     lda ad1
3dc8 : 61f6                     adc (lo adi2-ad2,x) ;perform add
3dca : 08                       php          
3dcb : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3dcd : d0fe            >        bne *           ;failed not equal (non zero)
                        
3dcf : 68                       pla             ;check flags
3dd0 : 2901                     and #1          ;mask carry
3dd2 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3dd4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3dd6 : 28                       plp
3dd7 : 08                       php             ;save carry for next add
3dd8 : a557                     lda ad1
3dda : e1f8                     sbc (lo sbi2-ad2,x) ;perform subtract
3ddc : 08                       php          
3ddd : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3ddf : d0fe            >        bne *           ;failed not equal (non zero)
                        
3de1 : 68                       pla             ;check flags
3de2 : 2901                     and #1          ;mask carry
3de4 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3de6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3de8 : 28                       plp
                        ; decimal ADC / SBC (abs),y
3de9 : 08                       php             ;save carry for subtract
3dea : a557                     lda ad1
3dec : 7152                     adc (adiy2),y   ;perform add
3dee : 08                       php          
3def : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3df1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3df3 : 68                       pla             ;check flags
3df4 : 2901                     and #1          ;mask carry
3df6 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3df8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3dfa : 28                       plp
3dfb : 08                       php             ;save carry for next add
3dfc : a557                     lda ad1
3dfe : f154                     sbc (sbiy2),y   ;perform subtract
3e00 : 08                       php          
3e01 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3e03 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e05 : 68                       pla             ;check flags
3e06 : 2901                     and #1          ;mask carry
3e08 : c55a                     cmp adrh
                                trap_ne         ;bad carry
3e0a : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e0c : 28                       plp
3e0d : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3e0e : a55b             chkadd  lda adrf        ;add V-flag if overflow
3e10 : 2983                     and #$83        ;keep N-----ZC / clear V
3e12 : 48                       pha
3e13 : a557                     lda ad1         ;test sign unequal between operands
3e15 : 4558                     eor ad2
3e17 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
3e19 : a557                     lda ad1         ;test sign equal between operands and result
3e1b : 4559                     eor adrl
3e1d : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
3e1f : 68                       pla
3e20 : 0940                     ora #$40        ;set V
3e22 : 48                       pha
3e23 : 68               ckad1   pla
3e24 : 855b                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
3e26 : 08                       php             ;save carry for subtract
3e27 : a557                     lda ad1
3e29 : 6558                     adc ad2         ;perform add
3e2b : 08                       php          
3e2c : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3e2e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e30 : 68                       pla             ;check flags
3e31 : 29c3                     and #$c3        ;mask NV----ZC
3e33 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3e35 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e37 : 28                       plp
3e38 : 08                       php             ;save carry for next add
3e39 : a557                     lda ad1
3e3b : e55c                     sbc sb2         ;perform subtract
3e3d : 08                       php          
3e3e : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3e40 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e42 : 68                       pla             ;check flags
3e43 : 29c3                     and #$c3        ;mask NV----ZC
3e45 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3e47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e49 : 28                       plp
                        ; binary ADC / SBC abs
3e4a : 08                       php             ;save carry for subtract
3e4b : a557                     lda ad1
3e4d : 6d5802                   adc ada2        ;perform add
3e50 : 08                       php          
3e51 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3e53 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e55 : 68                       pla             ;check flags
3e56 : 29c3                     and #$c3        ;mask NV----ZC
3e58 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3e5a : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e5c : 28                       plp
3e5d : 08                       php             ;save carry for next add
3e5e : a557                     lda ad1
3e60 : ed5902                   sbc sba2        ;perform subtract
3e63 : 08                       php          
3e64 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3e66 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e68 : 68                       pla             ;check flags
3e69 : 29c3                     and #$c3        ;mask NV----ZC
3e6b : c55b                     cmp adrf
                                trap_ne         ;bad flags
3e6d : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e6f : 28                       plp
                        ; binary ADC / SBC #
3e70 : 08                       php             ;save carry for subtract
3e71 : a558                     lda ad2
3e73 : 8d793e                   sta chkadi      ;self modify immediate
3e76 : a557                     lda ad1
3e79 =                  chkadi  = * + 1         ;operand of the immediate ADC
3e78 : 6900                     adc #0          ;perform add
3e7a : 08                       php          
3e7b : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3e7d : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e7f : 68                       pla             ;check flags
3e80 : 29c3                     and #$c3        ;mask NV----ZC
3e82 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3e84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e86 : 28                       plp
3e87 : 08                       php             ;save carry for next add
3e88 : a55c                     lda sb2
3e8a : 8d903e                   sta chksbi      ;self modify immediate
3e8d : a557                     lda ad1
3e90 =                  chksbi  = * + 1         ;operand of the immediate SBC
3e8f : e900                     sbc #0          ;perform subtract
3e91 : 08                       php          
3e92 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3e94 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e96 : 68                       pla             ;check flags
3e97 : 29c3                     and #$c3        ;mask NV----ZC
3e99 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3e9b : d0fe            >        bne *           ;failed not equal (non zero)
                        
3e9d : 28                       plp
                        ; binary ADC / SBC zp,x
3e9e : 08                       php             ;save carry for subtract
3e9f : a557                     lda ad1
3ea1 : 7500                     adc 0,x         ;perform add
3ea3 : 08                       php          
3ea4 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3ea6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ea8 : 68                       pla             ;check flags
3ea9 : 29c3                     and #$c3        ;mask NV----ZC
3eab : c55b                     cmp adrf
                                trap_ne         ;bad flags
3ead : d0fe            >        bne *           ;failed not equal (non zero)
                        
3eaf : 28                       plp
3eb0 : 08                       php             ;save carry for next add
3eb1 : a557                     lda ad1
3eb3 : f504                     sbc sb2-ad2,x   ;perform subtract
3eb5 : 08                       php          
3eb6 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3eb8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3eba : 68                       pla             ;check flags
3ebb : 29c3                     and #$c3        ;mask NV----ZC
3ebd : c55b                     cmp adrf
                                trap_ne         ;bad flags
3ebf : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ec1 : 28                       plp
                        ; binary ADC / SBC abs,x
3ec2 : 08                       php             ;save carry for subtract
3ec3 : a557                     lda ad1
3ec5 : 7d0002                   adc ada2-ad2,x  ;perform add
3ec8 : 08                       php          
3ec9 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3ecb : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ecd : 68                       pla             ;check flags
3ece : 29c3                     and #$c3        ;mask NV----ZC
3ed0 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3ed2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ed4 : 28                       plp
3ed5 : 08                       php             ;save carry for next add
3ed6 : a557                     lda ad1
3ed8 : fd0102                   sbc sba2-ad2,x  ;perform subtract
3edb : 08                       php          
3edc : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3ede : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ee0 : 68                       pla             ;check flags
3ee1 : 29c3                     and #$c3        ;mask NV----ZC
3ee3 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3ee5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ee7 : 28                       plp
                        ; binary ADC / SBC abs,y
3ee8 : 08                       php             ;save carry for subtract
3ee9 : a557                     lda ad1
3eeb : 795901                   adc ada2-$ff,y  ;perform add
3eee : 08                       php          
3eef : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3ef1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3ef3 : 68                       pla             ;check flags
3ef4 : 29c3                     and #$c3        ;mask NV----ZC
3ef6 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3ef8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3efa : 28                       plp
3efb : 08                       php             ;save carry for next add
3efc : a557                     lda ad1
3efe : f95a01                   sbc sba2-$ff,y  ;perform subtract
3f01 : 08                       php          
3f02 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f04 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f06 : 68                       pla             ;check flags
3f07 : 29c3                     and #$c3        ;mask NV----ZC
3f09 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3f0b : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f0d : 28                       plp
                        ; binary ADC / SBC (zp,x)
3f0e : 08                       php             ;save carry for subtract
3f0f : a557                     lda ad1
3f11 : 61f6                     adc (lo adi2-ad2,x) ;perform add
3f13 : 08                       php          
3f14 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f16 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f18 : 68                       pla             ;check flags
3f19 : 29c3                     and #$c3        ;mask NV----ZC
3f1b : c55b                     cmp adrf
                                trap_ne         ;bad flags
3f1d : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f1f : 28                       plp
3f20 : 08                       php             ;save carry for next add
3f21 : a557                     lda ad1
3f23 : e1f8                     sbc (lo sbi2-ad2,x) ;perform subtract
3f25 : 08                       php          
3f26 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f28 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f2a : 68                       pla             ;check flags
3f2b : 29c3                     and #$c3        ;mask NV----ZC
3f2d : c55b                     cmp adrf
                                trap_ne         ;bad flags
3f2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f31 : 28                       plp
                        ; binary ADC / SBC (abs),y
3f32 : 08                       php             ;save carry for subtract
3f33 : a557                     lda ad1
3f35 : 7152                     adc (adiy2),y   ;perform add
3f37 : 08                       php          
3f38 : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f3a : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f3c : 68                       pla             ;check flags
3f3d : 29c3                     and #$c3        ;mask NV----ZC
3f3f : c55b                     cmp adrf
                                trap_ne         ;bad flags
3f41 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f43 : 28                       plp
3f44 : 08                       php             ;save carry for next add
3f45 : a557                     lda ad1
3f47 : f154                     sbc (sbiy2),y   ;perform subtract
3f49 : 08                       php          
3f4a : c559                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f4c : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f4e : 68                       pla             ;check flags
3f4f : 29c3                     and #$c3        ;mask NV----ZC
3f51 : c55b                     cmp adrf
                                trap_ne         ;bad flags
3f53 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f55 : 28                       plp
3f56 : 60                       rts
                        
                        ; target for the jump absolute test
3f57 : 88                       dey
3f58 : 88                       dey
3f59 :                  test_far
3f59 : 08                       php             ;either SP or Y count will fail, if we do not hit
3f5a : 88                       dey
3f5b : 88                       dey
3f5c : 88                       dey
3f5d : 28                       plp
                                trap_cs         ;flags loaded?
3f5e : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3f60 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3f62 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3f64 : f0fe            >        beq *           ;failed equal (zero)
                        
3f66 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
3f68 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f6a : e041                     cpx #'A'
                                trap_ne        
3f6c : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f6e : c04f                     cpy #('R'-3)
                                trap_ne
3f70 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f72 : 48                       pha             ;save a,x
3f73 : 8a                       txa
3f74 : 48                       pha
3f75 : ba                       tsx
3f76 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
3f78 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3f7a : 68                       pla             ;restore x
3f7b : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
3f7c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3f7e : 48              >            pha         ;use stack to load status
3f7f : 28              >            plp
                        
3f80 : 68                       pla             ;restore a
3f81 : e8                       inx             ;return registers with modifications
3f82 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3f84 : 4ca713                   jmp far_ret
                                
                        ; target for the jump indirect test
3f87 : 903f             ptr_tst_ind dw test_ind
3f89 : f013             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
3f8b : 4c8b3f          >        jmp *           ;failed anyway
                        
3f8e : 88                       dey
3f8f : 88                       dey
3f90 :                  test_ind
3f90 : 08                       php             ;either SP or Y count will fail, if we do not hit
3f91 : 88                       dey
3f92 : 88                       dey
3f93 : 88                       dey
3f94 : 28                       plp
                                trap_cs         ;flags loaded?
3f95 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3f97 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3f99 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3f9b : f0fe            >        beq *           ;failed equal (zero)
                        
3f9d : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
3f9f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fa1 : e04e                     cpx #'N'
                                trap_ne        
3fa3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fa5 : c041                     cpy #('D'-3)
                                trap_ne
3fa7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fa9 : 48                       pha             ;save a,x
3faa : 8a                       txa
3fab : 48                       pha
3fac : ba                       tsx
3fad : e0fd                     cpx #$fd        ;check SP
                                trap_ne
3faf : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fb1 : 68                       pla             ;restore x
3fb2 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
3fb3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3fb5 : 48              >            pha         ;use stack to load status
3fb6 : 28              >            plp
                        
3fb7 : 68                       pla             ;restore a
3fb8 : e8                       inx             ;return registers with modifications
3fb9 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3fbb : 6c893f                   jmp (ptr_ind_ret)
                                trap            ;runover protection
3fbe : 4cbe3f          >        jmp *           ;failed anyway
                        
                        
                        ; target for the jump subroutine test
3fc1 : 88                       dey
3fc2 : 88                       dey
3fc3 :                  test_jsr
3fc3 : 08                       php             ;either SP or Y count will fail, if we do not hit
3fc4 : 88                       dey
3fc5 : 88                       dey
3fc6 : 88                       dey
3fc7 : 28                       plp
                                trap_cs         ;flags loaded?
3fc8 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3fca : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3fcc : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3fce : f0fe            >        beq *           ;failed equal (zero)
                        
3fd0 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
3fd2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fd4 : e053                     cpx #'S'
                                trap_ne        
3fd6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fd8 : c04f                     cpy #('R'-3)
                                trap_ne
3fda : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fdc : 48                       pha             ;save a,x
3fdd : 8a                       txa
3fde : 48                       pha       
3fdf : ba                       tsx             ;sp -4? (return addr,a,x)
3fe0 : e0fb                     cpx #$fb
                                trap_ne
3fe2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3fe4 : adff01                   lda $1ff        ;propper return on stack
3fe7 : c914                     cmp #hi(jsr_ret)
                                trap_ne
3fe9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3feb : adfe01                   lda $1fe
3fee : c91a                     cmp #lo(jsr_ret)
                                trap_ne
3ff0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
3ff2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3ff4 : 48              >            pha         ;use stack to load status
3ff5 : 28              >            plp
                        
3ff6 : 68                       pla             ;pull x,a
3ff7 : aa                       tax
3ff8 : 68                       pla
3ff9 : e8                       inx             ;return registers with modifications
3ffa : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3ffc : 60                       rts
                                trap            ;runover protection
3ffd : 4cfd3f          >        jmp *           ;failed anyway
                        
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
4000 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
4000 : 4c0040          >        jmp *           ;failed anyway
                        
4003 :                  res_trap
                                trap            ;unexpected RESET
4003 : 4c0340          >        jmp *           ;failed anyway
                        
                                
4006 : 88                       dey
4007 : 88                       dey
4008 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
4008 : 08                       php             ;either SP or Y count will fail, if we do not hit
4009 : 88                       dey
400a : 88                       dey
400b : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
400c : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
400e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4010 : e052                     cpx #'R'
                                trap_ne        
4012 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4014 : c048                     cpy #('K'-3)
                                trap_ne
4016 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4018 : 855d                     sta irq_a       ;save registers during break test
401a : 865e                     stx irq_x
401c : ba                       tsx             ;test break on stack
401d : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
4020 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
4022 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4024 : 68                       pla
4025 : c934                     cmp #$34        ;should have added interrupt disable
                                trap_ne
4027 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4029 : ba                       tsx
402a : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
402c : d0fe            >        bne *           ;failed not equal (non zero)
                        
402e : adff01                   lda $1ff        ;propper return on stack
4031 : c914                     cmp #hi(brk_ret)
                                trap_ne
4033 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4035 : adfe01                   lda $1fe
4038 : c945                     cmp #lo(brk_ret)
                                trap_ne
403a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
403c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
403e : 48              >            pha         ;use stack to load status
403f : 28              >            plp
                        
4040 : a65e                     ldx irq_x
4042 : e8                       inx             ;return registers with modifications
4043 : a55d                     lda irq_a
4045 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
4047 : 40                       rti
                                trap            ;runover protection
4048 : 4c4840          >        jmp *           ;failed anyway
                        
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
404b :                  zp_init
404b : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
404f : 7f               zp7f_   db  $7f             ;test pattern for compare  
4050 : 0000000000       zpt_    ds  5               ;store/modify test area
                        ;logical zeropage operands
4055 : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
4059 : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
405d : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
4061 : 0002             ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
4063 : 0102                     dw  abs1+1
4065 : 0202                     dw  abs1+2
4067 : 0302                     dw  abs1+3
4069 : 0402                     dw  abs7f
406b : 0801             inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
406d : 3302             indt_   dw  abst            ;indirect pointer to store area in absolute memory
406f : 3402                     dw  abst+1
4071 : 3502                     dw  abst+2
4073 : 3602                     dw  abst+3
4075 : 3b01             inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
4077 : 3c02             indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
4079 : 3d02                     dw  absAN+1
407b : 3e02                     dw  absAN+2
407d : 3f02                     dw  absAN+3
407f : 4002             indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
4081 : 4102                     dw  absEO+1
4083 : 4202                     dw  absEO+2
4085 : 4302                     dw  absEO+3
4087 : 3802             indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
4089 : 3902                     dw  absOR+1
408b : 3a02                     dw  absOR+2
408d : 3b02                     dw  absOR+3
                        ;add/subtract operand generation and result/flag prediction
408f : 5802             adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
4091 : 5902             sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
4093 : 5901             adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
4095 : 5a01             sbiy2_  dw  sba2-$ff
                        ;adfc    ds  1               ;carry flag before op
                        ;ad1     ds  1               ;operand 1 - accumulator
                        ;ad2     ds  1               ;operand 2 - memory / immediate
                        ;adrl    ds  1               ;expected result bits 0-7
                        ;adrh    ds  1               ;expected result bit 8 (carry)
                        ;adrf    ds  1               ;expected flags NV0000ZC (not valid in decimal mode)
                        ;sb2     ds  1               ;operand 2 complemented for subtract
                        ;break test interrupt save
                        ;irq_a   ds  1               ;a register
                        ;irq_x   ds  1               ;x register
4097 :                  zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
4097 :                  data_init
4097 : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
409b : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
409c : 80800002         fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
40a0 :                  rASL_                       ;expected result ASL & ROL -carry  
40a0 : 86048200         rROL_   db  $86,$04,$82,0   ; "
40a4 : 87058301         rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
40a8 :                  rLSR_                       ;expected result LSR & ROR -carry
40a8 : 61412000         rROR_   db  $61,$41,$20,0   ; "
40ac : e1c1a080         rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
40b0 :                  fASL_                       ;expected flags for shifts
40b0 : 81018002         fROL_   db  fnc,fc,fn,fz    ;no carry in
40b4 : 81018000         fROLc_  db  fnc,fc,fn,0     ;carry in
40b8 :                  fLSR_
40b8 : 01000102         fROR_   db  fc,0,fc,fz      ;no carry in
40bc : 81808180         fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
40c0 : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
40c5 : 0080800200       fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
40ca : 0000000000       abst_   ds  5               ;store/modify test area
                        ;logical memory operand
40cf : 001f7180         absOR_  db  0,$1f,$71,$80   ;test pattern for OR
40d3 : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
40d7 : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
40db : 00f11f00         absORa_ db  0,$f1,$1f,0     ;test pattern for OR
40df : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
40e3 : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
40e7 : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
40eb : 02800080         absflo_ db  fz,fn,0,fn
                        ;add/subtract operand copy
                        ;ada2    ds  1               ;operand 2
                        ;sba2    ds  1               ;operand 2 complemented for subtract
40ef :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                            endif                   ;end of RAM init data
                            
                            if ROM_vectors = 1  
fffa =                          org $fffa       ;vectors
fffa : 0040                     dw  nmi_trap
fffc : 0340                     dw  res_trap
fffe : 0840                     dw  irq_trap
                            endif
                            
No errors in pass 2.
Wrote binary from address $1000 through $ffff.
Total size 61440 bytes.
